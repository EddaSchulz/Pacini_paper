\documentclass[a4paper]{article}
\usepackage[cm]{fullpage}
\usepackage{pdflscape, amsmath, amssymb, pgffor}
\usepackage{caption, graphics, subcaption}
\usepackage{listings}
\usepackage{courier}
\usepackage{color}
\usepackage{hyperref}
\hypersetup{pdftex, colorlinks=true, linktoc=all, linkcolor=black}

\lstset{
basicstyle=\footnotesize\ttfamily,
breaklines=true
}


\usepackage{Sweave}
\begin{document}

\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\scriptsize}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\footnotesize}
\SweaveOpts{concordance=TRUE, keep.source=FALSE, prefix.string=figures/fig}



\title{Alignment and Gene Counting - Bulk RNA Sequencing}



\section{Description}

\noindent The following code aligns the FASTQ files generated by Bulk RNA Sequencing of the TX1072 and the two deletion cell lines (TxdXic_B6 and TxdXic_Cast), and quantifies gene expression for each biological replicate and time point. The \texttt{TX1072 cell line} and \texttt{TXdXic cell line} sections perform the STAR alignment on the B6/Cast N-masked genome, and quantify gene expression relative to the mouse mm10 gene annotation combined with ERCC spike-in sequences (\texttt{mm10ERCC.gtf}) for each of the two RNA Sequencing experiments separately.


\section{Define the path storing the GitHub repository}

\noindent Define the alignment path to the directory where the GitHub repository was downloaded, in R and BASH languages.

<<>>=
path <- "C:/Users/pacini/Pacini_paper-master/alignment/"
datapath <- "C:/Users/pacini/Pacini_paper-master/analysis/data/"
@

\begin{lstlisting}[language=bash]
path='C:/Users/pacini/Pacini_paper-master/alignment/'
\end{lstlisting}



\section{SNP annotation file}

\subsection{Download high quality SNPs from GEO}

\noindent Before proceeding with the STAR alignment, the high quality B6/Cast SNPs (\texttt{GSE151009_SNPs_B6_Cast.txt.gz}) are downloaded from the GEO repository (\texttt{https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151009}), and stored in the \texttt{"alignment/mm10/"} folder.

\begin{lstlisting}[language=bash]
mm10path=$path'mm10/'
gunzip -dk $mm10path'GSE151009_SNPs_B6_Cast.txt.gz'
\end{lstlisting}

\subsection{Define SNP annotation file using only two 5' SNPs for Xist quantification}

Every X-linked SNP in the locus (chrX: 103,460,366-103,482,000) is removed from the SNP annotation file.

<<>>=
library(data.table)
mm10path <- paste0(path, "mm10/")
file <- paste0(mm10path, "GSE151009_SNPs_B6_Cast.txt")
x <- fread(input = file); x <- data.frame(x)
start_Xist <- 103460366; thr <- 103482000
x_sub <- x[!((x$Chromosome %in% "X") & (x$Position %in% start_Xist:thr)),]
colnames(x_sub) <- colnames(x)
write.table(x = x_sub, sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE,
            file = paste0(mm10path, "GSE151009_SNPs_B6_Cast_Xist5prime.txt"))
@



\section{TX1072 cell line}

\subsection{Download FASTQ files}

\noindent Download the \texttt{TX1072} FASTQ files through the GEO accession number GSE151009 (available at https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151009), and store them in the \texttt{alignment/Sequencing_Output/Bulk_TX1072/fastq/} directory.

\subsection{Define STAR indices for masked genome}

\noindent Download STAR aligner (v.2.5.2b) from \texttt{https://github.com/alexdobin/STAR}, and store it in the \texttt{"alignment/scripts/"} folder. Then define a new directory to store STAR indices, \texttt{alignment/Sequencing_Output/Bulk_TX1072/mm10ERCC_Index/}. \\ \\ Since the read length is 50 bp-long, the \texttt{sjdbOverhang} parameter is set to 49 (i.e. read.length - 1).

\begin{lstlisting}[language=bash]
mm10path=$path'mm10/'
scriptpath=$path'scripts/'
indexpath=$path'Sequencing_Output/Bulk_TX1072/mm10ERCC_Index/'
mkdir -p $indexpath

$scriptpath'STAR-STAR_2.4.2a/bin/Linux_x86_64/STAR' \
  --runThreadN 5 \
  --runMode genomeGenerate \
  --genomeDir $indexpath \
  --genomeFastaFiles $mm10path'N_masked_B6_CAST_ERCC92.fa' \
  --sjdbGTFfile $mm10path'mm10ERCC.gtf' \
  --sjdbOverhang 49
\end{lstlisting}[language=bash]

\subsection{STAR alignment to masked genome}

\subsubsection{Define sample names}

\begin{lstlisting}[language=bash]
seqpath=$path'Sequencing_Output/Bulk_TX1072/'
fastqpath=$path'Sequencing_Output/Bulk_TX1072/fastq/'
ls $fastqpath | grep R1_001 | sed 's#\_R[1-2]_.*##' > $seqpath"samplename.txt"
\end{lstlisting}

\subsubsection{Read Alignment}

\begin{lstlisting}[language=bash]
alignment_path=$scriptpath'alignment/'
outpath=$seqpath"STAR/"
outpath5prime=$seqpath"STAR_5primeXist/"
fastq_path=$seqpath"fastq/"
fqf=$seqpath"samplename.txt"
star_path=$seqpath'STAR/'
snps=$mm10path'GSE151009_SNPs_B6_Cast.txt'
snps5prime=$mm10path'GSE151009_SNPs_B6_Cast_Xist5prime.txt'

let mismatch=2
let multimap=1
let cores=7

$alignment_path'alignment_launch_bulk.sh' \
 $scriptpath \
 $fastq_path \
 $outpath \
 $mismatch \
 $indexpath \
 $multimap \
 $fqf \
 $snps \
 $outpath5prime \
 $snps5prime
\end{lstlisting}

\subsection{Gene expression quantification}
<<>>=
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("Rsubread")
library(Rsubread)
@

\subsubsection{not-AS quantification}
<<>>=
seqpath <- paste0(path, "Sequencing_Output/Bulk_TX1072/")
s <- read.table(file = paste0(seqpath, "samplename.txt"), sep = "\n")
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.bam")
annot_file <- paste0(mm10path, "mm10ERCC.gtf")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "TX1072_FeatureCounts.RData"))
@

\subsubsection{AS quantification}
<<>>=

### All SNPs

# B6
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome1.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "TX1072_B6_FeatureCounts.RData"))

# Cast
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome2.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "TX1072_Cast_FeatureCounts.RData"))

### Xist 5' SNPs

# B6
bam_files <- paste0(seqpath, "STAR_5primeXist/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome1.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "TX1072_5primeXist_B6_FeatureCounts.RData"))

# Cast
bam_files <- paste0(seqpath, "STAR_5primeXist/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome2.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "TX1072_5primeXist_Cast_FeatureCounts.RData"))
@

\subsection{Define count matrices}

<<>>=
library(limma); library(plyr); library(R.utils)
load(paste0(seqpath, "TX1072_FeatureCounts.RData"))

# extract sample names and define new ones
id <- strsplit2(colnames(FC$counts), split = "\\.")
samples <- data.frame(sample = id[, 9],
                      sample2 = id[,13],
                      replicate = id[, 10],
                      time = id[, 11],
                      cell_line = id[, 12],
                      name = colnames(FC$counts))
samples$day <- as.numeric(as.character(gsub(samples$time, pattern = "h", replacement = "")))/24
samples$replicate <- revalue(factor(as.character(samples$replicate)), replace = c("I" = 1,
                                                                                  "II" = 2,
                                                                                  "III" = 3))
samples$id <- paste0("TX1072_d", samples$day, "_r", samples$replicate)
samples <- samples[order(samples$day, samples$replicate),]

# load gene annotation
gene_features <- read.table(file = paste0(datapath, "Gene_Features.txt"), header = T, sep = "\t")

# process and store count matrices
files <- c("TX1072_FeatureCounts.RData",
           "TX1072_B6_FeatureCounts.RData",
           "TX1072_Cast_FeatureCounts.RData",
           "TX1072_5primeXist_B6_FeatureCounts.RData",
           "TX1072_5primeXist_Cast_FeatureCounts.RData")

for(f in files){
  id <- gsub(f, pattern = ".RData", replacement = "")
  
  # load data
  load(paste0(seqpath, f))
  counts <- FC$counts
    
  # reorder and rename samples
  col_id <- strsplit2(colnames(counts), split = "\\.")
  col_id <- col_id[, apply(col_id, 2, function(x){sum(grepl(x, pattern = "^L"))>0})]
  counts <- counts[, match(samples$sample, col_id)]
  colnames(counts) <- samples$id
  
  # keep only annotated genes excluding ERCC
  ercc <- counts[grepl(rownames(counts), pattern = "^ERCC"),]
  counts <- counts[rownames(counts) %in% gene_features$Ensembl,]
  rownames(counts) <- gene_features$Symbol[match(rownames(counts), gene_features$Ensembl)]
  counts <- rbind(counts, ercc)
  counts <- counts[order(rownames(counts)),]
  
  # if Xist 5prime quantification, save only Xist expression counts
  if(grepl(id, pattern = "5primeXist")){
    temp <- matrix(counts["Xist",], ncol = ncol(counts))
    colnames(temp) <- colnames(counts)
    rownames(temp) <- "Xist"
    counts <- temp
  }
  
  # write table and gzip
  y <- paste0(seqpath, id, ".txt")
  write.table(x = counts, file = y, row.names = T, col.names = T, sep = "\t", quote = FALSE)
  yzip <- paste0(y, ".gz")
  if(file.exists(yzip)){file.remove(yzip)}
  gzip(y, remove = FALSE)
}
@




\section{TXdXic cell line}

\subsection{Download FASTQ files}

\noindent Download the \texttt{TXdXic} FASTQ files through the GEO accession number GSE151009 (available at https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE151009), and store them in the \texttt{alignment/Sequencing_Output/Bulk_TXdXic/fastq/} directory.

\subsection{Define STAR indices for masked genome}

\noindent Define a new directory to store STAR indices, \texttt{alignment/Sequencing_Output/Bulk_TXdXic/mm10ERCC_Index/}. \\ \\ Since the read length is 100 bp-long, the \texttt{sjdbOverhang} parameter is set to 99 (i.e. read.length - 1).

\begin{lstlisting}[language=bash]
mm10path=$path'mm10/'
scriptpath=$path'scripts/'
indexpath=$path'Sequencing_Output/Bulk_TXdXic/mm10ERCC_Index/'
mkdir -p $indexpath

$scriptpath'STAR-STAR_2.4.2a/bin/Linux_x86_64/STAR' \
  --runThreadN 5 \
  --runMode genomeGenerate \
  --genomeDir $indexpath \
  --genomeFastaFiles $mm10path'N_masked_B6_CAST_ERCC92.fa' \
  --sjdbGTFfile $mm10path'mm10ERCC.gtf' \
  --sjdbOverhang 99
\end{lstlisting}[language=bash]

\subsection{STAR alignment to masked genome}

\subsubsection{Define sample names}

\begin{lstlisting}[language=bash]
seqpath=$path'Sequencing_Output/Bulk_TXdXic/'
fastqpath=$path'Sequencing_Output/Bulk_TXdXic/fastq/'
ls $fastqpath | grep R1_001 | sed 's#\_R[1-2]_.*##' > $seqpath"samplename.txt"
\end{lstlisting}

\subsubsection{Read Alignment}

\begin{lstlisting}[language=bash]
alignment_path=$scriptpath'alignment/'
outpath=$seqpath"STAR/"
outpath5prime=$seqpath"STAR_5primeXist/"
fastq_path=$seqpath"fastq/"
fqf=$seqpath"samplename.txt"
star_path=$seqpath'STAR/'
snps=$mm10path'GSE151009_SNPs_B6_Cast.txt'
snps5prime=$mm10path'GSE151009_SNPs_B6_Cast_Xist5prime.txt'

let mismatch=2
let multimap=1
let cores=7

$alignment_path'alignment_launch_bulk.sh' \
 $scriptpath \
 $fastq_path \
 $outpath \
 $mismatch \
 $indexpath \
 $multimap \
 $fqf \
 $snps \
 $outpath5prime \
 $snps5prime
\end{lstlisting}

\subsection{Gene expression quantification}

<<>>=
if (!requireNamespace("BiocManager", quietly = TRUE))
    install.packages("BiocManager")
BiocManager::install("Rsubread")
library(Rsubread)
@

\subsubsection{not-AS quantification}
<<>>=
seqpath <- paste0(path, "Sequencing_Output/Bulk_TXdXic/")
s <- read.table(file = paste0(seqpath, "samplename.txt"), sep = "\n")
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.bam")
annot_file <- paste0(mm10path, "mm10ERCC.gtf")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "dXic_FeatureCounts.RData"))
@

\subsubsection{AS quantification}
<<>>=

### All SNPs

# B6
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome1.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "dXic_B6_FeatureCounts.RData"))

# Cast
bam_files <- paste0(seqpath, "STAR/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome2.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "dXic_Cast_FeatureCounts.RData"))

### Xist 5' SNPs

# B6
bam_files <- paste0(seqpath, "STAR_5primeXist/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome1.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "dXic_5primeXist_B6_FeatureCounts.RData"))

# Cast
bam_files <- paste0(seqpath, "STAR_5primeXist/", as.character(s$V1), "/Aligned.sortedByCoord.out.genome2.bam")
FC <- featureCounts(bam_files, 
                    annot.ext = annot_file, 
                    countMultiMappingReads = FALSE,
                    isPairedEnd = TRUE, 
                    isGTFAnnotationFile = TRUE,
                    strandSpecific = 2,
                    nthreads = 10)
save(FC, file = paste0(seqpath, "dXic_5primeXist_Cast_FeatureCounts.RData"))
@

\subsection{Define count matrices}

<<>>=
library(limma); library(plyr); library(R.utils)
load(paste0(seqpath, "dXic_FeatureCounts.RData"))

# extract sample names and define new ones
id <- strsplit2(colnames(FC$counts), split = "\\.")
samples <- data.frame(sample = id[,9], 
                        time = id[,8], 
                        cell_line = rep(rep(c("delta_B6", "delta_Cast"), each = 5), times = 3),
                        replicate = rep(1:3, each = 10))
samples$day <- as.numeric(as.character(gsub(samples$time, pattern = "h", replacement = "")))/24
samples$cl <- ifelse(samples$cell_line == "delta_B6", "dXicB6", "dXicCast")
samples$id <- paste0(samples$cl, "_d", samples$day, "_r", samples$replicate)

# load gene annotation
gene_features <- read.table(file = paste0(datapath, "Gene_Features.txt"), header = T, sep = "\t")

# process and store count matrices
files <- c("dXic_FeatureCounts.RData",
           "dXic_B6_FeatureCounts.RData",
           "dXic_Cast_FeatureCounts.RData",
           "dXic_5primeXist_B6_FeatureCounts.RData",
           "dXic_5primeXist_Cast_FeatureCounts.RData")

for(f in files){
  id <- gsub(f, pattern = ".RData", replacement = "")
  
  # load data
  load(paste0(seqpath, f))
  counts <- FC$counts
    
  # reorder and rename samples
  col_id <- strsplit2(colnames(counts), split = "\\.")
  col_id <- col_id[, apply(col_id, 2, function(x){sum(grepl(x, pattern = "^S[0-9]"))>0})]
  counts <- counts[, match(samples$sample, col_id)]
  colnames(counts) <- samples$id
  
  # keep only annotated genes excluding ERCC
  ercc <- counts[grepl(rownames(counts), pattern = "^ERCC"),]
  counts <- counts[rownames(counts) %in% gene_features$Ensembl,]
  rownames(counts) <- gene_features$Symbol[match(rownames(counts), gene_features$Ensembl)]
  counts <- rbind(counts, ercc)
  counts <- counts[order(rownames(counts)),]
  
  # if Xist 5prime quantification, save only Xist expression counts
  if(grepl(id, pattern = "5primeXist")){
    temp <- matrix(counts["Xist",], ncol = ncol(counts))
    colnames(temp) <- colnames(counts)
    rownames(temp) <- "Xist"
    counts <- temp
  }
  
  # write table and gzip
  y <- paste0(seqpath, id, ".txt")
  write.table(x = counts, file = y, row.names = T, col.names = T, sep = "\t", quote = FALSE)
  yzip <- paste0(y, ".gz")
  if(file.exists(yzip)){file.remove(yzip)}
  gzip(y, remove = FALSE)
}
@


\end{document}