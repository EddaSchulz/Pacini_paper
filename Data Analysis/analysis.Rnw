\documentclass[a4paper]{article}
\usepackage[cm]{fullpage}
\usepackage{pdflscape, amsmath, amssymb, pgffor}
\usepackage{caption, graphics, subcaption}
\usepackage{listings} %To plot the Unix script with 
\usepackage{courier}  %same
\usepackage{color}   %May be necessary if you want to color links
\usepackage{hyperref}
\hypersetup{pdftex, colorlinks=true, %set true if you want colored links
    linktoc=all,     %set to all if you want both sections and subsections linked
    linkcolor=black,  %choose some color if you want links to stand out
}

\lstset{
basicstyle=\footnotesize\ttfamily,
breaklines=true
}


\usepackage{Sweave}
\begin{document}

\DefineVerbatimEnvironment{Soutput}{Verbatim}{fontsize=\scriptsize}
\DefineVerbatimEnvironment{Sinput}{Verbatim}{fontsize=\footnotesize}
\SweaveOpts{concordance=TRUE, keep.source=FALSE, prefix.string=figures/fig}

\title{All analyses and figures - Paper 2019}
\author{Guido Pacini}

\maketitle
\tableofcontents
\clearpage

\section{Load packages and paths}
<<>>=
library(scran)
library(data.table)
library(limma)
library(edgeR)
library(foreach)
library(doParallel)
library(magrittr)
library(plyr)
library(dplyr)
library(ggplot2)
library(ggrepel)
library(cumstats)
library(drc)
library(grid)
library(SingleCellExperiment)
library(umap)
library(scales)
library(velocyto.R)
library(RColorBrewer)
library(grid)
library(gridExtra)
library(pheatmap)
library(gdata)
library(MAST)
library(UpSetR)
library(cluster)
library(xlsx)
library(monocle)
library(tidyr)
library(lsr)
library(ggalluvial)
library(readxl)
library(Rsamtools)
library(GenomicAlignments)
library(zoo)

path <- getwd()
notAS_path <- paste0(path, "data/notAS/")
AS_path <- paste0(path, "data/AS/")
unspliced_path <- paste0(path, "data/intronic/maskedgenome_IntronAnalysis_overlap/")
TimePoints <- paste0(seq(0, 96, by = 24), "hrs")
load(paste0(path, "data/biomart.RData"))
@

\section{Define plot settings and function}
<<>>=
pt_conversion <- 1/2.141959
pt_textconversion <- 0.35015

totwidth <- 5; totheight <- 5
panel_width_cm <- 2; panel_height_cm <- 3; strmargin <- .1
textsize <- 6; titlesize <- 6; geomtext_size <- 6*pt_textconversion
boxsize <- 0; outliersize <- 1e-5
outline_size <- 5e-1*pt_conversion; tick_size <- 0
SE_axis <- seq(0,100,25)
linesize <- 5e-1*pt_conversion; small_scattersize <- 1e-1; scattersize <- 0.5
arrowthick <- 4e-1; arrowidth <- 1e-1; arrowsharp <- 40
violin_box_size <- 0.25
hvlinesize <- 5e-1*pt_conversion; hvalpha <- 0.5
binscatter_mult <- 1.5 

allele_colors <- c("BA" = "#c51b8a", "B6" = "#1b9e77", "Cast" = "#d95f02")
time_colors <- c("#1b9e77", "#d95f02", "#7570b3", "#e7298a", "#66a61e")

color_alleles <- c("black", "grey", "#fa9fb5", allele_colors)
names(color_alleles) <- c("Xist Undetected", "Xist Low", 
                          "Intermediate Ratio", "Xist-BA",
                          "Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)")
comparison_colors <- c("#e7298a", "black")

theme1 <- theme(axis.text.x = element_text(size = textsize), 
                axis.text.y = element_text(size = textsize),
                axis.title.x = element_text(size = titlesize), 
                axis.title.y = element_text(size = titlesize), 
                plot.title = element_text(lineheight = 0.8, face = "bold", size = titlesize, hjust = 0.5),
                legend.title = element_text(size = textsize), 
                legend.text = element_text(size = textsize),
                legend.key.size = unit(1,"line"),
                axis.line.x = element_line(colour = "black", size = outline_size), 
                axis.line.y = element_line(colour = "black", size = outline_size), 
                panel.grid.major = element_blank(), 
                panel.grid.minor = element_blank(), 
                strip.text.x = element_text(size = textsize), 
                strip.text.y = element_text(size = textsize),
                strip.background = element_blank(),
                axis.ticks = element_line(colour = "black", size = outline_size),
                panel.border = element_rect(color = "black", fill = NA, size = outline_size), 
                legend.key = element_blank())
@

\noindent Define a function to modify the size of ggplots using facet-grids.
<<>>=
adjust_size <- function(g = g, panel_width_cm = 5, panel_height_cm = 5, 
                        savefile = "temp.pdf", width = totwidth, height = totheight,
                        strptext_col = textsize, strptext_row = textsize,
                        strpmargin_col_cm = strmargin, strpmargin_row_cm = strmargin, 
                        flipcord = FALSE){
  
  if(flipcord)
    g <- g + coord_flip()
  
  ## change strsplit sizes
  g <- g + theme(strip.text.x = element_text(size = strptext_col, margin = margin(strpmargin_col_cm,0,strpmargin_col_cm,0, "cm")), 
                 strip.text.y = element_text(size = strptext_row, margin = margin(0,strpmargin_row_cm,0,strpmargin_row_cm, "cm")))
  
  gt <- ggplot_gtable(ggplot_build(g))
  
  ## set panels width
  which <- unique(gt$layout$l[grep("^panel", gt$layout$name)])
  gt$widths[which] <- unit(panel_width_cm, 'cm')

  ## set panels height
  which <- unique(gt$layout$b[grep("^panel", gt$layout$name)])
  gt$heights[which] <- unit(panel_height_cm, 'cm')

  ## save plot
  ggsave(grid.draw(gt), filename = savefile, width = width, height = height, useDingbats = FALSE)
  # return(gt)
}
scientific_label <- function(l) {
     # turn in to character string in scientific notation
     l <- format(l, scientific = TRUE)
     l <- gsub(l, pattern = "\\+", replacement = "")
     # quote the part before the exponent to keep all the digits
     l <- gsub("^(.*)e", "'\\1'e", l)
     # turn the 'e+' into plotmath format
     l <- gsub("e", "%*%10^", l); l <- gsub(l, pattern = "+", replacement = "")
     # return this as an expression
     parse(text=l)
}
@

\clearpage

\section{Data Pre-Processing}

\subsection{Include day as sample variable}
<<>>=
# notAS
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
dge$samples$day <- factor(as.numeric(gsub(dge$samples$time, pattern = "h", replacement = ""))/24)
dge <- dge[!is.na(dge$genes$ensembl),]
dge$samples$id <- dge$samples$sample
save(dge, file = paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))

# AS
for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_Unfiltered_alltimes_", allele, "_XX.RData"))
  dge$samples$day <- factor(as.numeric(gsub(dge$samples$time, pattern = "h", replacement = ""))/24)
  dge <- dge[!is.na(dge$genes$ensembl),]
  dge$samples$id <- dge$samples$sample
  save(dge, file = paste0(AS_path, "DGE_Unfiltered_alltimes_", allele, "_XX.RData"))
}
@

\subsection{Cell filtering: MAD and XO filtering}

\subsubsection{Define functions}
<<>>=
MADoutlier <- function(value, nmads = 3, type, log = FALSE){
    if(log == TRUE){
        value <- log10(value)
    }
    cur.med <- median(value, na.rm = TRUE)
    cur.mad <- mad(value, center = cur.med, na.rm = TRUE)
    upper.limit <- cur.med + nmads * cur.mad
    lower.limit <- cur.med - nmads * cur.mad
    if(type == "lower"){
        outliers <- value < lower.limit
    }
    if(type == "upper"){
        outliers <- value > upper.limit
    }
    if(type == "both"){
        outliers <- value < lower.limit | value > upper.limit
    }
    #res_list <- list(low_outl = table(value < lower.limit), up_outl = table(value > upper.limit))
    return(outliers)
    #return(list(outliers, res_list))
}
MAD_threshold <- thr <- function(value, nmads = 3, type, log = FALSE){
    if(log == TRUE){
        value <- log10(value)
    }
    cur.med <- median(value, na.rm = TRUE)
    cur.mad <- mad(value, center = cur.med, na.rm = TRUE)
    upper.limit <- cur.med + nmads * cur.mad
    lower.limit <- cur.med - nmads * cur.mad
    return(c(upper.limit, lower.limit))
}
@

\subsubsection{Compute cell measures}
<<>>=
# MAD filtering
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
dge$genes$isERCC <- grepl(dge$genes$symbol, pattern = "^ERCC")
dge$genes$isMT <- grepl(dge$genes$symbol, pattern = "^mt")
dge$samples$perc_exprgenes <- colMeans(dge$counts>0)*100
dge$samples$perc_ERCC <- colSums(dge$counts[dge$genes$isERCC,])/colSums(dge$counts)*100
dge$samples$perc_mtDNA <- colSums(dge$counts[dge$genes$isMT,])/colSums(dge$counts)*100
dge$samples$Red <- as.numeric(as.character(dge$samples$Red))

filter_matrix <- ddply(dge$samples, .variables = .(group), transform, 
                       seq_filter = MADoutlier(seqdepth, type = "lower", log = TRUE, nmads = 3),
                       lib_filter = MADoutlier(lib.size, type = "lower", log = TRUE, nmads = 3),
                       expr_filter = MADoutlier(perc_exprgenes, type = "lower", log = TRUE, nmads = 3),
                       ercc_filter = MADoutlier(perc_ERCC, type = "upper", nmads = 3),
                       mtdna_filter = MADoutlier(perc_mtDNA, type = "upper", nmads = 3),
                       red_filter = MADoutlier(Red, type = "upper", nmads = 3)
)
filter_matrix$image_filter <- rowSums(filter_matrix[, c("Empty", "Multiple")]==1)>0
filter_matrix$filtered <- rowSums(filter_matrix[, grepl(x = colnames(filter_matrix), pattern = "filter")]) > 0

dge$samples$MAD_filtering <- dge$samples$id %in% filter_matrix$id[filter_matrix$filtered == TRUE]
dge$samples$Image_filtering <- dge$samples$id %in% filter_matrix$id[filter_matrix$image_filter == TRUE]

table(dge$samples$day, dge$samples$MAD_filtering)
table(dge$samples$Image_filtering, dge$samples$MAD_filtering)


features <- c("id", "day", "seqdepth", "lib.size", "perc_exprgenes", "perc_ERCC", "perc_mtDNA", "Red", 
              "Dead", "Empty", "Multiple", 
              "MAD_filtering", "Image_filtering")
cells <- dge$samples[, features]

# removing XO subpopulation
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6_XX.RData")); b6 <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ_XX.RData")); cast <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_Both_XX.RData")); both <- dge
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData")); notas <- dge
r <- data.frame(id = dge$samples$id,
                Xist_notAS_UMI = notas$counts["Xist",],
                Xist_AS_UMI = both$counts["Xist",],
                b6Xsum = colSums(b6$counts[b6$genes$chromosome %in% "X",]),
                castXsum = colSums(cast$counts[cast$genes$chromosome %in% "X",]),
                bothXsum = colSums(both$counts[both$genes$chromosome %in% "X",]),
                b6Xratio = colSums(b6$counts[b6$genes$chromosome %in% "X",])/colSums(both$counts[both$genes$chromosome %in% "X",])
)
XO_threshold <- 0.8
r$XO_filtering <- ifelse(is.na(r$b6Xratio), NA, 
                         (r$Xist_AS_UMI==0)&(abs(r$b6Xratio-0.5)>abs(XO_threshold-0.5)))
cells <- data.frame(cells,
                    r[match(cells$id, r$id), -1])
cells$filtered <- cells$Image_filtering | cells$MAD_filtering | cells$XO_filtering

table(MAD = cells$MAD_filtering, cells$day); table(XO = cells$XO_filtering, cells$day)
table(MAD_XO_Image = cells$filtered, cells$day)
@

\subsubsection{Filtering}
<<>>=
remove_cells <- cells$id[cells$filtered == TRUE]

load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
dge$samples <- data.frame(dge$samples,
                          X_b6 = cells$b6Xsum,
                          X_cast = cells$castXsum,
                          XCR = cells$b6Xratio)
dge <- dge[, !colnames(dge) %in% remove_cells]
save(dge, file = paste0(notAS_path, "DGE_CellFilteredXO_alltimes.RData"))

for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_Unfiltered_alltimes_", allele, "_XX.RData"))
  dge$samples <- data.frame(dge$samples,
                          X_b6 = cells$b6Xsum,
                          X_cast = cells$castXsum,
                          XCR = cells$b6Xratio)
  dge <- dge[, !colnames(dge) %in% remove_cells]
  save(dge, file = paste0(AS_path, "DGE_CellFilteredXO_alltimes_", allele, ".RData"))
}
@

\subsection{Gene filtering: detection rate and misleading genes}

\subsubsection{Compute gene measures}
<<>>=
# load data
load(paste0(notAS_path, "DGE_CellFilteredXO_alltimes.RData")); notas <- dge
load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_Both.RData")); as <- dge

# detection rate < 0.2
notas$genes$DetectionRate <- rowMeans(notas$counts>0)
notas$genes$DetectionRate_filtering <- notas$genes$DetectionRate <= 0.2; table(notas$genes$DetectionRate_filtering)
as$genes$DetectionRate <- rowMeans(as$counts>0)
as$genes$DetectionRate_filtering <- as$genes$DetectionRate <= 0.2; table(as$genes$DetectionRate_filtering)

# misleading SNP annotation
# identify genes to be removed from analysis
load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_BL6.RData")); b6 <- dge
load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_CastEiJ.RData")); cast <- dge
r <- data.frame(chr = b6$genes$chromosome, 
                symbol = dge$genes$symbol, 
                both_detrate = rowMeans(as$counts>0),
                both_detrate_filtering = rowMeans(as$counts>0) <= 0.2,
                both_AScount = rowSums(b6$counts+cast$counts), 
                b6_AScount = rowSums(b6$counts),
                B6Total_ASratio = rowSums(b6$counts)/rowSums(b6$counts+cast$counts))
r$misleadingSNP_filtering <- abs(r$B6Total_ASratio - 0.5) > 0.4; table(r$misleadingSNP_filtering)

notas$genes <- data.frame(notas$genes, r[match(notas$genes$symbol, r$symbol), -c(1,2)])
notas$genes$filtered <- notas$genes$DetectionRate_filtering | (notas$genes$misleadingSNP_filtering & !notas$genes$both_detrate_filtering & !is.na(notas$genes$both_detrate_filtering))
as$genes <- data.frame(as$genes, r[match(as$genes$symbol, r$symbol), -c(1,2)])
as$genes$filtered <- as$genes$DetectionRate_filtering | as$genes$misleadingSNP_filtering

# store results
features <- c("chromosome", "strand", "ensembl", "symbol", 
              "DetectionRate", "DetectionRate_filtering",
              "both_AScount", "b6_AScount", "B6Total_ASratio", "both_detrate_filtering", "misleadingSNP_filtering",
              "filtered")
genes_notas <- notas$genes[, match(features, colnames(notas$genes))]
table(detrate_misleading = genes_notas$filtered, detrate = genes_notas$DetectionRate_filtering)
genes_as <- as$genes[, match(features, colnames(as$genes))]
table(detrate_misleading = genes_as$filtered, detrate = genes_as$DetectionRate_filtering)
@

\subsubsection{Filtering}
<<>>=
remove_genes_notas <- genes_notas$symbol[genes_notas$filtered]
remove_genes_as <- genes_as$symbol[genes_as$filtered]

load(paste0(notAS_path, "DGE_CellFilteredXO_alltimes.RData"))
dge <- dge[!dge$genes$symbol %in% remove_genes_notas,]
save(dge, file = paste0(notAS_path, "DGE_Filtered_alltimes.RData"))

for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_", allele, ".RData"))
  dge <- dge[!dge$genes$symbol %in% remove_genes_as,]
  save(dge, file = paste0(AS_path, "DGE_Filtered_alltimes_", allele, ".RData"))
}
@


\subsection{Gene count normalization}

\noindent Compute scaling factors for each XX cell, separately applying the pooling-clustering method to cells sequenced at different days (day 0-5, upon differentiation).
<<>>=
# compute scaling factors based on autosomal genes, clustering by sequencing day
load(paste0(notAS_path, "DGE_Filtered_alltimes.RData"))
input <- dge$counts[dge$genes$chromosome %in% c(1:19),]
emp.clusters <- as.numeric(as.factor(strsplit2(colnames(input), split = "\\_")[, 1]))
sizefact <- scran::computeSumFactors(x = input, clusters = emp.clusters)
sf <- data.frame(time = dge$samples$time, group = dge$samples$group, sf = sizefact)
save(sf, file = paste0(notAS_path, "PoolClust_autosomal.RData"))
sf %>% ggplot() + geom_boxplot(aes(x = time, y = sf, fill = group))

# store scaling factors in notAS and AS sets
load(paste0(notAS_path, "DGE_Filtered_alltimes.RData"))
dge$samples$sf_notX <- sf$sf
dge$samples$eff_libsize_notX <- colSums(dge$counts)*dge$samples$sf_notX
save(dge, file = paste0(notAS_path, "DGE_FiltNorm_alltimes.RData"))

for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_Filtered_alltimes_", allele, ".RData"))
  dge$samples$sf_notX <- sf$sf
  dge$samples$eff_libsize_notX <- colSums(dge$counts)*dge$samples$sf_notX
  save(dge, file = paste0(AS_path, "DGE_FiltNorm_alltimes_", allele, ".RData"))
}
@


\subsection{Cell classification}

\subsubsection{Xist kmeans}
<<>>=
# load features
load(paste0(notAS_path, "DGE_FiltNorm_alltimes.RData"))
xist_umi <- dge$counts["Xist",]
xist_cpm <- dge$counts["Xist",]/(colSums(dge$counts)*dge$samples$sf_notX)*1e6

load(paste0(AS_path, "DGE_FiltNorm_alltimes_Both.RData")); both <- dge
load(paste0(AS_path, "DGE_FiltNorm_alltimes_BL6.RData")); b6 <- dge
load(paste0(AS_path, "DGE_FiltNorm_alltimes_CastEiJ.RData")); cast <- dge
xist_both <- both$counts["Xist",]
xist_ratio <- b6$counts["Xist",]/xist_both
xchr_ratio <- colSums(b6$counts[b6$genes$chromosome %in% "X",])/colSums(both$counts[both$genes$chromosome %in% "X",])

x <- data.frame(time = dge$samples$time, group = dge$samples$group, 
                Xist_UMI = xist_umi,
                Xist = xist_cpm, Xist_both = xist_both,
                X_b6 = colSums(b6$counts[b6$genes$chromosome %in% "X",]),
                X_cast = colSums(cast$counts[cast$genes$chromosome %in% "X",]),
                Xist_ratio = xist_ratio, Xchr_ratio = xchr_ratio)

df_xx <- x[x$group == "XX", ]

k.max <- 15
data <- log1p(df_xx$Xist)
wss <- sapply(1:k.max, 
              function(k){kmeans(data, k, nstart=1e3, iter.max = 1e3)$tot.withinss})
plot(1:k.max, wss,
     type="b", pch = 19, frame = FALSE,
     xlab="Number of clusters K",
     ylab="Total within-clusters sum of squares")

k <- 7
Xist_kmeans_class <- kmeans(log1p(df_xx$Xist), centers = k, iter.max = 1000, nstart = 1000)
df_xx$Xist_kmeans_class <- Xist_kmeans_class$cluster

# order clusters by Xist expression
subs <- ddply(df_xx, .variables = .(Xist_kmeans_class), summarize, median_Xist = median(Xist))
subs <- subs[order(subs$median_Xist, decreasing = FALSE), ]
subs$ordered <- seq_len(nrow(subs))
newvalue <- subs$ordered
names(newvalue) <- subs$Xist_kmeans_class
df_xx$Xist_kmeans_class <- revalue(as.character(df_xx$Xist_kmeans_class), newvalue); table(df_xx$time, df_xx$Xist_kmeans_class)
@

\subsubsection{Xist and Xchr AS expression}
<<>>=
df_xx$Xist_sign <- ifelse(df_xx$Xist_UMI == 0, "Undetected", 
                          ifelse(df_xx$Xist_UMI <= 5, "Detected (Xist UMI <= 5)",  "Detected (Xist UMI > 5)"))

# Xist classification
detection_Xist <- 0
detection_lowXist <- 5
thresholds <- c(0, 0.2)
df_xx$Xist_ratio_class <- ifelse(df_xx$Xist_ratio <= thresholds[1], "Cast_MA", 
                                 ifelse(df_xx$Xist_ratio >= (1 - thresholds[1]), "BL6_MA", 
                                        ifelse((df_xx$Xist_ratio >= sum(thresholds)) & (df_xx$Xist_ratio <= (1 - sum(thresholds))), 
                                               "Xist_BA", "Middle")))
df_xx$Xist_ratio_class[df_xx$Xist_both <= detection_lowXist] <- "Low-Xist"
df_xx$Xist_ratio_class[df_xx$Xist <= detection_Xist] <- "Undetected"
table(df_xx$time, df_xx$Xist_ratio_class)


# XCI classification
thresholds <- c(0.2, 0.1)
df_xx$Xchr_ratio_class <- ifelse(df_xx$Xchr_ratio <= thresholds[1], "Cast_XCI", 
                                 ifelse(df_xx$Xchr_ratio >= (1 - thresholds[1]), "BL6_XCI", 
                                        ifelse((df_xx$Xchr_ratio >= sum(thresholds)) & (df_xx$Xchr_ratio <= (1 - sum(thresholds))), 
                                               "Not_XCI", "Middle")))
df_xx$Xist_Xchr_class <- paste0(df_xx$Xist_ratio_class, "_", df_xx$Xchr_ratio_class)

# table
table(df_xx$time, df_xx$Xist_ratio_class, df_xx$Xchr_ratio_class)
@

\subsubsection{Store classification into DGE list}
<<>>=
# store k-means groups
load(paste0(notAS_path, "DGE_FiltNorm_alltimes.RData"))
dge$samples$Xist_kmeans_class <- dge$samples$Xist_ratio_class <- dge$samples$Xchr_ratio_class <- NA
dge$samples$Xist_sign <- dge$samples$Xist_ratio <- dge$samples$Xchr_ratio<- "XO"
m <- match(rownames(df_xx), rownames(dge$samples))
dge$samples$Xist_ratio[m] <- df_xx$Xist_ratio
dge$samples$Xchr_ratio[m] <- df_xx$Xchr_ratio
dge$samples$Xist_sign[m] <- df_xx$Xist_sign
dge$samples$Xist_kmeans_class[m] <- df_xx$Xist_kmeans_class
dge$samples$Xist_ratio_class[m] <- df_xx$Xist_ratio_class
dge$samples$Xchr_ratio_class[m] <- df_xx$Xchr_ratio_class
save(dge, file = paste0(notAS_path, "DGE_complete_alltimes.RData"))

for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_FiltNorm_alltimes_", allele, ".RData"))
  dge$samples$Xist_kmeans_class <- dge$samples$Xist_ratio_class <- dge$samples$Xchr_ratio_class <- NA
  dge$samples$Xist_sign <- dge$samples$Xist_ratio <- dge$samples$Xchr_ratio<- "XO"
  m <- match(rownames(df_xx), rownames(dge$samples))
  dge$samples$Xist_ratio[m] <- df_xx$Xist_ratio
  dge$samples$Xchr_ratio[m] <- df_xx$Xchr_ratio
  dge$samples$Xist_sign[m] <- df_xx$Xist_sign
  dge$samples$Xist_kmeans_class[m] <- df_xx$Xist_kmeans_class
  dge$samples$Xist_ratio_class[m] <- df_xx$Xist_ratio_class
  dge$samples$Xchr_ratio_class[m] <- df_xx$Xchr_ratio_class
  save(dge, file = paste0(AS_path, "DGE_complete_alltimes_", allele, ".RData"))
}
@

\subsubsection{Store alignment stats into DGE list}
<<>>=
# notAS - totUMI
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
dge <- dge[, dge$samples$group == "XX"]
x <- data.frame(sample = colnames(dge), 
                seqdepth = dge$samples$seqdepth, 
                notAS_UMI = colSums(dge$counts))

# AS - totUMI
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6_XX.RData"))
dge <- dge[, dge$samples$group == "XX"]
b6 <- colSums(dge$counts); x$b6 <- b6[match(x$sample, names(b6))]
uniquealigned <- dge$samples$uniquealigned; x$uniquealigned <- uniquealigned[match(x$sample, names(b6))]
load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ_XX.RData"))
cast <- colSums(dge$counts); x$cast <- cast[match(x$sample, names(cast))]

# store results in notAS object
x <- x[, c("sample", "seqdepth", "uniquealigned", "notAS_UMI", "b6", "cast")]
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
m <- match(colnames(dge), x$sample)
features <- colnames(x)
dge$samples <- dge$samples[, !colnames(dge$samples) %in% c(features, "uniquelyaligned")]
dge$samples <- data.frame(dge$samples, x[m, features])
save(dge, file = paste0(notAS_path, "DGE_complete_alltimes.RData"))

# store results in AS objects
for(allele in c("BL6", "CastEiJ", "Both")){
  load(paste0(AS_path, "DGE_complete_alltimes_", allele, ".RData"))
  m <- match(colnames(dge), x$sample)
  features <- colnames(x)
  dge$samples <- dge$samples[, !colnames(dge$samples) %in% c(features, "uniquelyaligned")]
  dge$samples <- data.frame(dge$samples, x[m, features])
  save(dge, file = paste0(AS_path, "DGE_complete_alltimes_", allele, ".RData"))
}
@

\subsubsection{Define unspliced and spliced notAS matrices}
<<>>=
# load spliced and unspliced DGE lists
load(paste0(unspliced_path, "DGE_Unfiltered_alltimes_exonic_XX.RData")); spliced <- dge
save(dge, file = paste0(notAS_path, "DGE_spliced_alltimes_unfiltered.RData"))

load(paste0(unspliced_path, "DGE_Unfiltered_alltimes_intronic_XX.RData")); unspliced <- dge
save(dge, file = paste0(notAS_path, "DGE_unspliced_alltimes_unfiltered.RData"))

# include notAS scaling factors
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
spliced <- spliced[, match(colnames(dge), colnames(spliced))]
unspliced <- unspliced[, match(colnames(dge), colnames(unspliced))]

# cell features
features <- c("time", "day", "column", "row", "sf_notX", "eff_libsize_notX", 
              "Xist_ratio", "Xist_ratio_class", "Xchr_ratio", "Xchr_ratio_class", 
              "Xist_kmeans_class", "Xist_sign")
cellfeatures <- dge$samples[, features]
spliced$samples <- unspliced$samples <- cellfeatures

# gene features
features <- c("chromosome", "strand", "symbol", "updated", "ensembl")
spliced$genes <- spliced$genes[, features]
unspliced$genes <- unspliced$genes[, features]

# save as DGE lists
dge <- DGEList(counts = spliced$counts, 
               samples = spliced$samples, 
               genes = spliced$genes)
save(dge, file = paste0(notAS_path, "DGE_spliced_alltimes.RData"))

dge <- DGEList(counts = unspliced$counts, 
               samples = unspliced$samples, 
               genes = unspliced$genes)
save(dge, file = paste0(notAS_path, "DGE_unspliced_alltimes.RData"))
@

\subsubsection{Define unspliced and spliced AS matrices}
<<>>=
# load spliced AS counts
allele <- c("BL6", "CastEiJ", "Both")
spliced <- unspliced <- list()

for(j in 1:length(allele)){
  al <- allele[j]
  
  features <- c("chromosome", "strand", "symbol", "updated", "ensembl")
  
  # spliced
  load(paste0(unspliced_path, "DGE_Unfiltered_alltimes_", al, "_exonic_XX.RData"))
  dge$genes <- dge$genes[, features]
  save(dge, file = paste0(AS_path, "DGE_spliced_alltimes_", al, "_unfiltered.RData"))
  spliced[[j]] <- dge; print(dim(dge))
  
  # unspliced
  load(paste0(unspliced_path, "DGE_Unfiltered_alltimes_", al, "_intronic_XX.RData"))
  dge$genes <- dge$genes[, features]
  save(dge, file = paste0(AS_path, "DGE_unspliced_alltimes_", al, "_unfiltered.RData"))
  unspliced[[j]] <- dge; print(dim(dge))
}

# include notAS scaling factors
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
spliced_filt <- lapply(spliced, FUN = function(x) x[, match(colnames(dge), colnames(x))])
unspliced_filt <- lapply(unspliced, FUN = function(x) x[, match(colnames(dge), colnames(x))])

features <- c("time", "day", "column", "row", "sf_notX", "eff_libsize_notX", 
              "Xist_ratio", "Xist_ratio_class", "Xchr_ratio", "Xchr_ratio_class", 
              "Xist_kmeans_class", "Xist_sign")
cellfeatures <- dge$samples[, features]

# save as DGE lists
for(j in 1:length(allele)){
  
  al <- allele[j]
  
  # subset to AS counts post filtering
  load(paste0(AS_path, "DGE_complete_alltimes_Both.RData")); bothas <- dge; keep_ensembl <- unique(bothas$genes$ensembl)
  
  dge <- DGEList(counts = spliced_filt[[j]]$counts, samples = cellfeatures, genes = spliced_filt[[j]]$genes)
  # m <- match(keep_ensembl, dge$genes$ensembl); table(is.na(m)); m <- m[!is.na(m)]; dge <- dge[m,]
  save(dge, file = paste0(AS_path, "DGE_spliced_alltimes_", al, ".RData"))
  
  dge <- DGEList(counts = unspliced_filt[[j]]$counts, samples = cellfeatures, genes = unspliced_filt[[j]]$genes)
  # m <- match(keep_ensembl, dge$genes$ensembl); table(is.na(m)); m <- m[!is.na(m)]; dge <- dge[m,]
  save(dge, file = paste0(AS_path, "DGE_unspliced_alltimes_", al, ".RData"))
}
@


\clearpage


\section{Figure 1: Not allele specific analysis}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig1_NotAS/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{B) pseudotime plot}

\subsubsection{Compute pseudotime for XX cells}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
dge$genes$gene_short_name <- dge$genes$symbol

# process and identify top 100 MVGs
pd <- new("AnnotatedDataFrame", data = dge$samples)
fd <- new("AnnotatedDataFrame", data = dge$genes)
XX <- newCellDataSet(as(dge$counts, "sparseMatrix"),
                       phenoData = pd,
                       featureData = fd,
                       lowerDetectionLimit=1,
                       expressionFamily=negbinomial.size())
XX <- estimateSizeFactors(XX)
XX <- estimateDispersions(XX)

# identify DE genes over hours --> select top 100 DE genes
pData(XX)$hour <- as.integer(gsub(pData(XX)$time, pattern = "h", replacement = ""))
pData(XX)$Entropy <- esApply(XX, 2, function(x){
  x <- round(x / Size_Factor)
  x <- x/sum(x)
  y <- x * log(x)
  y[is.finite(y) == FALSE] <- 0
  H = - sum(y)
  })
qplot(Entropy, data=pData(XX), geom="density") + facet_wrap(~hour, ncol=1)

de <- differentialGeneTest(XX, fullModelFormulaStr="~hour", cores=detectCores())
top_pdt_genes <- 500
de_genes <- de[de$qval < 1e-2,]
de_genes <- de_genes[order(de_genes$qval, decreasing = FALSE),]
order_genes <- rownames(de_genes[order(de_genes$qval, decreasing = FALSE),])[seq_len(top_pdt_genes)]
XX <- setOrderingFilter(XX, order_genes) # mark genes to use ub subsequent calls of clusterCells

# reduce dimensions and compute pseudotime for XX cells
XX <- reduceDimension(XX, method = 'DDRTree')
XX <- orderCells(XX)

# "State" identifies the segment of the tree. Here we choose as the start that segment with the maximum number of 0h cells
GM_state <- function(cds){
  if (length(unique(pData(cds)$State)) > 1){
    T0_counts <- table(pData(cds)$State, pData(cds)$hour)[,"0"]
    return(as.numeric(names(T0_counts)[which(T0_counts == max(T0_counts))]))
  } else {
    return (1)
  }
}
XX <- orderCells(XX, root_state = GM_state(XX))

# compute scaled PDT
pData(XX)$Scaled_PDT <- pData(XX)$Pseudotime/max(pData(XX)$Pseudotime)*100
@

\subsubsection{Plot}
<<>>=
g1 <- plot_cell_trajectory(XX, color_by = "day", 
                           cell_size = scattersize, cell_link_size = linesize, 
                           show_branch_points = FALSE) + theme1 +
  scale_color_manual(values = time_colors) + 
  ggtitle(paste0("XX Pseudotime\nDDRTree: ", top_pdt_genes, " MVGs (FDR<0.01) across time")) +
  labs(color = "Time [days]")
adjust_size(g = g1, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "B_pdtXX_time.pdf"))

g2 <- plot_cell_trajectory(XX, color_by = "Scaled_PDT", 
                           cell_size = scattersize, cell_link_size = linesize, 
                           show_branch_points = FALSE) + theme1 +
  scale_color_gradient2(low = "black", mid = "black", high = "gold") + 
  guides(color = guide_colourbar(barwidth = 4, barheight = 0.7)) +
  ggtitle(paste0("XX Pseudotime\nDDRTree: ", top_pdt_genes, " MVGs (FDR<0.01) across time"))
adjust_size(g = g2, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "B_pdtXX_pdt.pdf"))

g <- arrangeGrob(g1, g2, nrow = 1)
ggsave(plot = g, filename = paste0(figpath, "B_pdtXX.pdf"), width = 3.5, height = 2.5) 
@

\subsection{C, D) umap velocity and markers}

\subsubsection{compute UMAP clustering for XX cells}
<<>>=
### load data
markergenes <- c("Xist", "Dnmt3a", "Nanog", "Esrrb")
load(paste0(notAS_path, "DGE_spliced_alltimes.RData")); spliced <- dge
load(paste0(notAS_path, "DGE_unspliced_alltimes.RData")); unspliced <- dge

# include marker genes
markergenes <- c("Xist", "Dnmt3a", "Nanog", "Esrrb")
x <- log10(t(t(spliced$counts)/spliced$samples$sf_notX)+1)
cellfeatures <- spliced$samples
cellfeatures <- data.frame(cellfeatures, t(x[markergenes,]))

# filter out lowly expressed genes
rm_s <- rowMeans(spliced$counts); rm_u <- rowMeans(unspliced$counts)
summary(rm_s); summary(rm_u); plot(log10(rm_s), log10(rm_u))
keep <- (rm_s >= 1)&(rm_u >= 0.5); table(keep)
emat <- spliced_filt <- spliced$counts[keep,]; nmat <- unspliced_filt <- unspliced$counts[keep,]
dge <- spliced[keep,]; save(dge, file = paste0(notAS_path, "DGE_spliced_alltimes_filternotASVelocity.RData"))
dge <- unspliced[keep,]; save(dge, file = paste0(notAS_path, "DGE_unspliced_alltimes_filternotASVelocity.RData"))

### compute embedding on UMAP
fit.quantile <- 0.025; kcells <- 20; mincor <- 0.05
arrow.scale=5; cell.alpha=0.4; cell.cex=1; fig.height=4; fig.width=4.5;
notAS_vel <- gene.relative.velocity.estimates(emat, nmat, deltaT=1, kCells = kcells, 
                                              fit.quantile = fit.quantile, 
                                              min.nmat.emat.slope = mincor,
                                              min.nmat.emat.correlation = mincor, 
                                              n.cores = 10)
save(notAS_vel, file = paste0(figpath, "notAS_vel.RData"))

pcount <- 1; umap_nPcs <- 50; umap_nn <- neighbor_size <- 100
quantile <- 0.025; min.correlation <- min.slope <- 0.05; 
grid_size <- 30; arrow.pca <- 2.5; arrow <- 2.5; arrow.lwd <- 1; grid.mass <- 5
gapT <- 1; k_range <- 30; controlby <- "time"; cor_dist_measure <- "cor"; velocity_scale <- "sqrt"
mult <- 1e3; pcount <- 1; umap_nPcs <- 50; umap_nn <- 20; mvg <- 500

# x0 <- spliced$counts
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
x0 <- dge$counts
els <- cellfeatures$sf_notX*colSums(x0)
x0.log <- log10(t(t(x0)/els)*1e6+1)
markers <- c("Xist", "Nanog", "Dnmt3a", "Esrrb", "Tsix", "Pou5f1")
expr_markers <- x0.log[match(markers, rownames(x0.log)), ]

# select most variable genes -> compute UMAP embedding
rv <- rowVars(x0.log)
o <- order(rv, decreasing = TRUE)
feature_set <- head(o, mvg)
x0.log.mvg <- x0.log[feature_set,]
cent <- rowMeans(x0.log.mvg)
epc <- pcaMethods::pca(t(x0.log.mvg - cent), center = F, nPcs = umap_nPcs)
custom.config = umap.defaults; custom.config$n_neighbors <- umap_nn
umap_both <- umap(epc@scores, custom.config)
emb_umap <- umap_both$layout; features <- c("Time", "Xchr_ratio", "Xist_ratio_class", "Xchr_ratio_class")
rownames(emb_umap) <- gsub(rownames(emb_umap), pattern = "hrs", replacement = "h")
sinfo <- cellfeatures[match(rownames(emb_umap), cellfeatures$id), features]
sinfo$Xchr_ratio <- as.numeric(sinfo$Xchr_ratio)
umap_ext <- data.frame(umap1 = emb_umap[,1], umap2 = emb_umap[,2], 
                       sinfo, t(expr_markers))
@

\subsubsection{Plot}
<<>>=
# project predictions
emb <- cbind(umap_ext[,1], umap_ext[,2]); rownames(emb) <- rownames(umap_ext)
m <- match(rownames(emb), cellfeatures$id)
cellfeatures$Xchr_ratio <- as.numeric(cellfeatures$Xchr_ratio)
cellfeatures$AXCR <- abs(cellfeatures$Xchr_ratio-0.5)
colors <- data.frame(sinfo, t(expr_markers))
colors$AXCR <- abs(colors$Xchr_ratio - 0.5)

plot_features <- c("Time", "AXCR", markergenes); plot_list <- list()
x <- show.velocity.on.embedding.cor(emb, vel = notAS_vel, n=neighbor_size, scale=velocity_scale, 
                                    cex=1.5, arrow.scale=10, show.grid.flow=TRUE, 
                                    min.grid.cell.mass=5, grid.n=20,
                                    arrow.lwd=arrow.lwd, do.par=F, cell.border.alpha = 0.5,
                                    return.details = TRUE)

# make the arrow width proportional to the velocity extent
arrowthick <- 3e-1; arrowidth <- 5*1e-2; arrowsharp <- 40
temp <- data.frame(emb, colors, Xist_count = spliced$counts["Xist",]); gridvelo <- x$garrows
x$garrows <- data.frame(x$garrows)
x$garrows$dist <- sqrt((x$garrows$x0 - x$garrows$x1)^2 + (x$garrows$y0 - x$garrows$y1)^2)
x$garrows$arrowidth <- arrowidth*(x$garrows$dist/max(x$garrows$dist))

# include day variable
temp$day <- factor(as.numeric(gsub(temp$Time, pattern = "hrs", replacement = ""))/24)

# flip x and y axes
g <- temp %>%
      ggplot() + 
      theme_bw() + theme1 +
      geom_point(aes(x = X1, y = X2, color = day), size = outliersize, shape = 20, alpha = 3/4) + 
      xlab("UMAP 1") + ylab("UMAP 2") + labs(color = "Time [days]") +
      geom_segment(data = data.frame(x$garrows), 
                   aes(x = x0, y = y0, xend = x1, yend = y1),
                   size = arrowthick, alpha = 3/5,
                   arrow = arrow(length = unit(x$garrows$arrowidth, "inches"), angle = arrowsharp)) +
      scale_color_manual(values = time_colors) +
      guides(color = guide_legend(override.aes = list(size=2)))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "C_UMAP_time.pdf"))

# extract colors
p <- ggplot_build(g)
cols <- unique(p$data[[1]][["colour"]])

# define plot for all other marker genes
markers <- rev(c("Xist", "Dnmt3a", "Esrrb", "Nanog"))
umap_markers <- reshape2::melt(data = temp, id.vars = c("X1", "X2"), 
                               measure.vars = markers)

g <- umap_markers %>%
  ggplot() + 
  facet_wrap(.~variable) +
  theme_bw() + theme1 +
  geom_point(aes(x = X1, y = X2, color = value), size = outliersize, shape = 20) + 
  scale_colour_gradientn(colours = c("black", "gold")) + 
  labs(x="", y = "", color = expression(log[10]*"(CPM + 1) values")) + 
  xlab("") + ylab("") + 
  guides(color = guide_colourbar(barwidth = 4, barheight = 0.7)) + 
  theme(legend.position = "top")
adjust_size(g = g, panel_width_cm = 2.5, panel_height_cm = 2.5, savefile = paste0(figpath, "D_UMAP_markers.pdf"))
@

\subsection{E) Xist distribution: not-norm UMIs and CPM}

\subsubsection{Load data}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
dge$samples$xist <- dge$counts["Xist",]
dge$samples$xist_cpm <- dge$counts["Xist",]/(dge$samples$sf_notX*colSums(dge$counts))*1e6
df <- dge$samples[, c("time", "group", "sample", "xist", "xist_cpm")]
df <- df[df$group == "XX",]

# compute percentage of Xist_UMI<=5 cells per time point
nXistUnd <- ddply(df, .variables = .(time), summarize, 
                  n = mean(xist <= 5))
nXistUnd$label <- paste0(round((1-nXistUnd$n)*100, digits = 0), "%")
nXistUnd$time <- factor(nXistUnd$time, levels = paste0(rev(seq(0, 96, by = 24)), "h"))

# melt
df_melt <- reshape2::melt(df, id.vars = c("time", "sample"), measure.vars = c("xist", "xist_cpm"))
df_melt$variable <- revalue(df_melt$variable, replace = c("xist" = "Xist UMI", "xist_cpm" = "Xist CPM"))
df_melt$time <- factor(df_melt$time, levels = paste0(rev(seq(0, 96, by = 24)), "h"))
@

\subsubsection{Plot}
<<>>=
nXistUnd$day <- factor(as.numeric(gsub(nXistUnd$time, pattern = "h", replacement = ""))/24)
nXistUnd$day <- factor(nXistUnd$day , levels = rev(levels(nXistUnd$day)))
g <- nXistUnd %>%
  ggplot(aes(x = day, y = (1-n)*100)) + 
  theme_bw() + theme1 + 
  ylab(expression('Xist' ^ '+'*' cells [%]')) + xlab("Time [days]") +
  geom_bar(stat = "identity", width = .5) +
  geom_text(aes(label=label),position="stack", hjust = -0.2, color = "black", size = geomtext_size)+
  coord_flip() + 
  scale_y_continuous(limits = c(0, 130), breaks = seq(0,100,50))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 3, savefile = paste0(figpath, "E_XistPlus_barplot.pdf"))

# xist UMI and CPM
df_melt$day <- factor(as.numeric(gsub(df_melt$time, pattern = "h", replacement = ""))/24)
df_melt$day <- factor(df_melt$day , levels = rev(levels(df_melt$day)))
g <- df_melt %>% 
  ggplot(aes(x = day, y = log10(value+1))) + 
  theme_bw() + theme1 + 
  geom_violin(adjust = 1, size = violin_box_size, scale = "width") +
  geom_jitter(alpha = 0.2, width = .15, size = outliersize, shape = 21) + 
  facet_grid(.~variable, scales = "free_x") +
  labs(x="Time [days]", y = expression("Xist ["*log[10]*"(value + 1)]")) + 
  coord_flip()
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 3, savefile = paste0(figpath, "E_XistExpression_violin.pdf"))
@

\subsection{F) X:A ratio in Xist+ and Xist- cells; boxplot}

\subsubsection{Compute bootstrapped X:A ratios - undetected, detected<=5, detected>5}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData")); nboot <- 1e3
xcounts <- dge$counts[dge$genes$chromosome %in% "X",]; autcounts <- dge$counts[dge$genes$chromosome %in% c(1:19),]
n_xlinked <- nrow(xcounts); n_autlinked <- nrow(autcounts)

temp_boot <- c()
for (j in seq_len(nboot)) {
  boot <- sample(x = seq_len(n_autlinked), size = n_xlinked, replace = TRUE)
  value <- colSums(xcounts)/colSums(autcounts[boot,])
  temp_boot <- rbind(temp_boot, value)
}
x2a_boot <- apply(temp_boot, 2, median)
x2a <- data.frame(Time = dge$samples$time, id = colnames(dge), Xist_UMI = dge$counts["Xist",],
                  xist_detection = dge$samples$Xist_sign, x2a = x2a_boot)

x2a$xist_detection <- revalue(factor(x2a$xist_detection), 
                              replace = c("Detected (Xist UMI > 5)" = "Xist+ cells",
                                          "Detected (Xist UMI <= 5)" = "Xist+ cells [UMI<=5]",
                                          "Undetected" = "Xist- cells"))
x2a$xist_detection <- factor(x2a$xist_detection, levels = c("Xist- cells", 
                                                            "Xist+ cells [UMI<=5]",
                                                            "Xist+ cells"))
table(x2a$xist_detection, x2a$Time)
summ_cell <- ddply(x2a, .variables = .(Time, xist_detection), summarize, n = length(Time))

features <- c("id", "Time", "xist_detection", "x2a")
total <- rbind(data.frame(x2a[, features], Genes = "Per time & Bootstrap"))

colors <- c("black", "#e7298a")
total$Xist <- total$xist_detection
summ_cell$Xist <- summ_cell$xist_detection


# plot
total$day <- factor(as.numeric(gsub(total$Time, pattern = "h", replacement = ""))/24)
summ_cell$day <- factor(as.numeric(gsub(summ_cell$Time, pattern = "h", replacement = ""))/24)

g <- total[!total$Xist %in% "Xist+ cells [UMI<=5]",] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = seq(0.5, 2, by = 0.5), linetype = "dashed", alpha = hvalpha, size = linesize) + 
  scale_y_continuous(breaks = seq(0.5, 2, by = 0.5), limits = c(0.25, 2.2)) + 
  geom_boxplot(aes(x = day, y = x2a, color = Xist), outlier.shape = NA, size = violin_box_size) + 
  geom_jitter(aes(x = day, y = x2a, color = Xist), fill = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .25, dodge.width = 0.75), 
              size = outliersize, show.legend = FALSE) +
  scale_color_manual(values = colors) + 
  geom_text(summ_cell[!summ_cell$Xist %in% "Xist+ cells [UMI<=5]",],
            mapping = aes(x = day, y = Inf, label = paste0("n = ", n), fill = Xist),
            position=position_dodge(.75), angle = 90, alpha = 1, size = geomtext_size, hjust = -0.5) +
  coord_cartesian(clip = "off") +
  labs(x = "Time [days]", y = "X:A ratio", fill = "")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "F_X2A.pdf"))

# wilcoxon test
# compare d4_Xist+ cells with d0 ones

# Xist positive vs negative
wilcox.test(x = total$x2a[(total$Time == "0h")],
            y = total$x2a[(total$Time == "96h")&(total$xist_detection == "Xist+ cells")])

wilcox.test(x = total$x2a[(total$Time == "0h")],
            y = total$x2a[(total$Time == "96h")&(total$xist_detection == "Xist- cells")])
@

\subsection{Additional measures}

\subsubsection{Pre-filtering}
<<>>=
load(paste0(notAS_path, "DGE_Unfiltered_alltimes.RData"))
x <- dge[, dge$samples$group == "XX"]

# number of cells per time point
table(x$samples$group, x$samples$time)

# median number of UMI per cell (across all times)
median(colSums(x$counts))

# median number of detected genes per cell (Xlinked)
median(colSums(x$counts>0))
median(colSums(x$counts[x$genes$chromosome %in% "X",]>0))
@

\subsubsection{Post cell-filtering}
<<>>=
# number of cells retained post cell-filtering - no XO filtering
load(paste0(notAS_path, "DGE_CellFiltered_alltimes.RData"))
x <- dge[, dge$samples$group == "XX"]
table(x$samples$group, x$samples$time)

# number of cells retained post cell-filtering - no XO filtering
load(paste0(notAS_path, "DGE_CellFilteredXO_alltimes.RData"))
x <- dge[, dge$samples$group == "XX"]
table(x$samples$group, x$samples$time)
@

\subsubsection{Median X:A values per day in Xist+ and Xist- cells}
<<>>=
x2a %>% dplyr::group_by(Time, xist_detection) %>% dplyr::summarise(med = median(x2a)) %>% dplyr::arrange(xist_detection)
@

\subsubsection{Number of states and time point per state - Monocle DDRTree}
<<>>=
table(States = pData(XX)$State, Day = pData(XX)$day)
@


\clearpage


\section{Figure 2: Not allele specific analysis}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig2_ASXistAnalysis/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{B) xist B6 vs Cast scatter plots}

\subsubsection{Load data - define res object}
<<>>=
load(paste0(AS_path, "DGE_complete_alltimes_BL6.RData")); b6 <- dge[, dge$samples$group %in% "XX"]
load(paste0(AS_path, "DGE_complete_alltimes_CastEiJ.RData")); cast <- dge[, dge$samples$group %in% "XX"]

dge <- b6
res <- data.frame(Time = dge$samples$time, day = dge$samples$day,
                  sf = dge$samples$sf_notX, els = dge$samples$eff_libsize_notX,
                  Xist_cast = cast$counts["Xist",], Xist_b6 = b6$counts["Xist",], 
                  Xist_ratio = as.numeric(dge$samples$Xist_ratio), Xist_classification = dge$samples$Xist_ratio_class,
                  XCI_ratio = as.numeric(dge$samples$Xchr_ratio), XCI_ratio_classification = dge$samples$Xchr_ratio_class,
                  XistSign = dge$samples$Xist_sign,
                  b6_X = colSums(b6$counts[b6$genes$chromosome %in% "X",]),
                  cast_X = colSums(cast$counts[cast$genes$chromosome %in% "X",]),
                  b6_X_noXist = colSums(b6$counts[(b6$genes$chromosome %in% "X")&(!b6$genes$symbol %in% "Xist"),]),
                  cast_X_noXist = colSums(cast$counts[(cast$genes$chromosome %in% "X")&(!cast$genes$symbol %in% "Xist"),]))
res$Xist_cast_cpm <- (res$Xist_cast/res$els)*1e6; res$Xist_cast_norm <- (res$Xist_cast/res$sf)
res$Xist_b6_cpm <- (res$Xist_b6/res$els)*1e6; res$Xist_b6_norm <- (res$Xist_b6/res$sf)
res$Xist <- revalue(res$XistSign, replace = c("Detected (Xist UMI > 5)" = "Xist+ cells [UMI>5]",
                                              "Detected (Xist UMI <= 5)" = "Xist+ cells [UMI<=5]",
                                              "Undetected" = "Xist- cells [UMI=0]"))
res$Xist <- factor(res$Xist, levels = c("Xist- cells [UMI=0]", 
                                        "Xist+ cells [UMI<=5]",
                                        "Xist+ cells [UMI>5]"))

res$Xist_ratio <- as.numeric(res$Xist_ratio); res$XCI_ratio <- as.numeric(res$XCI_ratio)
res$Xist_classification <- revalue(res$Xist_classification, c("Undetected" = "Xist Undetected",
                                                               "Low-Xist" = "Xist Low",
                                                               "Middle" = "Intermediate Ratio",
                                                               "Xist_BA" = "Xist-BA",
                                                               "BL6_MA" = "Xist-MA (Xi=B6)",
                                                               "Cast_MA" = "Xist-MA (Xi=Cast)"))
res$Xist_classification <- factor(res$Xist_classification, levels = c("Xist Undetected", "Xist Low", 
                                                                        "Intermediate Ratio", "Xist-BA", 
                                                                        "Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"))
res$Day <- factor(paste0("Day ", res$day))
res$id <- rownames(res)
@

\subsubsection{Plot}
<<>>=
g <- res %>%
  ggplot() + 
  theme_bw() + theme1 + facet_grid(. ~ Day) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = linesize, alpha = hvalpha) + 
  geom_point(aes(x = log10(Xist_b6 + 1), y = log10(Xist_cast + 1), color = Xist_classification), size = scattersize) + 
  geom_point(data = res[res$Xist_classification == "Xist Undetected",],
             aes(x = log10(Xist_b6 + 1), y = log10(Xist_cast + 1), color = Xist_classification), size = scattersize) +
  scale_color_manual(values = color_alleles) + 
  scale_y_continuous(breaks = seq(0,2,1), limits = c(0, 2.5)) +  scale_x_continuous(breaks = seq(0,2,1), limits = c(0, 2.5)) +
  labs(color = "") +  
  xlab(expression(Xist[B6]*" ["*log[10]*"(UMI + 1)]")) + 
  ylab(expression(Xist[Cast]*" ["*log[10]*"(UMI + 1)]")) + 
  guides(color=guide_legend(nrow=2, byrow=TRUE, override.aes = list(size=2))) + 
  theme(legend.position = "top")
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "B_XistUMI.pdf"))
@

\subsection{C) percentage of cells in Xist classes (without XCI status) as area plot}

\subsubsection{Load data}
<<>>=
res <- ddply(res, .variables = .(Time), transform, n = length(Time))
perc <- res %>%
  dplyr::group_by(Time) %>% dplyr::mutate(n = length(Time)) %>%
  dplyr::group_by(Time, Xist_classification) %>% dplyr::summarise(p = length(Time)/unique(n)*100)
perc$time <- gsub(perc$Time, pattern = "h", replacement = "")
perc$Xist_classification <- factor(perc$Xist_classification, 
                                   levels = c("Xist Undetected", "Xist Low",
                                              "Xist-MA (Xi=Cast)", "Xist-MA (Xi=B6)",
                                              "Intermediate Ratio", "Xist-BA"))
ddply(perc, .variables = .(time), summarize, t = sum(p))

# include 0 values for missing elements at 0h
missing_0h <- levels(perc$Xist_classification)[!levels(perc$Xist_classification) %in% perc$Xist_classification[perc$time == 0]]
perc <- rbind(data.frame(perc), data.frame(Time = "0h", Xist_classification = missing_0h, p = 0, time = 0))
@

\subsubsection{Plot}
<<>>=
perc$day <- as.numeric(gsub(perc$Time, pattern = "h", replacement = ""))/24

g <- ggplot(perc, aes(x=day, y=p, fill=Xist_classification)) + 
  theme_bw() + theme1 +
  geom_area(size=0, colour="white") +
  scale_fill_manual(values=color_alleles) +
  scale_y_continuous(breaks = seq(0, 100, by = 25), expand = c(0, 0)) +
  scale_x_continuous(expand = c(0,0)) +
  xlab("Time [days]") + ylab("XX cells [%]") +
  guides(fill = guide_legend(title = "", override.aes = list(alpha = 1)))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "C_XistClassif_AreaPlot.pdf"))
@

\subsection{D) boxplot of Xist UMI between Xist-MA-B6/Cast per time point and WMW significance}

\subsubsection{Load data}
<<>>=
res_xistplus <- res[res$Xist_classification %in% c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"),]
ncells <- ddply(res_xistplus, .variables = .(Time), summarize, 
                b6 = sum(Xist_classification == "Xist-MA (Xi=B6)"),
                cast = sum(Xist_classification == "Xist-MA (Xi=Cast)"))
wmwtest <- ddply(res_xistplus[res_xistplus$Time != "0h",], .variables = .(Time), summarize, 
                 B6_MA = sum(Xist_classification == "Xist-MA (Xi=B6)"),
                 Cast_MA = sum(Xist_classification == "Xist-MA (Xi=Cast)"),
                 pvalue = wilcox.test(x = log10(Xist_b6_cpm[Xist_classification == "Xist-MA (Xi=B6)"]+1), 
                                      y = log10(Xist_cast_cpm[Xist_classification == "Xist-MA (Xi=Cast)"]+1), 
                                      paired = FALSE)$p.value)
wmwtest$FDR <- p.adjust(wmwtest$pvalue, method = "BH")
options("scipen"=100, "digits"=5)
wmwtest$FDR_rounded <- round(wmwtest$FDR, digits = 5)
wmwtest$FDR_rounded <- paste0("FDR = ", wmwtest$FDR_rounded, 
                              ifelse(wmwtest$FDR_rounded<0.05, "\n*",
                                     ifelse(wmwtest$FDR_rounded<0.01, "\n* *", "\n")))
temp <- res_xistplus[!res_xistplus$Time %in% "0h", c("Time", "Xist_classification", "Xist_b6_cpm", "Xist_cast_cpm")]
temp$Xist <- NA
temp$Xist[temp$Xist_classification %in% "Xist-MA (Xi=B6)"] <- log10(temp$Xist_b6_cpm[temp$Xist_classification %in% "Xist-MA (Xi=B6)"]+1)
temp$Xist[temp$Xist_classification %in% "Xist-MA (Xi=Cast)"] <- log10(temp$Xist_cast_cpm[temp$Xist_classification %in% "Xist-MA (Xi=Cast)"]+1)
@

\subsubsection{Plot}
<<>>=
temp$day <- factor(as.numeric(gsub(temp$Time, pattern = "h", replacement = ""))/24)
wmwtest$day <- factor(as.numeric(gsub(wmwtest$Time, pattern = "h", replacement = ""))/24)

g <- temp %>% 
  ggplot() +
  theme_bw() +  theme1 + 
  scale_y_continuous(breaks = seq(0, 5, by = 0.5), limits = c(2.4, 4.8)) +
  geom_violin(aes(x = day, y = Xist, colour = Xist_classification), alpha = 0.5, draw_quantiles = c(0.5), size = violin_box_size, show.legend = FALSE) + 
  geom_jitter(aes(x = day, y = Xist, colour = Xist_classification), alpha = 0.5, size = scattersize,
              position=position_jitterdodge(jitter.width = .2, dodge.width = 0.9), shape = 21) +
  geom_text(data = wmwtest[!wmwtest$day %in% "0",], aes(x = day, y = 4.75, label = round(pvalue, digits = 3)), size = geomtext_size, angle = 0) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = expression(Xist[AS]*" ["*log[10]*"(CPM + 1)]"), color = "") +
  guides(color = guide_legend(override.aes = list(size = 1, shape = 20, alpha = 1)))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "D_XistMA_B6vCast.pdf"))
@

\subsection{Additional measures}

\subsubsection{Percentage of AS-UMI reads over total seqdepth}
<<>>=
# cast
load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ.RData"))
x <- dge[, dge$samples$group %in% "XX"]
median(colSums(x$counts)/x$samples$seqdepth)*100

# b6
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6.RData"))
x <- dge[, dge$samples$group %in% "XX"]
median(colSums(x$counts)/x$samples$seqdepth)*100

# both
load(paste0(AS_path, "DGE_Unfiltered_alltimes_Both.RData"))
x <- dge[, dge$samples$group %in% "XX"]
median(colSums(x$counts)/x$samples$seqdepth)*100
@

\subsubsection{Percentage of AS Xist-MA cells over time}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
x <- dge[, dge$samples$group %in% "XX"]

x$samples[, c("time", "Xist_ratio_class", "id")] %>%
  dplyr::group_by(time) %>% dplyr::mutate(n = length(unique(id))) %>%
  dplyr::group_by(time, Xist_ratio_class) %>% dplyr::summarise(p = length(unique(id))/unique(n)*100) %>%
  dplyr::arrange(Xist_ratio_class)
@

\subsubsection{Median Xist UMI over time in Xist-MA cell groups}
<<>>=
res_xistplus %>%
  dplyr::group_by(Time, Xist_classification) %>% dplyr::summarise(b6 = median(Xist_b6), cast = median(Xist_cast)) %>%
  dplyr::arrange(Xist_classification)
@


\clearpage


\section{Figure 3: DE analysis of Xist high and low cells}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig3_deXistHighLow/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{A) xist k-means classification}

\subsubsection{Load data}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData")); dge <- dge[,dge$samples$group %in% "XX"]

df <- dge$samples[dge$samples$group %in% "XX",]
df$xist_cpm <- (dge$counts["Xist",]/(colSums(dge$counts)*dge$samples$sf_notX))*1e6
df$xist_class <- "Low"; df$xist_class[df$Xist_kmeans_class == 4] <- "Medium"; df$xist_class[df$Xist_kmeans_class %in% 5:7] <- "High"
df$xist_class <- factor(df$xist_class, levels = c("Low", "Medium", "High"))
df$time <- gsub(df$time, pattern = "h", replacement = "")
df$day <- factor(as.numeric(df$time)/24)
df$Xist_kmeans_class <- factor(df$Xist_kmeans_class)
summ_cell <- ddply(df, .variables = .(day, xist_class), summarize, n = length(time))


# k=4
load(paste0(notAS_path, "DGE_complete_alltimes.RData")); dge <- dge[,dge$samples$group %in% "XX"]
df <- dge$samples[dge$samples$group %in% "XX",]
df$xist_cpm <- (dge$counts["Xist",]/(colSums(dge$counts)*dge$samples$sf_notX))*1e6
table(df$day, df$Xist_kmeans_class)

df$xist_class <- "Low"; df$xist_class[df$Xist_kmeans_class == 3] <- "Medium"; df$xist_class[df$Xist_kmeans_class == 4] <- "High"
df$xist_class <- factor(df$xist_class, levels = c("Low", "Medium", "High"))
df$time <- gsub(df$time, pattern = "h", replacement = "")
df$day <- factor(as.numeric(df$time)/24)
df$Xist_kmeans_class <- factor(df$Xist_kmeans_class)
summ_cell <- ddply(df, .variables = .(day, xist_class), summarize, n = length(time))
@

\subsubsection{Plot}
<<>>=
thresholds <- c(min(df$xist_cpm[df$xist_class %in% "Medium"]), 
                max(df$xist_cpm[df$xist_class %in% "Medium"]))
subthresholds <- ddply(df, .variables = .(Xist_kmeans_class), summarize, m = max(xist_cpm))
cols <- rev(c(rev(colorRampPalette(c("orange", "red"))(3)), 
              "grey", 
              rev(colorRampPalette(c("lightblue", "blue"))(3))))

g <- df %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = log10(subthresholds$m+1), linetype = "dashed", alpha = 1/3, size = linesize, color = "black") + 
  geom_hline(yintercept = log10(thresholds+1), linetype = "dashed", alpha = hvalpha, size = linesize, color = "red") + 
  geom_jitter(aes(x = day, y = log10(xist_cpm+1), group = xist_class, color = Xist_kmeans_class), 
              size = outliersize, show.legend = FALSE,
              position=position_jitterdodge(jitter.width = .75, dodge.width = 0.75)) +
  scale_color_manual(values = cols) +
  scale_y_continuous(limits = c(0, 4), breaks = 0:4) +
  geom_text(summ_cell, mapping = aes(x = day, y = Inf, label = paste0("n = ", n), fill = xist_class),
            position=position_dodge(0.75), angle = 90, alpha = 1, size = geomtext_size, hjust = -0.5) + 
  coord_cartesian(clip = "off") +
  labs(x="Time [days]", y = expression("Xist ["*log[10]*"(CPM + 1)]"))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "A_XistCPM_classification.pdf"))
@

\subsection{B) number of DE genes - barplot}

\subsubsection{Launch DE analysis}
<<>>=
contrasts <- list(XistHigh_XistLow = c("Xist_kmeans_class", list(5:7, 1:3)))

depath <- figpath
min_sample_test <- 10; DE_threshold <- de_threshold <- 5e-2; gsea_threshold <- 0.05; nbootstrap <- 1e2; ramonaP <- 0.2; heatmap_fc_threshold <- 2

# XX
useAutosomalScalingFactors <- TRUE
for(cont in 1:length(contrasts)){
  comparison <- names(contrasts)[cont]
  variable <- unlist(contrasts[[cont]][1]); variable_levels <- contrasts[[cont]][2:3]
  
  if(!dir.exists(paste0(depath, comparison))){
      dir.create(path = paste0(depath, comparison), showWarnings = FALSE, recursive = TRUE)
  
      for (i in 1:length(TimePoints)) {
        time <- TimePoints[i]; cat('Processing', time, '..')
        load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
        dge <- dge[, (dge$samples$group %in% "XX") & (dge$samples$time %in% gsub(time, pattern = "hrs", replacement = "h"))]
        dge$samples$Xist_Xchr_class <- paste0(dge$samples$Xist_ratio_class, "_", dge$samples$Xchr_ratio_class)
        dge$samples$sample <- rownames(dge$samples)
    
        # subset to grouping conditions only
        temp <- dge[!(grepl(dge$genes$symbol, pattern = "^ERCC") | duplicated(dge$genes$ensembl)), dge$samples[,variable] %in% unlist(variable_levels)]
        grp <- temp$samples[,variable]
        grp <- ifelse(grp %in% variable_levels[[1]], "case", "control"); table(grp)
        names(grp) <- temp$samples$sample
        grp <- factor(grp, levels = c("control", "case"))
        
        # store the number of cases and controls per time point
        if(!file.exists(paste0(depath, comparison, "/Nsamples_perTime.txt"))){
          m <- matrix(c(time, sum(grp == "case"), sum(grp == "control")), nrow = 1)
          colnames(m) <- c("Time", c(strsplit2(comparison, split = "\\_")))
          write.table(m, quote =FALSE, row.names = FALSE, col.names = TRUE, 
                      file = paste0(depath, comparison, "/Nsamples_perTime.txt"))
        }else{
          m <- matrix(c(time, sum(grp == "case"), sum(grp == "control")), nrow = 1)
          write.table(m, quote = FALSE, row.names = FALSE, col.names = FALSE, append = TRUE,
                      file = paste0(depath, comparison, "/Nsamples_perTime.txt"))
        }
        
        if(min(table(grp)) >= min_sample_test){
          # compute detection rate and cpm matrix
          cdr <- scale(colMeans(temp$counts > 0))
          if(useAutosomalScalingFactors){
            els <- colSums(temp$counts)*(temp$samples$sf_notX/mean(temp$samples$sf_notX))
          }else{
            els <- colSums(temp$counts)*(temp$samples$sf/mean(temp$samples$sf))
          }
          cpm <- t(t(temp$counts)/els)*1e6; rownames(cpm) <- temp$genes$ensembl
          sca <- FromMatrix(exprsArray = log2(cpm + 1), 
                            cData = data.frame(wellKey = names(grp), grp = grp, cdr = cdr),
                            fData = data.frame(chromosome = temp$genes$chromosome, symbol = temp$genes$symbol, ensembl = temp$genes$ensembl))
          zlmdata <- zlm(~cdr + grp, sca)
          summaryCond <- summary(zlmdata, doLRT='grpcase') ; summaryDt <- summaryCond$datatable
          mast <- merge(summaryDt[contrast=='grpcase' & component=='H',.(primerid, `Pr(>Chisq)`)], #hurdle P values
                        summaryDt[contrast=='grpcase' & component=='logFC', .(primerid, coef, ci.hi, ci.lo)], by='primerid')
          mast$AveCPM <- rowMeans(cpm)
          mast$fdr <- p.adjust(mast$`Pr(>Chisq)`, method = "BH")
          mast <- data.frame(bm[match(mast$primerid, bm$ensembl_gene_id), c("chromosome_name", "mgi_symbol", "entrezgene", "ensembl_gene_id")], mast)
          mast <- mast[order(mast$fdr, decreasing = FALSE),]
          
          # store results
          save(mast, file = paste0(depath, comparison, "/", time, ".RData"))
          save(zlmdata, file = paste0(depath, comparison, "/zlm_", time, ".RData"))
          save(sca, file = paste0(depath, comparison, "/sca_", time, ".RData"))
        }
      }
  }
}

# store results
all_de <- c()
for (i in 1:length(TimePoints)) {
  time <- TimePoints[i]; cat('Processing', time, '..')
  
  for(cont in 1:length(contrasts[-length(contrasts)])){
    comparison <- names(contrasts)[cont]
    
    # de results
    file <- paste0(depath, comparison, "/", time, ".RData")
    if(file.exists(file)){
      load(file); sig <- mast[mast$fdr <= DE_threshold,]; all <- mast
      if(nrow(sig)>0)
        sig_de <- rbind(sig_de,
                        data.frame(test = comparison, time = time, sig))
        all_de <- rbind(all_de,
                        data.frame(test = comparison, time = time, all))
    }
  }
}
save(all_de, file = paste0(depath, "ALLresults.RData"))
@

\subsubsection{Load data}
<<>>=
de_threshold <- 0.05
load(paste0(depath, "ALLresults.RData"))
all_de <- all_de[!all_de$mgi_symbol %in% "Xist",]
all_de$isX <- ifelse(all_de$chromosome_name %in% "X", "X-linked", "Autosomal")
all_de$direction <- ifelse(all_de$coef < 0, "Down-regulated", "Up-regulated")
all_de$direction <- factor(all_de$direction, levels = c("Up-regulated", "Down-regulated"))
sig_de <- all_de[(all_de$fdr <= de_threshold),]
de_results <- sig_de[sig_de$test %in% "XistHigh_XistLow",]
de_barplot <- ddply(sig_de[sig_de$test %in% "XistHigh_XistLow",], 
                    .variables = .(time, isX, direction), summarize, 
                    n = length(time))

all <- expand.grid(unique(de_barplot$time), unique(de_barplot$isX), unique(de_barplot$direction)) 
all$id <- apply(all, 1, function(x) paste(x, collapse = "_"))
present <- apply(de_barplot[,1:3], 1, function(x) paste(x, collapse = "_"))
missing <- cbind(all[!all$id %in% present, !colnames(all) %in% "id"], 0)
colnames(missing) <- colnames(de_barplot)
de_barplot_ext <- rbind(de_barplot, missing)
de_barplot_ext$direction <- factor(de_barplot_ext$direction, levels = c("Up-regulated", "Down-regulated"))
de_barplot_ext$higherexp <- revalue(de_barplot_ext$direction, replace = c("Up-regulated" = "Xist high cells",
                                                                          "Down-regulated" = "Xist low cells"))
de_barplot_ext$alpha_numb <- ifelse(de_barplot_ext$n>0, "yes", "no")
de_barplot_ext$time <- gsub(de_barplot_ext$time, pattern = "hrs", replacement = "")
@

\subsubsection{Plot}
<<>>=
de_barplot_ext$day <- factor(as.numeric(de_barplot_ext$time)/24)

# plot results
g <- de_barplot_ext %>% 
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~isX) + 
  geom_bar(aes(x = day, y = n, fill = higherexp), stat = "identity", position=position_dodge()) + 
  scale_fill_manual(values = c("red", "blue")) +
  geom_text(aes(x = day, y = n+1, group = higherexp, label = n), 
            hjust = -.1,
            color="black", position = position_dodge(0.9), size = geomtext_size, angle = 90, show.legend = FALSE) +
  scale_y_continuous(limits = c(0, 185), breaks = seq(0, 150, by = 50)) + 
  ylab(paste0("Significant genes [FDR<=", de_threshold, "]")) + xlab("Time [days]") +
  guides(fill = guide_legend(title="Higher expression in:", nrow=2, byrow=TRUE), alpha = 'none')
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 3, savefile = paste0(figpath, "B_DE_barplot.pdf"))
@

\subsection{C) heatmap of DE genes at 48h (produced one per time point: cell/average per Xist group)}

\subsubsection{Define function}
<<>>=
plot_heatmap <- function(all_de, contrasts, comparison, minFDR = 0.05, minAbsFC = 2,
                         depath, is_log10CPMo1 = TRUE, abslog2FC_break = 7,
                         colorPalette = c("black", "gold", "red"), paletteLength = 500,
                         cellheight = 15, fontsize_col = 15, fontsize_row = 15, width = 15, cellwidth = 50, fontsize = 15,
                         excludeFC = "|log2FC|<1", orderByXist = TRUE){
  
  # define heatmap coloring
  myColor <- c(colorRampPalette(colorPalette)(paletteLength))
  
  # select levels of two groups being compared
  variable <- unlist(contrasts[[comparison]][1]); variable_levels <- contrasts[[comparison]][2:3]
  
  # subset results
  all_de$log2FC <- all_de$coef
  sig_all <- all_de[(all_de$test == comparison)&
                (abs(all_de$log2FC) >= log2(minAbsFC))&
                (all_de$fdr <= minFDR),]
  
  # repeat plot for Xlinked only and Autosomal+PosXlinked
  for(addlabel in c("autosomal_posXlinked", "Xlinked")){
    if(addlabel == "autosomal_posXlinked"){sig <- sig_all[!(sig_all$chromosome_name %in% "X" & sig_all$coef<0),]}
    if(addlabel == "Xlinked"){sig <- sig_all[sig_all$chromosome_name %in% "X",]}
    
    # order results by FC
    sig <- sig[order(sig$log2FC, decreasing = TRUE),]
    
    # plot results for each time point --> Average gene expression per group
    # heat_path <- paste0(depath, comparison, "/Heatmap/AverageGroup/")
    # # if(dir.exists(heat_path)) unlink(x = heat_path, recursive = TRUE)
    # 
    # if(nrow(sig)>1){
    #   for(time in TimePoints){
    #     dir.create(heat_path, showWarnings = FALSE, recursive = TRUE)
    #     s <- sig[sig$time == time,]
    # 
    #     if(nrow(s)>1){
    # 
    #       # store DE genes
    #       degenes_s <- s$mgi_symbol
    # 
    #       # load normalized matrices
    #       load(paste0(notAS_path, "processed/DGE_complete_", time, ".RData"))
    #       if(is_log2CPMo1){
    #         counts <- log2(t(t(dge$counts)/dge$samples$sf_notX*colSums(dge$counts))*1e6 + 1)
    #       }else{
    #         counts <- log2(t(t(dge$counts)/dge$samples$sf_notX) + 1)
    #       }
    # 
    #       # subset matrix to cells in contrast and DE genes only --> compute average gene level per variable group
    #       if(comparison == "XistHigh_XistLow"){
    #         levels <- 1:7
    #       }else{
    #         levels <- c(variable_levels[[2]], variable_levels[[1]])
    #       }
    #       ncells <- c()
    #       for(v in seq_len(length(levels))){
    #         l <- levels[v]
    #         ncells[v] <- sum(dge$samples[variable] == l)
    #         avg <- rowMeans(counts[match(degenes_s, rownames(counts)), as.vector(dge$samples[variable] == l)])
    #         if(v == 1){
    #           avgexp <- matrix(avg, ncol = 1)
    #         }else{
    #           avgexp <- cbind(avgexp, avg)
    #         }
    #       }
    #       rownames(avgexp) <- names(avg); colnames(avgexp) <- paste0(levels, " (n = ", ncells, ")")
    # 
    #       # define column and row annotation
    #       annot_col <- data.frame(Levels = colnames(avgexp)); rownames(annot_col) <- colnames(avgexp)
    #       if(comparison == "XistHigh_XistLow"){
    #         colors_col <- rep(c("blue", "grey", "red"), c(3,1,3)); names(colors_col) <- colnames(avgexp)
    #       }else{
    #         colors_col <- c(colorRampPalette(c("orange", "red"))(length(variable_levels[[1]])),
    #                         colorRampPalette(c("blue", "lightblue"))(length(variable_levels[[2]])))
    #         names(colors_col) <- colnames(avgexp)
    #       }
    #       
    #       fc_breaks <- seq(-abslog2FC_break, abslog2FC_break, by = 0.5)
    #       ct <- cut(s$log2FC, breaks = fc_breaks)
    #       levels <- levels(ct)
    #       # levels[levels %in% c("(-1,0]", "(0,1]")] <- "|log2FC|<1"
    #       log2fc <- cut(s$log2FC, breaks = fc_breaks, labels = levels)
    #       isX <- ifelse(s$chromosome_name %in% "X", "X-linked", "Autosomal")
    #       annot_row <- data.frame(log2FC = log2fc, isX = isX); rownames(annot_row) <- s$mgi_symbol
    # 
    #       colors_row <- colorRampPalette(c("blue", "white", "red"))(length(unique(levels))); names(colors_row) <- unique(levels)
    #       colors_row <- colors_row[names(colors_row) %in% unique(ct)]
    #       colors_row_isX <- c("black", "white"); names(colors_row_isX) <- c("X-linked", "Autosomal")
    # 
    #       color_annot <- list(Levels = colors_col, log2FC = colors_row, isX = colors_row_isX)
    # 
    #       # produce heatmap
    #       title_label <- ifelse(is_log2CPMo1, "Avelog2CPM", "AveUMI")
    #       height <- cellheight*nrow(s)/50
    #       avg_aut <- avgexp[!log2fc %in% excludeFC, ]
    #       
    #       # gap between up and down regulated
    #       gprw <- which(!duplicated(s$log2FC>0))[2] - 1
    #       if(is.na(gprw)) gprw <- NULL
    # 
    #       pheatmap(avg_aut,
    #                gaps_row = c(1, gprw),
    #                # annotation_col = annot_col, annotation_row = annot_row, 
    #                annotation_colors = color_annot,
    #                cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = TRUE, color = myColor,
    #                cellwidth = cellwidth, cellheight = cellheight,
    #                fontsize_col = fontsize_col, fontsize_row = fontsize_row, fontsize = fontsize,
    #                width = width, height = height,
    #                gaps_col = which(!duplicated(colors_col[colnames(avgexp)]))[-1] - 1,
    #                filename = paste0(heat_path, time, "DE_", title_label, "_", fdr_de, "_", addlabel, ".pdf"))
    #     }
    #   }
    # }
    
    # plot results for each time point --> Per cell heatmap
    heat_path <- paste0(depath, comparison, "/Heatmap/PerCell/")
    # if(dir.exists(heat_path)) unlink(x = heat_path, recursive = TRUE)
    if(nrow(sig)>1){
      for(time in TimePoints){
        dir.create(heat_path, showWarnings = FALSE, recursive = TRUE)
        s <- sig[sig$time == time,]; s$log2FC <- s$coef; s <- s[order(s$log2FC, decreasing = TRUE),]
        if(nrow(s)>1){
          # store DE genes
          degenes_s <- s$mgi_symbol
          
          # load normalized matrices
          load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
          t <- gsub(time, pattern = "hrs", replacement = "h")
          dge <- dge[, (dge$samples$group == "XX")&(dge$samples$time == t)]
          
          if(comparison == "XistHigh_XistLow"){
            levels <- 1:7
            dge$samples[[variable]] <- as.numeric(dge$samples[[variable]])
          }else{
            levels <- c(variable_levels[[2]], variable_levels[[1]])
          }
          dge <- dge[, dge$samples[[variable]] %in% levels]
          
          if(is_log10CPMo1){
            counts <- log10(t(t(dge$counts)/(dge$samples$sf_notX*colSums(dge$counts)))*1e6 + 1)
          }else{
            counts <- log10(t(t(dge$counts)/dge$samples$sf_notX) + 1)
          }
          
          # subset matrix to cells in contrast and DE genes only --> compute average gene level per variable group
          avgexp <- counts[match(degenes_s, rownames(counts)), ]
          
          # define column and row annotation
          annot_col <- data.frame(Levels = dge$samples[[variable]]); rownames(annot_col) <- colnames(avgexp)
          if(comparison == "XistHigh_XistLow"){
            colors_col <- c(colorRampPalette(c("lightblue", "blue"))(3), "grey",
                            colorRampPalette(c("orange", "red"))(3))
            names(colors_col) <- 1:7
            # colors_col <- rep(c("blue", "grey", "red"), c(3,1,3)); names(colors_col) <- 1:7
          }else{
            colors_col <- c(colorRampPalette(c("orange", "red"))(length(variable_levels[[1]])),
                            colorRampPalette(c("blue", "lightblue"))(length(variable_levels[[2]])))
            names(colors_col) <- unlist(variable_levels)
            # colors_col <- rep(c("red", "blue"), sapply(variable_levels, length)); names(colors_col) <- unlist(variable_levels)
          }
          
          fc_breaks <- seq(-abslog2FC_break, abslog2FC_break, by = 0.5)
          ct <- cut(s$log2FC, breaks = fc_breaks)
          levels <- levels(ct)
          levels[levels %in% c("(-1,0]", "(0,1]")] <- "|log2FC|<1"
          log2fc <- cut(s$log2FC, breaks = fc_breaks, labels = levels)
          isX <- ifelse(s$chromosome_name %in% "X", "X-linked", "Autosomal")
          annot_row <- data.frame(log2FC = log2fc, isX = isX); rownames(annot_row) <- s$mgi_symbol
          colors_row <- colorRampPalette(c("blue", "white", "red"))(length(unique(levels))); names(colors_row) <- unique(levels)
          colors_row <- colors_row[names(colors_row) %in% unique(ct)]
          colors_row_isX <- c("black", "white"); names(colors_row_isX) <- c("X-linked", "Autosomal")
          
          color_annot <- list(Levels = colors_col, log2FC = colors_row, isX = colors_row_isX)
          
          # produce heatmap
          title_label <- ifelse(is_log10CPMo1, "Avelog10CPM", "AveUMI")
          height <- cellheight*nrow(s)/30
          avg_aut <- avgexp[!log2fc %in% excludeFC, ]
          
          # order by Xist expression
          if(orderByXist){
            o <- order(avg_aut["Xist",], decreasing = FALSE)
            avg_aut <- avg_aut[, o]
            m <- match(colnames(avg_aut), rownames(dge$samples))
            annot_col <- data.frame(Levels = dge$samples[[variable]][m]); rownames(annot_col) <- colnames(avg_aut)
          }
          
          # gap between up and down regulated
          gprw <- which(!duplicated(s$log2FC>0))[2] - 1
          if(is.na(gprw)) gprw <- NULL
          
          pheatmap(avg_aut, 
                   gaps_row = c(1, gprw),
                   # annotation_col = annot_col, annotation_row = annot_row, 
                   annotation_colors = color_annot,
                   cluster_rows = FALSE, cluster_cols = FALSE, show_colnames = FALSE, color = myColor, 
                   cellwidth = cellwidth, cellheight = cellheight, 
                   fontsize_col = fontsize_col, fontsize_row = fontsize_row, fontsize = fontsize,
                   width = width, height = height,
                   gaps_col = which(!duplicated(annot_col$Levels))[-1] - 1,
                   filename = paste0(heat_path, time, "DE_", title_label, "_", fdr_de, "_", addlabel, ".pdf"))
        }
      }
    }
  }
}
@

\subsubsection{Load data}
<<>>=
load(paste0(depath, "ALLresults.RData"))
de_threshold <- 0.05
all_de$isX <- ifelse(all_de$chromosome_name %in% "X", "X-linked", "Autosomal")
all_de$direction <- ifelse(all_de$coef < 0, "Down-regulated", "Up-regulated")
all_de$direction <- factor(all_de$direction, levels = c("Up-regulated", "Down-regulated"))
@

\subsubsection{Plot}
<<>>=
contrasts <- list(XistHigh_XistLow = c("Xist_kmeans_class", list(5:7, 1:3)))
comp <- names(contrasts)
minFDR <- fdr_de <- de_threshold
minAbsFC <- 1.5
is_log10CPMo1 <- TRUE
abslog2FC_break <- 7

# (Xlinked) and (Autosomal & up-reg. Xlinked)
plot_heatmap(all_de = all_de, contrasts = contrasts, comparison = comp, minFDR = minFDR, minAbsFC = minAbsFC, 
             is_log10CPMo1 = is_log10CPMo1, abslog2FC_break = abslog2FC_break, depath = figpath,
             cellheight = 6, fontsize_col = 6, fontsize_row = 6, width = 10, cellwidth = .5, fontsize = 6, orderByXist = TRUE)
@

\subsection{D) number of DE genes - barplot - correlation analysis [Mohammed et al. 2017]}

\subsubsection{Load data}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))

corrpath <- paste0(figpath, "Correlations/"); dir.create(corrpath, showWarnings = FALSE, recursive = TRUE)
dge$cpm <- t(t(dge$counts)/(colSums(dge$counts)*dge$samples$sf_notX))*1e6
dge$samples$Xcount_cpm <- colSums(dge$cpm[dge$genes$chromosome %in% "X",])
x <- data.frame(Time = rep(dge$samples$time, each = nrow(dge)), 
                Xcount = rep(dge$samples$Xcount_cpm, each = nrow(dge)),
                Xist = rep(dge$cpm["Xist",], each = nrow(dge)),
                Gene = rep(dge$genes$symbol, times = ncol(dge)),
                Chr = rep(dge$genes$chromosome, times = ncol(dge)),
                count = c(dge$counts),
                cpm = c(dge$cpm)
                )

cluster <- new_cluster(10)
sprmcor <- x %>% 
  dplyr::group_by(Time, Gene) %>% 
  partition(cluster) %>%
  dplyr::summarise(Chr = unique(Chr),
                   spr = cor(cpm, Xcount, method = "spearman"),
                   spr_noZero = cor(cpm[cpm>0], Xcount[cpm>0], method = "spearman"),
                   spr_Xist = cor(cpm, Xist, method = "spearman"),
                   spr_noZero_Xist = cor(cpm[(Xist>0) & (cpm>0)], Xist[(Xist>0) & (cpm>0)], method = "spearman"),
                   droprate = mean(cpm == 0),
                   droprate_Xist = mean(Xist == 0),
                   n = length(cpm),
                   pvalue_Xist = cor.test(cpm, Xist, method = "spearman", use = "complete.obs")$p.value) %>% 
  dplyr::arrange(Gene, Time) %>%
  collect()
sprmcor$fdr_Xist <- p.adjust(sprmcor$pvalue_Xist, method = "BH")
save(sprmcor, file = paste0(figpath, "sprmcor.RData"))

# select significant genes
de_threshold <- 0.05
temp <- sprmcor[!is.na(sprmcor$fdr_Xist),]
temp <- temp[!temp$Gene %in% "Xist",] #exclude Xist
temp$isX <- ifelse(temp$Chr %in% "X", "X-linked", "Autosomal")
temp$direction <- ifelse(temp$spr_Xist < 0, "Negative Xist regulator", "Positive Xist regulator")
temp$direction <- factor(temp$direction, levels = c("Positive Xist regulator", "Negative Xist regulator"))
temp <- data.frame(temp)
sig_de <- temp[(temp$fdr_Xist <= de_threshold),]
sig_de$time <- revalue(sig_de$Time, replace = c("0h" = "1", "24h" = "2", "48h" = "3", "72h" = "4", "96h" = "5"))
de_barplot <- ddply(sig_de, .variables = .(time, isX, direction), summarize, 
                    n = length(time))
all <- expand.grid(unique(de_barplot$time), unique(de_barplot$isX), unique(de_barplot$direction)) 
all$id <- apply(all, 1, function(x) paste(x, collapse = "_"))
present <- apply(de_barplot[,1:3], 1, function(x) paste(x, collapse = "_"))
missing <- cbind(all[!all$id %in% present, !colnames(all) %in% "id"], 0)
colnames(missing) <- colnames(de_barplot)
de_barplot_ext <- rbind(de_barplot, missing)
de_barplot_ext$direction <- factor(de_barplot_ext$direction, levels = c("Positive Xist regulator", "Negative Xist regulator"))
de_barplot_ext$alpha_numb <- ifelse(de_barplot_ext$n>0, "yes", "no")
@

\subsubsection{Plot}
<<>>=
de_barplot_ext$day <- factor(as.numeric(de_barplot_ext$time)-1)
g <- de_barplot_ext[!de_barplot_ext$day %in% "0",] %>% 
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~isX) + 
  # geom_hline(yintercept = seq(50, 250, by = 50), linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_bar(aes(x = day, y = n, fill = direction), stat = "identity", position=position_dodge()) + 
  scale_fill_manual(values = c("red", "blue")) +
  geom_text(aes(x = day, y = n+1, group = direction, label = n), 
            hjust = -.1,
            color="black", position = position_dodge(0.9), size = geomtext_size, angle = 90, show.legend = FALSE) +
  scale_y_continuous(limits = c(0, 280), breaks = seq(0, 250, by = 50)) +
  xlab("Time [days]") +
  ylab(paste0("Significant genes [FDR<=", de_threshold, "]")) + 
  guides(fill = guide_legend(title="", nrow=2, byrow=TRUE), alpha = 'none')
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 3, savefile = paste0(figpath, "D_DE_barplot_corrXist.pdf"))
@

\subsection{E) Heatmap - spearman correlation to Xist - known regulators}

\subsubsection{Load function}
<<>>=
Mm_syn <- fread(input = paste0(figpath, "Mus_musculus.gene_info",
                sep = "\t", header = FALSE, skip = 0L)
colnames(Mm_syn) <- as.character(Mm_syn[1,])
Mm_syn <- Mm_syn[-1,]
alias2main_par <- function(genesymbol, annot = Mm_syn, cores = 10){
  
  x <- as.character(genesymbol)
  
  #define synonyms and ensembl 
  symbol <- annot$Symbol
  syn <- strsplit2(annot$Synonyms, split = "\\|")
  ensembl <- strsplit2(strsplit2(annot$dbXrefs, split = "\\|")[,2], split = ":")[,2]
  
  #get results back --> parallel
  # no_cores <- detectCores() - 1  
  no_cores <- cores
  cl <- makeCluster(no_cores)  
  registerDoParallel(cl) 
  
  results <- foreach(i=1:length(x), .combine = rbind) %dopar% {
    
    gene <- x[i]
    gene_lower <- strsplit(gene, split = "")[[1]]
    gene_lower <- paste(c(gene_lower[1], tolower(paste(gene_lower[2:length(gene_lower)], collapse = ""))), collapse = "")
    
    # look in both main and alias symbols
    if(gene %in% symbol | gene_lower %in% symbol){
      w <- unique(c(which(symbol == gene), which(symbol == gene_lower)))
    }else{
      w <- unique(c(which(apply(syn, 1, function(y){any(gene %in% y)})==TRUE),
                    which(apply(syn, 1, function(y){any(gene_lower %in% y)})==TRUE)))
    }
    
    #for some genes a second line is present, but only the first represent the gene itself
    w <- w[1]
    
    # if a gene is not matched print NAs
    if(length(w)==0){
      temp <- c(gene, NA, NA, NA)
    }else{
      temp <- c(gene, symbol[w], ensembl[w], annot$Synonyms[w])
    }
    return(temp)
  }
  results <- data.frame(results)
  colnames(results) <- c("Gene", "UpdatedSymbol", "Ensembl", "Synonyms")
  stopCluster(cl)
  return(results)
}
@

\subsubsection{Load data}
<<>>=
regulators <- rbind(data.frame(gene = c("Tfcp2l1", "Klf2"), type = "naive plurip."),
                    data.frame(gene = c("Nanog", "Zfp42", "Sox2", "Myc", "Klf4", "Esrrb", "Pou5f1", "Prdm14", "Ctcf", "Yy1"),
                               type = "autosomal regulators"),
                    data.frame(gene = c("Tsix", "Jpx", "Ftx", "4930519F16Rik", "Rnf12"),
                               type = "X-linked regulators"))

updated <- alias2main_par(genesymbol = regulators$gene)
regulators$symbol <- as.character(updated$UpdatedSymbol[match(regulators$gene, updated$Gene)])
regulators[regulators$gene != regulators$symbol,]

# check missing genes dropout rate in unfiltered dge list
missing <- regulators$symbol[!regulators$symbol %in% sprmcor$Gene]
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
rowMeans(dge$counts[dge$genes$symbol %in% missing,] == 0)

# load correlation results
load(paste0(figpath, "sprmcor.RData"))

# remove "pseudogenes" using biomart annotation
m <- match(sprmcor$Gene, bm$mgi_symbol); ext <- bm[m, c("gene_biotype", "description")]
sprmcor <- data.frame(sprmcor, ext)
table(sprmcor$gene_biotype[grepl(sprmcor$gene_biotype, pattern = "pseudogene")])
sprmcor <- sprmcor[!grepl(sprmcor$gene_biotype, pattern = "pseudogene"),]

# subset dataset
temp <- sprmcor[sprmcor$Gene %in% as.character(regulators$symbol),]
temp$type <- regulators$type[match(temp$Gene, regulators$symbol)]
temp$detrate <- 1-temp$droprate
temp$isX <- ifelse(temp$Chr %in% "X", "X-linked", "Autosomal")
mypalette <- colorRampPalette(c("blue", "white", "red"))(1e3)

features <- c("Time", "Gene", "isX", "type", "detrate", "spr_Xist", "fdr_Xist")
temp_m <- gather(temp[, features], variable, value, 
                 -Time, -Gene, -isX, -type, -detrate, -fdr_Xist)
temp_m$group <- revalue(factor(temp_m$variable), replace = c("spr_Xist" = "Xist corr. (all cells)"))
temp_m$group <- factor(temp_m$group, levels = c("Xist corr. (all cells)"))

# identify genes with significant correlations
temp_m$significant <- temp_m$fdr_Xist<0.05
temp_m <- temp_m %>%
  dplyr::arrange(fdr_Xist)

# time
temp_m$time <- gsub(temp_m$Time, pattern = "h", replacement = "")

# gene order
order <- data.frame(rbind(data.frame(type = "naive pluripotency", genes = c("Tfcp2l1", "Klf2")),
               data.frame(type = "x-linked activators", genes = c("Rlim", "Ftx")),
               data.frame(type = "x-linked repressors", genes = c("Jpx", "Tsix", "4930519F16Rik")),
               data.frame(type = "autosomal activators", genes = c("Yy1")),
               data.frame(type = "autosomal repressors", genes = c("Nanog", "Zfp42", "Sox2", "Myc", "Klf4", "Esrrb", 
                                                                   "Pou5f1", "Prdm14", "Ctcf"))
               ))

regulators <- c("Nanog", "Klf2", "Klf4", "Prdm14", "Pou5f1", "Sox2", "Myc", "Zfp42", "Ctcf", "Tsix", "Yy1", "Rlim", "Ftx")
temp_m <- temp_m[temp_m$Gene %in% regulators,]
temp_m$Gene <- factor(temp_m$Gene, levels = rev(regulators))
@

\subsubsection{Plot}
<<>>=
# compute plot size by # of genes
ngenes <- length(unique(temp_m$Gene))
ph <- ngenes*0.3
temp_m$days <- factor(as.numeric(temp_m$time)/24)

# plot
g <- temp_m[!temp_m$days %in% "0",] %>% 
  ggplot() + 
  theme_bw() + theme1 +
  facet_grid(.~group, scales = "free_y") + 
  geom_point(aes(x = days, y = Gene, fill = value, size = abs(value)), pch=22, stroke = 0) +
  geom_point(data = temp_m[temp_m$significant == TRUE,], aes(x = days, y = Gene), size = small_scattersize, color = "white", pch = 1) +
  scale_fill_gradient2(low="blue", mid="white", high="red", 
                       midpoint=0, breaks=seq(-0.5, 0.5, .25), limits=c(-0.51,0.51)) + 
  scale_radius(breaks = seq(0, 0.5, by = 0.25), limits = c(0, 0.5), range = c(0.1, 4)) +
  labs(x = "Time [days]", y = "", fill = "Spearman's correlation to Xist CPM", size = "Absolute correlation")
adjust_size(g = g, panel_width_cm = 2.5, panel_height_cm = ph, savefile = paste0(figpath, "E_corrXist_KnownRegulators.pdf"))
@

\subsection{F/G) Heatmap - spearman correlation to Xist - positive/negative correlated genes}

\subsubsection{Load data}
<<>>=
# select autosomal genes: most significant and highest correlations
sub <- sprmcor[(sprmcor$Time %in% c("24h", "48h")),]
sub <- sub[!sub$Gene %in% "Xist",]
sub_sig <- sub[(sub$fdr_Xist<0.05)&(!is.na(sub$fdr_Xist)),]

summary(abs(sub_sig$spr_Xist[sub_sig$Time == "24h"]))
summary(abs(sub_sig$spr_Xist[sub_sig$Time == "48h"]))
summary(abs(sub_sig$spr_Xist))

# select only significant genes with absolute correlation greater than 0.25
sub_sig_high <- sub_sig[abs(sub_sig$spr_Xist)>0.25,]
table(sub_sig_high$spr_Xist>0)
positive <- sub_sig_high[sub_sig_high$spr_Xist>0,] %>% dplyr::arrange(-abs(spr_Xist))
pos_genes <- unique(as.character(positive$Gene))
negative <- sub_sig_high[(sub_sig_high$spr_Xist<0)&(!sub_sig_high$Chr %in% "X"),] %>% dplyr::arrange(-abs(spr_Xist)) # exclude X-linked genes
neg_genes <- unique(as.character(negative$Gene))
@

\subsubsection{Plot}
<<>>=
# plot - positive regulators
ph <- length(pos_genes)*0.3
temp <- sprmcor[sprmcor$Gene %in% pos_genes,]; temp$Gene <- factor(temp$Gene, levels = rev(pos_genes))
temp$time <- gsub(temp$Time, pattern = "h", replacement = "")
temp$significant <- temp$fdr_Xist<0.05
temp$days <- factor(as.numeric(temp$time)/24)

g <- temp[!temp$days %in% "0",] %>% 
  ggplot() + 
  theme_bw() + theme1 +
  geom_point(aes(x = days, y = Gene, fill = spr_Xist, size = abs(spr_Xist)), pch=22, stroke = 0) +
  geom_point(data = temp[temp$significant == TRUE,], aes(x = days, y = Gene), size = small_scattersize, color = "white", pch = 1) +
  scale_fill_gradient2(low="blue", mid="white", high="red", 
                       midpoint=0, breaks=seq(-0.5, 0.5, .25), limits=c(-0.51,0.51)) + 
  scale_radius(breaks = seq(0, 0.5, by = 0.25), limits = c(0, 0.5), range = c(0.1, 4)) +
  labs(x = "Time [days]", y = "", fill = "Spearman's correlation to Xist CPM", size = "Absolute correlation")
adjust_size(g = g, panel_width_cm = 2.5, panel_height_cm = ph, savefile = paste0(figpath, "F_corrXist_PositiveRegulators.pdf"))

# plot - negative regulators
ph <- length(neg_genes)*0.3
temp <- sprmcor[sprmcor$Gene %in% neg_genes,]; temp$Gene <- factor(temp$Gene, levels = rev(neg_genes))
temp$time <- gsub(temp$Time, pattern = "h", replacement = "")
temp$significant <- temp$fdr_Xist<0.05
temp$days <- factor(as.numeric(temp$time)/24)

g <- temp[!temp$days %in% "0",] %>% 
  ggplot() + 
  theme_bw() + theme1 +
  geom_point(aes(x = days, y = Gene, fill = spr_Xist, size = abs(spr_Xist)), pch=22, stroke = 0) +
  geom_point(data = temp[temp$significant == TRUE,], aes(x = days, y = Gene), size = small_scattersize, color = "white", pch = 1) +
  scale_fill_gradient2(low="blue", mid="white", high="red", 
                       midpoint=0, breaks=seq(-0.5, 0.5, .25), limits=c(-0.51,0.51)) + 
  scale_radius(breaks = seq(0, 0.5, by = 0.25), limits = c(0, 0.5), range = c(0.1, 4)) +
  labs(x = "Time [hours]", y = "", fill = "Spearman's correlation\nrho(Xist CPM, Gene CPM)", size = "Absolute correlation")
adjust_size(g = g, panel_width_cm = 2.5, panel_height_cm = ph, savefile = paste0(figpath, "G_corrXist_NegativeRegulators.pdf"))
@

\subsection{Additional measures}

\subsubsection{DE analysis: maximal and minimal FC per time point}
<<>>=
de_threshold <- 0.05
load(paste0(depath, "ALLresults.RData"))
all_de <- all_de[!all_de$mgi_symbol %in% "Xist",]
all_de$isX <- ifelse(all_de$chromosome_name %in% "X", "X-linked", "Autosomal")
all_de$direction <- ifelse(all_de$coef < 0, "Down-regulated", "Up-regulated")
all_de$direction <- factor(all_de$direction, levels = c("Up-regulated", "Down-regulated"))
sig_de <- all_de[(all_de$fdr <= de_threshold),]

sig_de[sig_de$isX %in% "Autosomal",] %>% dplyr::group_by(time) %>%
  dplyr::summarise(activator_log2FC = coef[coef == max(coef)], activator_gene = mgi_symbol[coef == max(coef)],
                   repressor_log2FC = coef[coef == min(coef)], repressor_gene = mgi_symbol[coef == min(coef)])
@


\clearpage


\section{Figure 4: Global silencing}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig4_GlobalSilencing/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{A) violin plot for XCI ratio over time (all XX cells)}

\subsubsection{Plot}
<<>>=
colors <- rev(comparison_colors)

temp <- res
temp$Xist <- revalue(factor(temp$Xist), 
                     replace = c("Xist+ cells [UMI>5]" = "Xist+ cells",
                                 "Xist+ cells [UMI<=5]" = "Xist+ cells [UMI<=5]",
                                 "Xist- cells [UMI=0]" = "Xist- cells"))
temp$Xist <- factor(temp$Xist, levels = c("Xist- cells", 
                                          "Xist+ cells [UMI<=5]",
                                          "Xist+ cells"))

g <- temp[!temp$Xist %in% "Xist+ cells [UMI<=5]",] %>% 
  ggplot() +
  theme_bw() +  theme1 + 
  scale_y_continuous(breaks = c(0, 0.2, 0.5, 0.8, 1)) +
  geom_violin(aes(x = day, y = XCI_ratio, colour = Xist), alpha = 1/2, draw_quantiles = c(0.5), size = violin_box_size, show.legend = FALSE) + 
  geom_jitter(aes(x = day, y = XCI_ratio, colour = Xist), alpha = 1/4, size = small_scattersize,
              position=position_jitterdodge(jitter.width = .5, dodge.width = 0.9), shape = 21) +
  labs(x = "Time [days]", 
       y = expression("X Chromosome Ratio [XCR = "*B6[chrX]*"/("*B6[chrX]+Cast[chrX]*")"), 
       colour = "") +
  scale_color_manual(values = colors) +
  guides(color = guide_legend(override.aes = list(size = 1, shape = 20, alpha = 1)))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "A_XCR_XistDetection.pdf"))
@

\subsection{B) scatter of spliced and unspliced X-reads}

\subsubsection{Load data}
<<>>=
df <- res

### notAS
load(paste0(notAS_path, "DGE_spliced_alltimes.RData")); spliced <- dge
load(paste0(notAS_path, "DGE_unspliced_alltimes.RData")); unspliced <- dge
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData")); notAS <- dge[, colnames(spliced)]

commongenes <- intersect(spliced$genes$symbol, notAS$genes$symbol)
spliced <- spliced[match(commongenes, spliced$genes$symbol),]
unspliced <- unspliced[match(commongenes, unspliced$genes$symbol),]
notAS <- notAS[match(commongenes, notAS$genes$symbol),]

notas_df <- data.frame(Time = rep(notAS$samples$time, each = nrow(notAS$counts)),
                   Cell = rep(notAS$samples$sample, each = nrow(notAS$counts)),
                   Gene = rep(notAS$genes$symbol, times = ncol(notAS$counts)),
                   Chromosome = rep(notAS$genes$chromosome, times = ncol(notAS$counts)),
                   exon = c(spliced$counts),
                   intron = c(unspliced$counts),
                   notAS = c(notAS$counts)
                   )

fields <- c("Xist_ratio", "Xist_ratio_class", "Xchr_ratio", "Xchr_ratio_class")
df$Xist_ratio_class <- df$Xist_classification; df$Xchr_ratio <- df$XCI_ratio; df$Xchr_ratio_class <- df$XCI_ratio_classification
m <- match(notas_df$Cell, df$id)
notas_df <- data.frame(notas_df, df[m, fields])
notas_df <- notas_df[notas_df$Chromosome %in% c(1:19, "X", "Y"),]
save(notas_df, file = paste0(figpath, "notAS_exon_intron.RData"))


### AS
load(paste0(AS_path, "DGE_spliced_alltimes_BL6.RData")); spliced_b6 <- dge
load(paste0(AS_path, "DGE_unspliced_alltimes_BL6.RData")); unspliced_b6 <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6_XX.RData")); b6 <- dge[, colnames(spliced_b6)]
load(paste0(AS_path, "DGE_spliced_alltimes_CastEiJ.RData")); spliced_cast <- dge
load(paste0(AS_path, "DGE_unspliced_alltimes_CastEiJ.RData")); unspliced_cast <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ_XX.RData")); cast <- dge[, colnames(spliced_cast)]

commongenes <- intersect(spliced_b6$genes$symbol, b6$genes$symbol)
spliced_b6 <- spliced_b6[match(commongenes, spliced_b6$genes$symbol),]
unspliced_b6 <- unspliced_b6[match(commongenes, unspliced_b6$genes$symbol),]
b6 <- b6[match(commongenes, b6$genes$symbol),]
spliced_cast <- spliced_cast[match(commongenes, spliced_cast$genes$symbol),]
unspliced_cast <- unspliced_cast[match(commongenes, unspliced_cast$genes$symbol),]
cast <- cast[match(commongenes, cast$genes$symbol),]
notAS <- notAS[match(commongenes, notAS$genes$symbol),]

as_df <- data.frame(Time = rep(cast$samples$time, each = nrow(cast$counts)),
                    Cell = rep(cast$samples$sample, each = nrow(cast$counts)),
                    Gene = rep(cast$genes$symbol, times = ncol(cast$counts)),
                    Chromosome = rep(cast$genes$chromosome, times = ncol(cast$counts)),
                    b6_exon = c(spliced_b6$counts),
                    b6_intron = c(unspliced_b6$counts),
                    b6_AS = c(b6$counts),
                    cast_exon = c(spliced_cast$counts),
                    cast_intron = c(unspliced_cast$counts),
                    cast_AS = c(cast$counts)
                    )

fields <- c("Xist_ratio", "Xist_ratio_class", "Xchr_ratio", "Xchr_ratio_class")
m <- match(as_df$Cell, df$id)
as_df <- data.frame(as_df, df[m, fields])
as_df <- as_df[as_df$Chromosome %in% c(1:19, "X", "Y"),]
save(as_df, file = paste0(figpath, "AS_exon_intron.RData"))
@

\subsubsection{Plot}
<<>>=
excludegroup <- c("Xist Low", "Intermediate Ratio")

# spliced counts
sum_spliced <- ddply(as_df[!as_df$Xist_ratio_class %in% excludegroup,], .variables = .(Time, Cell),
             summarize, 
             Xist_ratio_class = unique(Xist_ratio_class),
             b6 = sum(b6_exon[Chromosome %in% "X"]),
             cast = sum(cast_exon[Chromosome %in% "X"]))
sum_spliced$day <- factor(paste0("Day ", as.numeric(gsub(sum_spliced$Time, pattern = "h", replacement = ""))/24))

g <- sum_spliced %>%
  ggplot() + 
  theme_bw() + theme1 + facet_grid(. ~ day) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = linesize, alpha = hvalpha) + 
  geom_point(aes(x = b6, y = cast, color = Xist_ratio_class), size = outliersize) + 
  scale_color_manual(values = color_alleles) + 
  scale_y_continuous(breaks = seq(0, 800, 200), limits = c(0, 820)) +  
  scale_x_continuous(breaks = seq(0, 800, 200), limits = c(0, 820)) +  
  labs(x = expression(Spliced[chrX] ^ 'B6'),
       y = expression(Spliced[chrX] ^ 'Cast'),
       color = "") + 
  theme(legend.position = "top")
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "B_Xchr_spliced.pdf"))


# unspliced counts
sum_unspliced <- ddply(as_df[!as_df$Xist_ratio_class %in% excludegroup,], .variables = .(Time, Cell), summarize, 
             Xist_ratio_class = unique(Xist_ratio_class),
             b6 = sum(b6_intron[Chromosome %in% "X"]),
             cast = sum(cast_intron[Chromosome %in% "X"]))
sum_unspliced$day <- factor(paste0("Day ", as.numeric(gsub(sum_unspliced$Time, pattern = "h", replacement = ""))/24))

g <- sum_unspliced %>%
  ggplot() + 
  theme_bw() + theme1 + facet_grid(. ~ day) +
  geom_abline(slope = 1, intercept = 0, linetype = "dashed", size = linesize, alpha = hvalpha) + 
  geom_point(aes(x = b6, y = cast, color = Xist_ratio_class), size = outliersize) + 
  scale_color_manual(values = color_alleles) + 
  scale_y_continuous(breaks = seq(0, 200, 50), limits = c(0, 230)) +  
  scale_x_continuous(breaks = seq(0, 200, 50), limits = c(0, 230)) +  
  labs(x = expression(Unspliced[chrX] ^ 'B6'),
       y = expression(Unspliced[chrX] ^ 'Cast'),
       color = "") + 
  theme(legend.position = "top")
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "B_Xchr_unspliced.pdf"))
@

\subsection{C) XCI velocity}

\subsubsection{Load data and filter genes with low spliced or unspliced expression}
<<>>=
load(paste0(AS_path, "DGE_spliced_alltimes_Both.RData"))
features_gene <- c("chromosome", "strand", "symbol", "updated", "ensembl")
features_cell <- c("Time", "Cell", "Xist_ratio", "Xist_ratio_class", "Xchr_ratio", "Xchr_ratio_class", "sf_notX", "lib.size")

dge$samples$lib.size <- colSums(dge$counts)
dge$samples$Time <- paste0(dge$samples$time, "rs")
dge$samples$Cell <- gsub(rownames(dge$samples), pattern = "^[[:digit:]]+h_", replacement = "")

genefeatures <- dge$genes[, features_gene]
cellfeatures <- dge$samples[, features_cell]
cellfeatures$sf <- cellfeatures$sf_notX
cellfeatures$Xist_ratio <- as.numeric(cellfeatures$Xist_ratio)
cellfeatures$Xchr_ratio <- as.numeric(cellfeatures$Xchr_ratio)
cellfeatures$Xperc <- colSums(dge$counts[dge$genes$chromosome %in% "X",])/colSums(dge$counts)
cellfeatures$id <- rownames(cellfeatures)
cellfeatures$AXCR <- abs(cellfeatures$Xchr_ratio-0.5)

# count matrices: spliced and unspliced
load(paste0(AS_path, "DGE_spliced_alltimes_BL6.RData")); spliced_b6 <- dge
load(paste0(AS_path, "DGE_unspliced_alltimes_BL6.RData")); unspliced_b6 <- dge
load(paste0(AS_path, "DGE_spliced_alltimes_CastEiJ.RData")); spliced_cast <- dge
load(paste0(AS_path, "DGE_unspliced_alltimes_CastEiJ.RData")); unspliced_cast <- dge

spliced <- list(BL6 = spliced_b6$counts, CastEiJ = spliced_cast$counts)
unspliced <- list(BL6 = unspliced_b6$counts, CastEiJ = unspliced_cast$counts)
spliced$Both <- spliced$BL6 + spliced$CastEiJ
unspliced$Both <- unspliced$BL6 + unspliced$CastEiJ
cellfeatures$Xist <- spliced$Both["Xist",]
cellfeatures$Xist_ratio_correct <- cellfeatures$Xist_ratio
cellfeatures$Xist_ratio_correct[is.na(cellfeatures$Xist_ratio)|cellfeatures$Xist<5] <- 0.5
cellfeatures$Xist_ratio_correct <- abs(cellfeatures$Xist_ratio_correct-0.5)

### compute complete B6-ratio matrix for X-linked genes only
b6ratio <- spliced$BL6/(spliced$BL6 + spliced$CastEiJ)
b6ratio[is.na(b6ratio)] <- 0.5 # 0/0 ratios are set to 0.5
table(genefeatures$chromosome %in% "X")
cell_Xcor <- cor(b6ratio[genefeatures$chromosome %in% "X",])

### filter data
# gene filtering (on bothAS data)
rm_s <- rowMeans(spliced$Both); rm_u <- rowMeans(unspliced$Both)
summary(rm_s); summary(rm_u); plot(log10(rm_s), log10(rm_u))
keep <- (rm_s >= 0.5)&(rm_u >= 0.25); table(keep)
spliced_filt <- lapply(spliced, function(x) x[keep,]); unspliced_filt <- lapply(unspliced, function(x) x[keep,])

dge <- spliced_filt; save(dge, file = paste0(AS_path, "DGE_spliced_alltimes_filterASVelocity.RData"))
dge <- unspliced_filt; save(dge, file = paste0(AS_path, "DGE_unspliced_alltimes_filterASVelocity.RData"))

cells <- colnames(spliced_filt$Both)
keep_genes <- intersect(rownames(spliced_filt$Both), genefeatures$symbol)
genefeatures <- genefeatures[keep_genes,]
@

\subsubsection{Plot - Launch La Manno's function defining cell distance as B6-ratio}
<<>>=
emat <- spliced_filt$Both; nmat <- unspliced_filt$Both
celldist <- cell_Xcor
times <- strsplit2(rownames(celldist), split = "\\_")[,1]
for(i in 1:nrow(celldist)){
   celldist[i,][!times %in% times[i]] <- min(celldist[i,])
   min <- c(min, min(celldist[i,])); max <- c(max, max(celldist[i,]))
}
# adjust correlation to be a distance matrix to feed to velocyto.R::balanced_knn funct.
celldist_adj <- as.dist(1-celldist) 

# compute velocities
fit.quantile <- 0.025; kcells <- 20; mincor <- 0.05
arrow.scale=5; cell.alpha=0.4; cell.cex=1; fig.height=4; fig.width=4.5;
AS_vel <- gene.relative.velocity.estimates(emat, nmat, deltaT=1, kCells = kcells, cell.dist = celldist_adj,
                                           fit.quantile = fit.quantile, 
                                           min.nmat.emat.slope = mincor,
                                           min.nmat.emat.correlation = mincor, n.cores = 10)

# load B6 ratio matrix and subset to X-genes
isX <- as.character(genefeatures$chromosome[match(rownames(AS_vel$current), rownames(genefeatures))]) %in% "X"
Xgenes <- rownames(AS_vel$current)[isX]
x0 <- b6ratio[match(Xgenes, rownames(b6ratio)),]
x0.log <- x0
cent <- rowMeans(x0.log)

# PCA embedding
epc <- pcaMethods::pca(t(x0.log - cent), center = F, nPcs = length(cent))
epc@scores <- scale(epc@completeObs, scale = F, center = T) %*% epc@loadings
curr_pos <- epc@scores

# define embedding subsetting to X-genes and computing B6-ratio
neighbor_size <- 100; velocity_scale <- "sqrt"; arrow.scale <- 5; arrow.lwd <- 1
emb <- cbind(curr_pos[,1], curr_pos[,2]); rownames(emb) <- rownames(curr_pos)
m <- match(rownames(emb), cellfeatures$id)
cellfeatures$Xchr_ratio <- as.numeric(cellfeatures$Xchr_ratio)
cellfeatures$AXCR <- abs(cellfeatures$Xchr_ratio-0.5)

features <- c("Time", "Xchr_ratio", "Xist_ratio_class", "Xchr_ratio_class")
sinfo <- cellfeatures[match(rownames(emb), cellfeatures$id), features]

colors <- data.frame(sinfo)
colors$AXCR <- abs(colors$Xchr_ratio - 0.5)
x <- show.velocity.on.embedding.cor(emb, vel = AS_vel, n=neighbor_size, scale=velocity_scale, 
                                    cex=1.5, arrow.scale=arrow.scale, show.grid.flow=TRUE, 
                                    min.grid.cell.mass=5, grid.n=20,
                                    arrow.lwd=arrow.lwd, do.par=F, cell.border.alpha = 0.5,
                                    return.details = TRUE)

# include marker gene expression
x0 <- spliced$Both
els <- cellfeatures$sf*colSums(x0)
x0.log <- log10(t(t(x0)/els)*1e6+1)
markers <- c("Xist", "Nanog", "Dnmt3a", "Esrrb", "Tsix", "Pou5f1")
expr_markers <- x0.log[match(markers, rownames(x0.log)), ]
features <- c("Time", "Xist_ratio", "Xchr_ratio", "Xist_ratio_class", "Xchr_ratio_class")
sinfo <- cellfeatures[match(rownames(emb), cellfeatures$id), features]
pca_ext <- data.frame(pca1 = emb[,1], pca2 = emb[,2], 
                       sinfo, t(expr_markers))

# produce plot
arrowthick <- 4e-1; arrowidth <- 1e-1; arrowsharp <- 40
temp <- data.frame(emb, colors); gridvelo <- x$garrows
x$garrows <- data.frame(x$garrows)
x$garrows$dist <- sqrt((x$garrows$x0 - x$garrows$x1)^2 + (x$garrows$y0 - x$garrows$y1)^2)
x$garrows$arrowidth <- arrowidth*(x$garrows$dist/max(x$garrows$dist))
top_x <- max(temp[,1]); top_y <- max(temp[,2])

# plot
cols <- c(allele_colors["B6"], "white", allele_colors["Cast"])

g <- temp %>%
  ggplot() + 
  theme_bw() + theme1 + 
  geom_point(aes(x = X1, y = X2, fill = Xchr_ratio, color = Xchr_ratio), size = scattersize) + 
  geom_segment(data = data.frame(x$garrows), linejoin='mitre',
               aes(x = x0, y = y0, xend = x1, yend = y1), size = arrowthick, alpha = 3/5, color = "black",
               arrow = arrow(length = unit(x$garrows$arrowidth, "inches"), angle = arrowsharp)) + 
  scale_color_gradientn(colours = cols) +
  scale_fill_gradientn(colours = cols, breaks = c(0.2, 0.5, 0.8)) +
  labs(x = paste0("PCA 1 (", round(epc@R2[1]*100, digits = 1), "%)"),
       y = paste0("PCA 2 (", round(epc@R2[2]*100, digits = 1), "%)"),
       fill = expression("X Chromosome Ratio [XCR = "*B6[chrX]*"/("*B6[chrX]+Cast[chrX]*")]")) + 
  guides(color = FALSE) + theme(panel.background = element_rect(fill = "grey"))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "C_XCI_velocity.pdf"))
@

\subsection{D) XCI vs Xist ratio}

\subsubsection{Plot}
<<>>=
res$Day <- paste0("Day ", res$day)
exclude_less5XistUMI <- c("Xist Undetected", "Xist Low")

g <- res[!res$Xist_classification %in% exclude_less5XistUMI,] %>%
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~Day) + 
  geom_point(aes(x = Xist_ratio, y = XCI_ratio), size = outliersize) +  
  labs(x = expression("Xist Ratio Chromosome Ratio ["*B6[Xist]*"/("*B6[Xist]+Cast[Xist]*")]"),
       y = expression("X Chromosome Ratio [XCR = "*B6[chrX]*"/("*B6[chrX]+Cast[chrX]*")]")) + 
  scale_y_continuous(breaks = c(0, 0.5, 1), limits = c(0,1)) + 
  scale_x_continuous(breaks = c(0, 0.5, 1), limits = c(0,1))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "D_XchrRatio_XistRatio.pdf"))
@

\subsection{E) X:A in MA-B6, MA-Cast, BA, Xist-Undetected cells}

\subsubsection{Load data}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData")); nboot <- 1e3
dge <- dge[, dge$samples$group %in% "XX"]
dge$samples$Xist_classification <- revalue(factor(dge$samples$Xist_ratio_class), 
                                           c("Undetected" = "Xist Undetected", "Low-Xist" = "Xist Low",
                                             "Middle" = "Intermediate Ratio", "Xist_BA" = "Xist-BA",
                                             "BL6_MA" = "Xist-MA (Xi=B6)", "Cast_MA" = "Xist-MA (Xi=Cast)"))
lev_ref <- c("Xist Undetected", "Xist Low", "Intermediate Ratio", "Xist-BA", "Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)")
dge$samples$Xist_classification <- factor(dge$samples$Xist_classification, levels = lev_ref)

xcounts <- dge$counts[dge$genes$chromosome %in% "X",]; autcounts <- dge$counts[dge$genes$chromosome %in% c(1:19),]
n_xlinked <- nrow(xcounts); n_autlinked <- nrow(autcounts)

temp_boot <- c()
for (j in seq_len(nboot)) {
  boot <- sample(x = seq_len(n_autlinked), size = n_xlinked, replace = TRUE)
  value <- colSums(xcounts)/colSums(autcounts[boot,])
  temp_boot <- rbind(temp_boot, value)
}
x2a_boot <- apply(temp_boot, 2, median)
x2a <- data.frame(Time = dge$samples$time,
                  id = colnames(dge),
                  xist_classification = dge$samples$Xist_classification, 
                  x2a = x2a_boot)
summ_cell <- ddply(x2a, .variables = .(Time, xist_classification), summarize, n = length(Time))
features <- c("id", "Time", "xist_classification", "x2a")
total <- rbind(data.frame(x2a[, features], Genes = "Per time & Bootstrap"))
total$Xist <- total$xist_classification
summ_cell$Xist <- summ_cell$xist_classification

total$time <- gsub(total$Time, pattern = "h", replacement = "")
summ_cell$time <- gsub(summ_cell$Time, pattern = "h", replacement = "")
@

\subsubsection{Plot}
<<>>=
# selected Xist groups only
restr_lev <- c("Xist Undetected", "Xist-BA", "Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)")
total$day <- factor(as.numeric(gsub(total$Time, pattern = "h", replacement = ""))/24)
summ_cell$day <- factor(as.numeric(gsub(summ_cell$Time, pattern = "h", replacement = ""))/24)

# remove BA cells at d4 since there is a single cell
total <- total[!(total$day == 4 & total$Xist %in% "Xist-BA"),]
summ_cell <- summ_cell[!(summ_cell$day == 4 & summ_cell$Xist %in% "Xist-BA"),]

# numbers
g <- total[(total$Genes %in% "Per time & Bootstrap") & (total$Xist %in% restr_lev),] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = seq(0.5, 2, by = 0.5), linetype = "dashed", alpha = hvalpha, size = linesize) + 
  scale_y_continuous(breaks = seq(0.5, 2, by = 0.5), limits = c(0.25, 2.1)) + 
  geom_boxplot(aes(x = day, y = x2a, color = Xist), outlier.shape = NA, size = violin_box_size) + 
  geom_jitter(aes(x = day, y = x2a, color = Xist), fill = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .25, dodge.width = 0.75), 
              size = small_scattersize, show.legend = FALSE) +
  scale_color_manual(values = color_alleles) + 
  geom_text(summ_cell[summ_cell$Xist %in% restr_lev,],
            mapping = aes(x = day, y = Inf, label = paste0("n = ", n), group = Xist),
            position=position_dodge(.75), angle = 90, alpha = 1, size = geomtext_size, hjust=-0.5) +
  coord_cartesian(clip = "off") +
  xlab("Time [days]") + ylab("X:A ratio") + labs(fill = "")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "E_X2A_XistGroup.pdf"))
@

\subsection{Additional measures}

\subsubsection{WMW: compare X:A in Xist-BA vs Xist-MA cells}
<<>>=
g1 <- "Xist-BA"; g2 <- c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)")
n_cells <- ddply(total[(total$Genes %in% "Per time & Bootstrap") & (!total$Xist %in% "XO cells"),], .variables = .(Time),
                   summarize, 
                   XistPos = sum(Xist %in% g1), XistNeg = sum(Xist %in% g2))

test <- ddply(total[(total$Genes %in% "Per time & Bootstrap") & (!total$Xist %in% "XO cells") & (total$Time %in% c("24h", "48h", "72h")),], 
                   .variables = .(Time), summarize, 
                   XistBA = sum(Xist %in% g1), XistBA_medX2A = median(x2a[Xist %in% g1]),
                   XistMA = sum(Xist %in% g2), XistMA_medX2A = median(x2a[Xist %in% g2]),
                   pvalue_wmw = wilcox.test(x = x2a[Xist %in% g1], y = x2a[Xist %in% g2])$p.value)
test$fdr <- p.adjust(test$pvalue_wmw, method = "BH"); test
@


\clearpage


\section{Figure 5: Gene and allele specific silencing analyses}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig5_GeneAlleleSpecificSilencing/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{A) Box plot over time with Xi/Xa ratio for MA-B6 and MA-Cast cells}

\subsubsection{Load data}
<<>>=
# compute Xi/Xa ratios for Xist-MA cells only
ma <- res[res$Xist_classification %in% c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"),]
ma$XiXaratio <- ma$b6_X/ma$cast_X
w <- ma$Xist_classification == "Xist-MA (Xi=Cast)"
ma$XiXaratio[w] <- 1/ma$XiXaratio[w]
ma$day <- gsub(ma$day, pattern = "Day ", replacement = "")

# ncells
ncells <- ma[!ma$day %in% "0",] %>% 
  dplyr::group_by(day, Xist_classification) %>%
  dplyr::summarise(n = length(Time))

# wilcoxon mann whitney test
test <- ma[!ma$day %in% "0",] %>% 
  dplyr::group_by(day) %>%
  dplyr::summarise(n = length(Time),
                   ma_b6 = sum(Xist_classification == "Xist-MA (Xi=B6)"),
                   ma_cast = sum(Xist_classification == "Xist-MA (Xi=Cast)"),
                   pvalue_wmw = wilcox.test(x = log2(XiXaratio[Xist_classification == "Xist-MA (Xi=B6)"]), 
                                            y = log2(XiXaratio[Xist_classification == "Xist-MA (Xi=Cast)"]))$p.value
                   )
test$fdr <- signif(p.adjust(test$pvalue_wmw, method = "BH"), digits = 3)
@

\subsubsection{Plot}
<<>>=
g <- ma[!ma$day %in% "0",] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_boxplot(aes(x = day, y = log2(XiXaratio), color = Xist_classification), outlier.shape = NA, size = violin_box_size) + 
  geom_jitter(aes(x = day, y = log2(XiXaratio), color = Xist_classification), fill = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .25, dodge.width = 0.75), 
              size = small_scattersize, show.legend = FALSE) +
  scale_color_manual(values = color_alleles) + 
  geom_text(data = test, aes(x = day, y = 2.25, label = formatC(pvalue_wmw, digits = 1)), 
            size = geomtext_size, angle = 0) +
  geom_text(data = ncells,
            mapping = aes(x = day, y = Inf, label = paste0("n = ", n), group = Xist_classification),
            position=position_dodge(.75), angle = 90, alpha = 1, size = geomtext_size, hjust = -0.5) +
  scale_y_continuous(limits = c(-5, 3), breaks = seq(-5, 2.5, by = 2.5)) +
  coord_cartesian(clip = "off") + 
  labs(x = "Time [days]", y = expression(log[2]*"("*X[i.chrX]*"/"*X[a.chrX]*")"), color = "")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "A_XiXaRatio_XistMA.pdf"))
@

\subsection{B) schematic of XCI time}

\subsection{Cpre) Robustness analysis}

\subsubsection{Define output folder}
<<>>=
robpath <- paste0(figpath, "robustness/")
dir.create(path = robpath, showWarnings = FALSE, recursive = TRUE)
@

\subsubsection{Load function}
<<>>=
offset_XiXa <- 0.1
mincells <- 5; minbin <- 5; mincount = 30; nbins = 7; minsilencing_perc <- 10; mincount_cellfit_bin <- 5
mincount_cellfit <- 10; mincell_cellfit <- 10
XistUndTime <- "0hrs"; XistUnd_XCRthr_low <- 0.4; XistUnd_XCRthr_high <- 0.6

XiXa_metacell_ratio_final <- function(x = df_sk, XistMAgroup = c("BL6_MA", "Cast_MA"), idplot = "B6", useCounts = TRUE,
                                      nbins = 5, mincount = 20, mincells = 5, includeXistUnd_firstbin = TRUE,
                                      offset_XiXa = 0.1, logXiXa = TRUE, #XiXa computing
                                      bsl_count = TRUE, XistUnd_XCRthr_low = 0.4, XistUnd_XCRthr_high = 0.6, XistUndTime = "0hrs", 
                                      outpath = report_path, kseed = 0, kiter = 10^5, minbin = 3,
                                      normalize2baseline = TRUE, mincount_cellfit = 5, mincell_cellfit = 10, mincount_cellfit_bin=5,
                                      percentageXinactive = TRUE, equallysized = TRUE, minsilencing_perc = 10, zeroIntercept = FALSE,
                                      weighted = TRUE){
  
  print(paste0("0) subset to Xist-MA cells only & define inactive counts..."))
  id <- paste0(x$Time, "_", x$Cell)
  temp <- data.frame(id, x)
  data <- temp[temp$Xist %in% XistMAgroup,]
  data <- data[data$both > 0,]
  
  print(paste0("0bis) compute X silencing percentage..."))
  data <- data[!data$Gene %in% c("Xist"),] %>% #don't include Xist in XCR
    dplyr::group_by(id) %>%
    dplyr::mutate(b6_X = sum(b6[Chromosome == "X"]),
                  cast_X = sum(cast[Chromosome == "X"]))
  data$AXCR <- (1-((data$b6_X + offset_XiXa)/(data$cast_X + offset_XiXa)))*100
  data$AXCR[data$Xist == "Cast_MA"] <- (1-((data$cast_X[data$Xist == "Cast_MA"] + offset_XiXa)/(data$b6_X[data$Xist == "Cast_MA"] + offset_XiXa)))*100
  
  print(paste0("0ter) exclude cells with silencing below ", minsilencing_perc, "%..."))
  data <- data[data$AXCR >= minsilencing_perc,]
  
  print(paste0("0quat) breaks for percentage of silencing"))
  if(!equallysized){
    break_XCR <- seq(0, 100, length = nbins+1)
    levels_bin <- levels(cut(seq(0, 100, by = 1), breaks = break_XCR, include.lowest = TRUE))
    data$bin_XCR <- cut(data$AXCR, breaks = break_XCR, include.lowest = TRUE)
  }else{
    data$bin_XCR <- quantileCut(x = data$AXCR, n = nbins)
    levels_bin <- levels(data$bin_XCR)
  }
  
  print(paste0("1) define metacell group based on nbins and AXCR and store # of cells..."))
  data <- ddply(data, .variables = .(bin_XCR), transform, bin_ncells = length(unique(id)))
  d1 <- daply(data, .variables = .(Time, bin_XCR), summarize, n = length(unique(id))); print(d1)
  d2 <- ddply(data, .variables = .(bin_XCR), summarize, n = length(unique(id))); print(d2)
  
  print(paste0("2) Define active and inactive allele..."))
  data$inactive_count <- data$b6*I(data$Xist == "BL6_MA") + data$cast*I(data$Xist == "Cast_MA")
  data$active_count <- data$cast*I(data$Xist == "BL6_MA") + data$b6*I(data$Xist == "Cast_MA")
  
  print(paste0("3) compute bins' ratios and XT values, store # cells, and filter out metacell if too small..."))
  data_cell <- data
  data <- data %>%
    dplyr::group_by(Xist, bin_XCR, Gene) %>%
    dplyr::summarise(chr = unique(Chromosome),
                     ncells = length(unique(id)),
                     sumXi_count = sum(inactive_count),
                     sumXa_count = sum(active_count)) %>%
    dplyr::group_by(Xist, bin_XCR) %>%
    dplyr::mutate(sumXi_X = sum(sumXi_count[chr=="X"]),
                  sumXa_X = sum(sumXa_count[chr=="X"]))
  data$AXCR <- (1-((data$sumXi_X + offset_XiXa)/(data$sumXa_X + offset_XiXa)))*100
  data$XiXa <- (data$sumXi_count + offset_XiXa)/(data$sumXa_count + offset_XiXa)
  
  print(paste0("4) Filter out gene expression defined by few counts, compute bins' Xi/Xa and XCR values..."))
  condition <- ((data$sumXi_count + data$sumXa_count) >= mincount) & (data$ncells >= mincells)
  data_filt <- data[condition,]
  
  print(paste0("5) Store the baseline and compute Xi/Xa gene-skewing..."))
  bsl <- temp[(temp$Xist %in% "Undetected") & 
              (temp$Time %in% XistUndTime) & 
              (temp$XCR >= XistUnd_XCRthr_low) & 
              (temp$XCR <= XistUnd_XCRthr_high),]
  bsl <- bsl[(bsl$b6 + bsl$cast) > 0,]
  
  baseline <- bsl %>% 
    dplyr::group_by(Gene) %>%
    dplyr::summarise(n = length(unique(id)),
                    sum_b6_count = sum(b6), 
                    sum_cast_count = sum(cast))
  baseline$b6cast_ratio <- (baseline$sum_b6_count + offset_XiXa)/(baseline$sum_cast_count + offset_XiXa)
  condition <- ((baseline$sum_b6_count + baseline$sum_cast_count) >= mincount) & (baseline$n >= mincells); table(condition)
  baseline$b6cast_ratio[!condition] <- NA
  
  print(paste0("6) normalize XiXa ratios to baseline..."))
  m <- match(data_filt$Gene, baseline$Gene); table(is.na(m))
  data_filt$baseline_XiXa <- baseline$b6cast_ratio[m]
  data_filt <- data_filt[!is.na(data_filt$baseline_XiXa),]
  data_filt$baseline_XiXa[data_filt$Xist == "Cast_MA"] <- 1/data_filt$baseline_XiXa[data_filt$Xist == "Cast_MA"]
  data_filt$XiXa_ratio_XistUnd <- data_filt$XiXa/data_filt$baseline_XiXa
  
  ### single cell
  print(paste0("6bis) normalize cell-wise XiXa ratios to baseline (only cells with UMI>", mincount_cellfit, "..."))
  data_cell <- data_cell[data_cell$both>mincount_cellfit_bin,]
  data_cell$XiXa <- (data_cell$inactive_count + offset_XiXa)/(data_cell$active_count + offset_XiXa)
  m <- match(data_cell$Gene, baseline$Gene); table(is.na(m))
  data_cell$baseline_XiXa <- baseline$b6cast_ratio[m]
  data_cell <- data_cell[!is.na(data_cell$baseline_XiXa),]
  data_cell$baseline_XiXa[data_cell$Xist == "Cast_MA"] <- 1/data_cell$baseline_XiXa[data_cell$Xist == "Cast_MA"]
  data_cell$XiXa_ratio_XistUnd <- data_cell$XiXa/data_cell$baseline_XiXa
  
  print(paste0("6ter) filter cell-wise values separately"))
  both_genes <- data_cell %>% dplyr::group_by(Gene) %>% dplyr::summarise(n = length(unique(Xist)))
  data_cell_fit <- data_cell[data_cell$Gene %in% as.character(both_genes$Gene[both_genes$n==2]),]
  select_genes <- data_cell_fit %>% 
    dplyr::group_by(Xist, Gene) %>% dplyr::summarise(ncells = sum(both>mincount_cellfit)) %>%
    dplyr::group_by(Gene) %>% dplyr::summarise(n_b6 = ncells[Xist=="BL6_MA"], n_cast = ncells[Xist=="Cast_MA"])
  which_genes <- as.character(select_genes$Gene[(select_genes$n_b6 >= mincell_cellfit)&(select_genes$n_cast >= mincell_cellfit)])
  data_cell_fit <- data_cell_fit[(data_cell_fit$Gene %in% which_genes)&(data_cell_fit$both > mincount_cellfit),]
  ### single cell
  
  print(paste0("7) take log ratios"))
  data_filt$logXiXa <- log2(data_filt$XiXa_ratio_XistUnd)
  data_cell_fit$logXiXa <- log2(data_cell_fit$XiXa_ratio_XistUnd)
  
  print(paste0("7bis) Remove genes that don't have at least ", minbin, " observations per Xist-MA group..."))
  data_filt <- data.frame(data_filt)
  repres <- data_filt %>%
    dplyr::group_by(Gene) %>%
    dplyr::summarise(n_b6 = length(unique(bin_XCR[Xist == "BL6_MA"])), n_cast = length(unique(bin_XCR[Xist == "Cast_MA"])))
  
  repres$keep_b6 <- repres$n_b6 >= minbin; print(table(minbin_B6 = repres$keep_b6))
  repres$keep_cast <- repres$n_cast >= minbin; print(table(minbin_Cast = repres$keep_cast))
  repres$keep <- repres$keep_b6 & repres$keep_cast; print(table(minbin_Both = repres$keep))
  
  test_b6 <- as.character(repres$Gene[repres$keep_b6]); test_cast <- as.character(repres$Gene[repres$keep_cast])
  test_both <- intersect(test_b6, test_cast)
  res_either <- repres[repres$keep_b6 | repres$keep_cast, ]; res_keep <- repres[repres$keep,]
  data_filt <- data_filt[data_filt$Gene %in% as.character(unique(res_either$Gene)),]
  
  
  print(paste0("8) Fit linear model with free intercept for each gene separating fits for Xist-MA Cast/B6 cells..."))
  allgenes <- unique(c(as.character(data_filt$Gene), as.character(data_cell_fit$Gene)))
  # allgenes <- unique(as.character(unique(res_either$Gene))); common_genes <- unique(as.character(res_keep$Gene))
  
  model_fit <- model_fit_sc <- c()
  if(zeroIntercept){
    
    for(i in seq_len(length(allgenes))){
      gene <- allgenes[i]
      
      temp <- data_filt[data_filt$Gene %in% gene,]
      temp$w <- temp$sumXa_count + temp$sumXi_count
      
      temp_sc <- data_cell_fit[data_cell_fit$Gene %in% gene,]
      temp_sc$w <- temp_sc$inactive_count + temp_sc$active_count
      
      # bin analysis
      if((length(unique(temp$Xist))==2) & (gene %in% test_both)){
        
        if(weighted){
          
          complete <- lm(logXiXa ~ 0 + AXCR + AXCR:Xist, weights = w, data = temp)
          oneslope <- lm(logXiXa ~ 0 + AXCR, weights = w, data = temp)
          
          int_b6 <- 0; slope_b6 <- sum(complete$coefficients[c("AXCR", "AXCR:XistBL6_MA")])
          int_cast <- 0; slope_cast <- complete$coefficients[c("AXCR")]
          
          anv <- anova(oneslope, complete)
          slope_pvalue <- anv$`Pr(>F)`[2]
          
        }else{
          complete <- lm(logXiXa ~ 0 + AXCR + AXCR:Xist, data = temp)
          oneslope <- lm(logXiXa ~ 0 + AXCR, data = temp)
          
          int_b6 <- 0; slope_b6 <- sum(complete$coefficients[c("AXCR", "AXCR:XistBL6_MA")])
          int_cast <- 0; slope_cast <- complete$coefficients[c("AXCR")]
          
          anv <- anova(oneslope, complete)
          slope_pvalue <- anv$`Pr(>F)`[2]
        }
      }else{
        int_cast <- int_b6 <- slope_cast <- slope_b6 <- slope_pvalue <- NA
      }
      
      #single allele analysis
      
      # test b6
      if(gene %in% test_b6){
        if(weighted){
          fit <- lm(logXiXa ~ 0 + AXCR, weights = w, data = temp[temp$Xist == "BL6_MA",])
        }else{
          fit <- lm(logXiXa ~ 0 + AXCR, data = temp[temp$Xist == "BL6_MA",])
        }
        int_b6 <- 0; slope_b6 <- fit$coefficients["AXCR"]; bic_b6 <- BIC(fit)
      }else{
        int_b6 <- slope_b6 <- bic_b6 <- NA
      }
      
      # test cast
      if(gene %in% test_cast){
        if(weighted){
          fit <- lm(logXiXa ~ 0 + AXCR, weights = w, data = temp[temp$Xist == "Cast_MA",])
        }else{
          fit <- lm(logXiXa ~ 0 + AXCR, data = temp[temp$Xist == "Cast_MA",])
        }
        int_cast <- 0; slope_cast <- fit$coefficients["AXCR"]; bic_cast <- BIC(fit)
      }else{
        int_cast <- slope_cast <- bic_cast <- NA
      }
      
      # single cell analysis
      if(length(unique(temp_sc$Xist))==2){
        
        if(weighted){
          
          complete <- lm(logXiXa ~ 0 + AXCR + AXCR:Xist, weights = w, data = temp_sc)
          oneslope <- lm(logXiXa ~ 0 + AXCR, weights = w, data = temp_sc)
          
          int_b6_sc <- 0; slope_b6_sc <- sum(complete$coefficients[c("AXCR", "AXCR:XistBL6_MA")])
          int_cast_sc <- 0; slope_cast_sc <- complete$coefficients[c("AXCR")]
          
          anv <- anova(oneslope, complete)
          slope_pvalue_sc <- anv$`Pr(>F)`[2]
          
        }else{
          complete <- lm(logXiXa ~ 0 + AXCR + AXCR:Xist, data = temp_sc)
          oneslope <- lm(logXiXa ~ 0 + AXCR, data = temp_sc)
          
          int_b6_sc <- 0; slope_b6_sc <- sum(complete$coefficients[c("AXCR", "AXCR:XistBL6_MA")])
          int_cast_sc <- 0; slope_cast_sc <- complete$coefficients[c("AXCR")]
          
          anv <- anova(oneslope, complete)
          slope_pvalue_sc <- anv$`Pr(>F)`[2]
        }
      }else{
        int_cast_sc <- int_b6_sc <- slope_cast_sc <- slope_b6_sc <- slope_pvalue_sc <- NA
      }
      
      # store results
      model_fit <- rbind(model_fit, 
                       data.frame(Gene = gene, 
                                  int_b6 = int_b6, slope_b6 = slope_b6,
                                  int_cast = int_cast, slope_cast = slope_cast,
                                  slope_pvalue = slope_pvalue))
      model_fit_sc <- rbind(model_fit_sc, 
                       data.frame(Gene = gene, 
                                  int_b6 = int_b6_sc, slope_b6 = slope_b6_sc,
                                  int_cast = int_cast_sc, slope_cast = slope_cast_sc,
                                  slope_pvalue = slope_pvalue_sc))
    }
    
  }else{
    
    for(i in seq_len(length(allgenes))){
      gene <- allgenes[i]
      
      temp <- data_filt[data_filt$Gene %in% gene,]
      temp$w <- temp$sumXa_count + temp$sumXi_count
      
      temp_sc <- data_cell_fit[data_cell_fit$Gene %in% gene,]
      temp_sc$w <- temp_sc$inactive_count + temp_sc$active_count
      
      # bin analysis
      if(length(unique(temp$Xist))==2){
        
        if(weighted){
          
          complete <- lm(logXiXa ~ AXCR*Xist, weights = w, data = temp)
          oneslope <- lm(logXiXa ~ AXCR, weights = w, data = temp)
          
          int_b6 <- complete$coefficients["(Intercept)"]
          slope_b6 <- complete$coefficients["AXCR"] 
          int_cast <- sum(complete$coefficients[c("(Intercept)", "XistCast_MA")])
          slope_cast <- sum(complete$coefficients[c("AXCR", "AXCR:XistCast_MA")])
          anv <- anova(oneslope, complete)
          slope_pvalue <- anv$`Pr(>F)`[2]
          
        }else{
          complete <- lm(logXiXa ~ AXCR*Xist, data = temp)
          oneslope <- lm(logXiXa ~ AXCR, data = temp)
          
          int_b6 <- complete$coefficients["(Intercept)"]
          slope_b6 <- complete$coefficients["AXCR"] 
          int_cast <- sum(complete$coefficients[c("(Intercept)", "XistCast_MA")])
          slope_cast <- sum(complete$coefficients[c("AXCR", "AXCR:XistCast_MA")])
          anv <- anova(oneslope, complete)
          slope_pvalue <- anv$`Pr(>F)`[2]
        }
      }else{
        int_cast <- int_b6 <- slope_cast <- slope_b6 <- slope_pvalue <- NA
      }
      
      #single allele analysis
      
      # test b6
      if(gene %in% test_b6){
        if(weighted){
          fit <- lm(logXiXa ~ AXCR, weights = w, data = temp[temp$Xist == "BL6_MA",])
        }else{
          fit <- lm(logXiXa ~ AXCR, data = temp[temp$Xist == "BL6_MA",])
        }
        int_b6 <- fit$coefficient["(Intercept)"]; slope_b6 <- fit$coefficients["AXCR"]; bic_b6 <- BIC(fit)
      }else{
        int_b6 <- slope_b6 <- bic_b6 <- NA
      }
      
      # test cast
      if(gene %in% test_cast){
        if(weighted){
          fit <- lm(logXiXa ~ AXCR, weights = w, data = temp[temp$Xist == "Cast_MA",])
        }else{
          fit <- lm(logXiXa ~ AXCR, data = temp[temp$Xist == "Cast_MA",])
        }
        int_cast <- fit$coefficient["(Intercept)"]; slope_cast <- fit$coefficients["AXCR"]; bic_cast <- BIC(fit)
      }else{
        int_cast <- slope_cast <- bic_cast <- NA
      }
      
      # single cell analysis
      if(length(unique(temp_sc$Xist))==2){
        
        if(weighted){
          
          complete <- lm(logXiXa ~ AXCR*Xist, weights = w, data = temp_sc)
          oneslope <- lm(logXiXa ~ AXCR, weights = w, data = temp_sc)
          
          int_b6_sc <- complete$coefficients["(Intercept)"]
          slope_b6_sc <- complete$coefficients["AXCR"] 
          int_cast_sc <- sum(complete$coefficients[c("(Intercept)", "XistCast_MA")])
          slope_cast_sc <- sum(complete$coefficients[c("AXCR", "AXCR:XistCast_MA")])
          anv <- anova(oneslope, complete)
          slope_pvalue_sc <- anv$`Pr(>F)`[2]
          
        }else{
          complete <- lm(logXiXa ~ AXCR*Xist, data = temp_sc)
          oneslope <- lm(logXiXa ~ AXCR, data = temp_sc)
          
          int_b6_sc <- complete$coefficients["(Intercept)"]
          slope_b6_sc <- complete$coefficients["AXCR"] 
          int_cast_sc <- sum(complete$coefficients[c("(Intercept)", "XistCast_MA")])
          slope_cast_sc <- sum(complete$coefficients[c("AXCR", "AXCR:XistCast_MA")])
          anv <- anova(oneslope, complete)
          slope_pvalue_sc <- anv$`Pr(>F)`[2]
        }
      }else{
        int_cast_sc <- int_b6_sc <- slope_cast_sc <- slope_b6_sc <- slope_pvalue_sc <- NA
      }
      
      # store results
      model_fit <- rbind(model_fit, 
                       data.frame(Gene = gene, 
                                  int_b6 = int_b6, slope_b6 = slope_b6,
                                  int_cast = int_cast, slope_cast = slope_cast,
                                  slope_pvalue = slope_pvalue))
      model_fit_sc <- rbind(model_fit_sc, 
                       data.frame(Gene = gene, 
                                  int_b6 = int_b6_sc, slope_b6 = slope_b6_sc,
                                  int_cast = int_cast_sc, slope_cast = slope_cast_sc,
                                  slope_pvalue = slope_pvalue_sc))
    }
    
  }
  model_fit <- model_fit[order(model_fit$slope_pvalue, decreasing = FALSE),]
  model_fit$FDR <- p.adjust(model_fit$slope_pvalue, method = "BH")
  
  model_fit_sc <- model_fit_sc[order(model_fit_sc$slope_pvalue, decreasing = FALSE),]
  model_fit_sc$FDR <- p.adjust(model_fit_sc$slope_pvalue, method = "BH")
  
  print(paste0("9) Return results..."))
  return <- list(model_fit = model_fit,
                 model_fit_sc = model_fit_sc,
                 baseline = baseline, 
                 data = data_filt,
                 data_cell = data_cell, 
                 data_cell_fit = data_cell_fit)
  return(return)
}
@

\subsubsection{Load data}
<<>>=
load(paste0(AS_path, "DGE_complete_alltimes_BL6.RData")); b6 <- dge
load(paste0(AS_path, "DGE_complete_alltimes_CastEiJ.RData")); cast <- dge

df_as <- data.frame(Time = rep(b6$samples$time, each = nrow(b6)), 
                    Cell = rep(colnames(b6), each = nrow(b6)), 
                    Xist = rep(b6$samples$Xist_ratio_class, each = nrow(b6)),
                    Xchr = rep(b6$samples$Xchr_ratio_class, each = nrow(b6)),
                    B6_els = rep(b6$samples$eff_libsize_notX, each = nrow(b6)),
                    Cast_els = rep(cast$samples$eff_libsize_notX, each = nrow(cast)),
                    Gene = rep(rownames(b6), times = ncol(b6)),
                    Chromosome = rep(b6$genes$chromosome, times = ncol(b6)),
                    b6 = c(b6$counts), cast = c(cast$counts))
df_as$Time <- gsub(df_as$Time, pattern = "h", replacement = "hrs")
df_as$both <- df_as$b6 + df_as$cast
df_sk <- ddply(df_as[df_as$Chromosome == "X",], .variables = .(Time, Cell), transform, 
               Xist = unique(Xist),
               Xist_b6 = b6[Gene == "Xist"],
               Xist_b6_cpm = (b6[Gene == "Xist"]/unique(B6_els))*1e6,
               Xist_cast = cast[Gene == "Xist"],
               Xist_cast_cpm = (cast[Gene == "Xist"]/unique(Cast_els))*1e6,
               b6_X = sum(b6[Gene != "Xist"]),
               cast_X = sum(cast[Gene != "Xist"])
)
df_sk$XCR <- df_sk$b6_X/(df_sk$b6_X + df_sk$cast_X)
@

\subsubsection{Compare fits - bin analysis}
<<>>=
mincount_range <- seq(20, 40, by = 5)
nbins_range <- seq(5, 25, by = 5)

sigthreshold <- 0.1
mincells <- 5; minbin <- 5; minsilencing_perc <- 10; mincount_cellfit_bin <- 5
mincount_cellfit <- 5; mincell_cellfit <- 10
XistUndTime <- "0hrs"; XistUnd_XCRthr_low <- 0.4; XistUnd_XCRthr_high <- 0.6

### WLS
equallysized <- TRUE; weighted <- TRUE
results <- results_sc <- results_nointercept <- results_nointercept_sc <- c()
for(i in 1:length(mincount_range)){
  mincount <- mincount_range[i]
  
  for(j in 1:length(nbins_range)){
    nbins <- nbins_range[j]
    
    # with intercept
    fit <- XiXa_metacell_ratio_final(x = df_sk, mincount = mincount, nbins = nbins, minbin = minbin, mincells = mincells,
                                     minsilencing_perc = minsilencing_perc, mincount_cellfit_bin = mincount_cellfit_bin,
                                     mincount_cellfit = mincount_cellfit, mincell_cellfit = mincell_cellfit,
                                     equallysized = equallysized, zeroIntercept = FALSE, weighted = weighted)
    features <- c("Gene", "slope_b6", "slope_cast", "FDR")
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit[, features])
    results <- rbind(results, temp)
    
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit_sc[, features])
    results_sc <- rbind(results_sc, temp)
    
    
    # no intercept
    fit <- XiXa_metacell_ratio_final(x = df_sk, mincount = mincount, nbins = nbins, minbin = minbin, mincells = mincells,
                                     minsilencing_perc = minsilencing_perc, mincount_cellfit_bin = mincount_cellfit_bin,
                                     mincount_cellfit = mincount_cellfit, mincell_cellfit = mincell_cellfit,
                                     equallysized = equallysized, zeroIntercept = TRUE, weighted = weighted)
    features <- c("Gene", "slope_b6", "slope_cast", "FDR")
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit[, features])
    results_nointercept <- rbind(results_nointercept, temp)
    
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit_sc[, features])
    results_nointercept_sc <- rbind(results_nointercept_sc, temp)
  }
}
robustness <- list(free_intercept = results,
                   free_intercept_sc = results_sc,
                   no_intercept = results_nointercept,
                   no_intercept_sc = results_nointercept_sc)
save(robustness, file = paste0(robpath, "robustness_bins.RData"))

x <- robustness$no_intercept[robustness$no_intercept$mincount == 30 & robustness$no_intercept$nbins == 10,]
x <- x[rowSums(is.na(x))==0,]
x[x$FDR<0.1,]; dim(x)

x <- robustness$no_intercept_sc[robustness$no_intercept_sc$mincount == 30 & robustness$no_intercept_sc$nbins == 10,]
x <- x[rowSums(is.na(x))==0,]
x[x$FDR<0.1,]; dim(x)


### OLS
results_unw <- results_nointercept_unw <- results_sc_unw <- results_nointercept_sc_unw <- c()
equallysized <- TRUE; weighted <- FALSE
for(i in 1:length(mincount_range)){
  mincount <- mincount_range[i]
  
  for(j in 1:length(nbins_range)){
    nbins <- nbins_range[j]
    
    # with intercept
    fit <- XiXa_metacell_ratio_final(x = df_sk, mincount = mincount, nbins = nbins, minbin = minbin, mincells = mincells,
                                     minsilencing_perc = minsilencing_perc, mincount_cellfit_bin = mincount_cellfit_bin,
                                     mincount_cellfit = mincount_cellfit, mincell_cellfit = mincell_cellfit,
                                     equallysized = equallysized, zeroIntercept = FALSE, weighted = weighted)
    features <- c("Gene", "slope_b6", "slope_cast", "FDR")
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit[, features])
    results_unw <- rbind(results_unw, temp)
    
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit_sc[, features])
    results_sc_unw <- rbind(results_sc_unw, temp)
    
    
    # no intercept
    fit <- XiXa_metacell_ratio_final(x = df_sk, mincount = mincount, nbins = nbins, minbin = minbin, mincells = mincells,
                                     minsilencing_perc = minsilencing_perc, mincount_cellfit_bin = mincount_cellfit_bin,
                                     mincount_cellfit = mincount_cellfit, mincell_cellfit = mincell_cellfit,
                                    equallysized = equallysized, zeroIntercept = TRUE, weighted = weighted)
    features <- c("Gene", "slope_b6", "slope_cast", "FDR")
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit[, features])
    results_nointercept_unw <- rbind(results_nointercept_unw, temp)
    
    temp <- data.frame(mincount = mincount, nbins = nbins, fit$model_fit_sc[, features])
    results_nointercept_sc_unw <- rbind(results_nointercept_sc_unw, temp)
  }
}
robustness_unw <- list(free_intercept = results_unw,
                   free_intercept_sc = results_sc_unw,
                   no_intercept = results_nointercept_unw,
                   no_intercept_sc = results_nointercept_sc_unw)
save(robustness_unw, file = paste0(robpath, "robustness_bins_unw.RData"))

x <- robustness_unw$no_intercept[robustness_unw$no_intercept$mincount == 30 & robustness_unw$no_intercept$nbins == 10,]
x <- x[rowSums(is.na(x))==0,]
x[x$FDR<0.1,]; dim(x)

x <- robustness_unw$no_intercept_sc[robustness_unw$no_intercept_sc$mincount == 30 & robustness_unw$no_intercept_sc$nbins == 10,]
x <- x[rowSums(is.na(x))==0,]
x[x$FDR<0.1,]; dim(x)


### PLOTS
d <- list(ZeroInt_Weighted = robustness$no_intercept,
          ZeroInt_Unweighted = robustness_unw$no_intercept)
sigthreshold <- 0.05

for(i in 1:length(d)){
  results <- d[[i]]; id <- names(d)[i]
  
  # 1) ngenes tested
  ngenes_tested <- results %>%
  dplyr::group_by(mincount, nbins) %>%
  dplyr::summarise(n_b6 = sum(!is.na(slope_b6)),
                   n_cast = sum(!is.na(slope_cast)),
                   n_both = sum(!is.na(FDR)))

  ngenes_tested <- gather(ngenes_tested, "variable", "n", -mincount, -nbins)
  g <- ngenes_tested %>%
    ggplot() + theme_bw() + theme1 +
    facet_wrap(.~variable, scales = "free") +
    geom_point(aes(x = mincount, y = n, color = factor(nbins)), size = scattersize) + 
    geom_line(aes(x = mincount, y = n, color = factor(nbins), group = factor(nbins)), size = linesize)
  adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, 
              savefile = paste0(robpath, "XgenesTested_", id, ".pdf"), width = 10)
  
  # 2) significant genes over parameter space
  results <- results %>% dplyr::arrange(mincount, nbins)
  results$id <- paste0("count", results$mincount, "_nbin", results$nbins)
  results$id <- factor(results$id, levels = unique(results$id))
  results <- results %>% 
    dplyr::group_by(mincount, nbins, Gene) %>%
    dplyr::summarise(fdr = FDR)
  results <- results[!is.na(results$fdr),]
  results$id <- paste0("count", results$mincount, "_nbin", results$nbins)
  results$id <- factor(results$id, levels = unique(results$id))
  
  mostsigngenes <- results %>% 
    dplyr::group_by(Gene) %>%
    dplyr::summarise(n = sum(fdr<sigthreshold)) %>%
    dplyr::arrange(-n)
  
  results$Gene <- factor(results$Gene, levels = rev(as.character(mostsigngenes$Gene)))
  results$nbins_label <- paste0("n.bins = ", results$nbins)
  results$nbins_label <- factor(results$nbins_label, levels = unique(results$nbins_label))
  
  g <- results %>%
    ggplot() + theme_bw() + theme1 +
    geom_point(aes(x = mincount, y = Gene, color = factor(fdr < sigthreshold)), size = scattersize) + 
    facet_grid(.~nbins_label) + 
    scale_color_manual(values = c("black", "red")) + 
    labs(x = "minimum count per bin\n(to be included in regression)", y = "genes", color = paste0("FDR<", sigthreshold))
  adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 9, 
              savefile = paste0(robpath, "SigGenes_", id, ".pdf"), width = 25)
}
@

\subsection{C) XCI time vs PDT in MA-B6, MA-Cast, Xist-Undetected colored by time point}

\subsubsection{Load data}
<<>>=
r <- res[res$Xist_classification %in% c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"),]
m <- match(r$id, pData(XX)$id)
r$scaledPDT <- pData(XX)$Scaled_PDT[m]
r$Xi <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X_noXist", "cast_X_noXist")], 1, min),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$b6_X_noXist, r$cast_X_noXist))
r$Xa <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X_noXist", "cast_X_noXist")], 1, max),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$cast_X_noXist, r$b6_X_noXist))
r$XT <- (1-((r$Xi + offset_XiXa)/(r$Xa + offset_XiXa)))*100
r$XT_floored <- r$XT; r$XT_floored[r$XT_floored<0] <- 0
r$AXCR <- abs((r$Xi/(r$Xi+r$Xa))-0.5)
@

\subsubsection{Launch function - bin, mincount=25, nbins=10}
<<>>=
sigthreshold <- 0.05
mincount <- 25; nbins <- 10
mincells <- 5; minbin <- 5; minsilencing_perc <- 10; mincount_cellfit_bin <- 5
mincount_cellfit <- 5; mincell_cellfit <- 10
XistUndTime <- "0hrs"; XistUnd_XCRthr_low <- 0.4; XistUnd_XCRthr_high <- 0.6
equallysized <- TRUE; zeroIntercept <- TRUE; weighted <- FALSE

binresults <- XiXa_metacell_ratio_final(x = df_sk, mincount = mincount, nbins = nbins, minbin = minbin, mincells = mincells,
                                     minsilencing_perc = minsilencing_perc, mincount_cellfit_bin = mincount_cellfit_bin,
                                     mincount_cellfit = mincount_cellfit, mincell_cellfit = mincell_cellfit,
                                     equallysized = equallysized, zeroIntercept = zeroIntercept, weighted = weighted)
save(binresults, file = paste0(figpath, "classif_results_modified_eqsized_unweighted.RData"))

x <- binresults$model_fit
x <- x[rowSums(is.na(x))==0,]
x[x$FDR<sigthreshold,]; dim(x)
@

\subsubsection{Plot}
<<>>=
temp <- r; temp$XT[temp$XT < 0] <- 0
temp$silencing <- factor(ifelse(temp$XT<minsilencing_perc, "excluded", "included"))

# include bin borders
load(paste0(figpath, "classif_results_modified_eqsized_unweighted.RData")); x <- binresults$data
vbins <- c(minsilencing_perc, 
           as.numeric(gsub(strsplit2(levels(x$bin_XCR), split = ",")[,2], pattern = "]", replacement = "")))

# plot results: XT vs PDT
g <- temp %>%
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~Xist_classification) + 
  geom_vline(xintercept = minsilencing_perc, linetype = "dashed", size = linesize, alpha = 1/4) +
  geom_point(aes(x = XT, y = scaledPDT, color = day, shape = silencing, alpha = silencing), size = scattersize) + 
  scale_shape_manual(values = c(21, 20)) +
  scale_alpha_manual(values = c(1/4, 1)) +
  scale_color_manual(values = time_colors) + 
  labs(x = "XCI progress [%]",
       y = "Scaled Pseudotime", 
       color = "Time [days]") +
  guides(alpha = FALSE, shape = FALSE) +
  scale_x_continuous(breaks = c(0, 10, 50, 100), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "C_XT_PDT.pdf"))
@

\subsection{D) Example of gene specific silencing dynamics}

\subsubsection{Load data}
<<>>=
gene <- c("Hprt", "Dkc1", "Eif1ax", "Smc1a")

# cell values
cell_values <- binresults$data_cell[binresults$data_cell$Gene %in% gene,]

# bin values
bin_values <- binresults$data[binresults$data$Gene %in% gene,]

# revalue Xist
revalue_xist <- c("Undetected" = "Xist Undetected", "Low-Xist" = "Xist Low", "Middle" = "Intermediate Ratio",
                  "Xist_BA" = "Xist-BA", "BL6_MA" = "Xist-MA (Xi=B6)", "Cast_MA" = "Xist-MA (Xi=Cast)")
cell_values$XistGroup <- revalue(cell_values$Xist, revalue_xist)
bin_values$XistGroup <- revalue(bin_values$Xist, revalue_xist)

# extract slopes
bin <- binresults$model_fit
signif <- bin[bin$Gene %in% gene,]
slopes <- data.frame(Gene = unique(signif$Gene),
                     slope = c(signif$slope_b6, signif$slope_cast),
                     intercept = c(signif$int_b6, signif$int_cast),
                     XistGroup = rep(c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"), each = nrow(signif)))
slopes$XistGroup <- factor(slopes$XistGroup, levels = c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"))

# compute XT50s
threshold <- 100
bin$T50_b6 <- -(1 + bin$int_b6)/bin$slope_b6; bin$T50_cast <- -(1 + bin$int_cast)/bin$slope_cast
bin$T50_b6_original <- bin$T50_b6; bin$T50_cast_original <- bin$T50_cast; 
bin$T50_b6[(!is.na(bin$T50_b6)) & (bin$T50_b6<0) | bin$T50_b6 > threshold] <- threshold
bin$T50_cast[(!is.na(bin$T50_cast)) & (bin$T50_cast<0) | bin$T50_cast > threshold] <- threshold
s <- bin[bin$Gene %in% gene,]
t50 <- reshape2::melt(s, id.vars = colnames(signif)[!colnames(signif) %in% c("T50_b6", "T50_cast")], 
               measure.vars = c("T50_b6", "T50_cast"), value.name = "t50")
t50$XistGroup <- revalue(t50$variable, c("T50_b6" = "Xist-MA (Xi=B6)", "T50_cast" = "Xist-MA (Xi=Cast)"))
@

\subsubsection{Plot}
<<>>=
minvalue_pergene <- cell_values %>% dplyr::group_by(Gene) %>% dplyr::summarise(min = min(log2(XiXa_ratio_XistUnd)))

for(gg in gene){
  
  minvalue <- minvalue_pergene$min[minvalue_pergene$Gene == gg]
  t <- t50[t50$Gene == gg,]
  
  g <- cell_values[cell_values$Gene %in% gg,] %>%
    ggplot() + 
    theme_bw() + theme1 + facet_grid(XistGroup~.) +
    geom_segment(data = t, aes(x = 0, y = log2(1/2), xend = t50, yend = log2(1/2), color = XistGroup), linetype = "dashed",
               show.legend = FALSE, size = linesize) +
    geom_segment(data = t, aes(x = t50, y = minvalue, xend = t50, yend = log2(1/2), color = XistGroup), linetype = "dashed",
               show.legend = FALSE, size = linesize) + 
    geom_hline(yintercept = 0, size = linesize, alpha = 1/2, linetype = "dashed") +
    geom_point(aes(x = AXCR, y = log2(XiXa_ratio_XistUnd), color = XistGroup, alpha = XistGroup), 
               size = scattersize, show.legend = FALSE) + 
    geom_point(data = bin_values[bin_values$Gene %in% gg,], 
               aes(x = AXCR, y = log2(XiXa_ratio_XistUnd), color = XistGroup), size = scattersize*binscatter_mult) + 
    geom_abline(data = slopes[slopes$Gene %in% gg,], 
                aes(intercept = intercept, slope = slope, color = XistGroup),
                show.legend = FALSE, size = linesize) + 
    scale_color_manual(values = color_alleles) + 
    scale_alpha_manual(values = c(1/6, 1/4)) +
    labs(x = expression("1-(("*X[i.chrX]*" + 0.01) / ("*X[a.chrX]*" + 0.01))*100"),
         y = expression("("*X[i.g]*" + 0.01) / ("*X[a.g]*" + 0.01) ["*log[2]*"(value)]"),
         color = "") + 
    scale_x_continuous(breaks = seq(0, 100, 50), limits = c(0, 100))
  adjust_size(g = g, panel_width_cm = 1.5, panel_height_cm = 2, savefile = paste0(figpath, "D_GeneScheme_", gg, ".pdf"),
              strptext_col = 0)
}
@

\subsection{F) XT50 B6 vs Cast}

\subsubsection{Load data}
<<>>=
mod_binned <- binresults$model_fit
mod_binned$SE50_b6 <- (-1 -mod_binned$int_b6)/(mod_binned$slope_b6); mod_binned$SE50_b6[mod_binned$SE50_b6<0] <- 100
mod_binned$SE50_cast <- (-1 -mod_binned$int_cast)/(mod_binned$slope_cast); mod_binned$SE50_cast[mod_binned$SE50_cast<0] <- 100
mod_binned$SE50_b6[mod_binned$SE50_b6>100] <- 100; mod_binned$SE50_cast[mod_binned$SE50_cast>100] <- 100

# cluster SE50 values into 4 clusters
set.seed(0)
kcenters <- 4; kiter <- 1e6
features <- c("Gene", "FDR", "SE50_b6", "SE50_cast")

class_melt_all <- mod_binned[, features] %>%
  tidyr::gather(variable, se50, -Gene, -FDR)

class_melt <- class_melt_all[!is.na(class_melt_all$se50),] %>%
  dplyr::group_by(variable) %>%
  dplyr::mutate(k = kmeans(se50, centers = kcenters, iter.max = kiter)$cluster, id = paste0(variable, "_", k))

class_order <- class_melt %>%
  dplyr::group_by(variable, k) %>% dplyr::summarise(m = max(se50), n = length(Gene)) %>%
  dplyr::group_by(variable) %>% dplyr::mutate(r = rank(m), id = paste0(variable, "_", k))

class_melt$k_ordered <- class_order$r[match(class_melt$id, class_order$id)]
class_melt$Xist <- revalue(class_melt$variable, c("SE50_b6" = "BL6_MA", "SE50_cast" = "Cast_MA"))
ddply(class_melt, .variables = .(k_ordered, Xist), summarize, n = length(unique(Gene)), genes = paste(unique(Gene), collapse = ","))

thrs <- class_melt %>% dplyr::group_by(Xist, k_ordered) %>% dplyr::summarise(t = max(se50)); thrs
@

\subsubsection{Plot}
<<>>=
mod_binned$significant <- mod_binned$FDR<sigthreshold

g <- mod_binned[!is.na(mod_binned$FDR),] %>%
  ggplot() + 
  theme_bw() + theme1 + 
  geom_abline(slope = 1, intercept = 0, size = linesize, alpha = 1/2, linetype = "dashed") + 
  geom_point(aes(x = SE50_b6, y = SE50_cast, color = factor(significant)), size = 0.1, show.legend = FALSE) + 
  geom_text_repel(aes(x = SE50_b6, y = SE50_cast, label = Gene, 
                      color = factor(significant), alpha = factor(significant)),
                  size = geomtext_size,
                  segment.size = linesize, min.segment.length = 0.1, nudge_y = 1, 
                  show.legend = FALSE, force = 10) + 
  scale_alpha_manual(values = c(1/2, 1)) +
  scale_color_manual(values = c("black", "red")) + 
  labs(x = expression(XT[50] * ": "* X[i]*" = B6"),
       y = expression(XT[50] * ": "* X[i]*" = Cast"),
       color = paste0("FDR < ", sigthreshold)) +
  scale_x_continuous(breaks = seq(0, 100, 50), limits = c(0,100)) +
  scale_y_continuous(breaks = seq(0, 100, 50), limits = c(0,100))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "F_SilencingHalfTime.pdf"))
@


\subsection{E) Comparison to published sylencing dynamics [Borens. to B6/Cast; Marks&Lisa to B6]}

<<>>=
dirpath <- paste0(path, "data/other_publications/")
@

\subsubsection{Load data - Sousa et al. 2019}

\noindent \textit{Kinetics of Xist-induced gene silencing can be predicted from combinations of epigenetic and genomic features}; data from: \texttt{https://www.dropbox.com/sh/6czxpqgx5r1wdhx/AADXp5Bp0FS42H41aWAU7Ni6a?dl=0}
<<>>=
file <- paste0(dirpath, "Supplemental_Table_S4.xlsx")
lisa <- read_excel(path = file, sheet = "PRO-Seq genes", skip = 11)
genes <- alias2main_par(genesymbol = lisa$`gene name`)
genes <- genes[as.character(genes$Gene) != as.character(genes$UpdatedSymbol),]; genes <- genes[!is.na(genes$UpdatedSymbol),]
lisa$gene <- as.character(lisa$`gene name`); m <- match(genes$Gene, lisa$gene); lisa$gene[m] <- as.character(genes$UpdatedSymbol)
lisa$`half-time` <- as.numeric(as.character(lisa$`half-time`))

# gene classification
lisa$t50 <- lisa$`half-time`
lisa$k <- kmeans(lisa$t50, centers = 4, iter.max = 1000, nstart = 1000)$cluster
avet50 <- ddply(lisa, .variables = .(k), summarize, m = mean(t50)); avet50$r <- rank(avet50$m)
lisa$kmeans <- avet50$r[match(lisa$k, avet50$k)]; lisa$kmeans <- factor(lisa$kmeans)
lisa$Classification <- revalue(lisa$kmeans, replace = c("1" = "Early", "2" = "Intermediate", "3" = "Late", "4" = "Escapee"))
lisa$Classification <- factor(lisa$Classification, levels = c("Early", "Intermediate", "Late", "Escapee"))
@

\subsubsection{Load data - Marks et al. 2015}

\noindent \textit{Dynamics of gene silencing during X inactivation using allele-specific RNA-seq}; data from: \texttt{https://www.ncbi.nlm.nih.gov/pmc/articles/PMC4546214/}
<<>>=
file <- paste0(dirpath, "Marks_classif_parsed.xlsx")
marks <- read_excel(path = file, sheet = "Clusters_and_overlap_Lin", skip = 0)
marks$gene <- as.character(alias2main_par(genesymbol = marks$Timepoint)$UpdatedSymbol)
marks <- marks[!is.na(marks$gene),]
marks$Classification <- factor(marks$'Cluster in Marks', levels = c("Early", "Intermediate", "Late", "Escapee"))
@

\subsubsection{Load data - Borensztein et al. 2017}
<<>>=
file <- paste0(dirpath, "Borensztein_SuppTable1.txt")
bor <- read.table(file = file, header = TRUE)
bor$gene <- as.character(alias2main_par(genesymbol = bor$Genes)$UpdatedSymbol)
bor <- bor[!is.na(bor$gene),]
bor <- gather(bor[,-1], group, class, -gene)
bor <- bor[!bor$class %in% "Bias",]
bor$Classification <- revalue(factor(bor$class), replace = c("Early" = "Early", "Inter" = "Intermediate",
                                                             "Late" = "Late", "Esc" = "Escapee"))
@

\subsubsection{Put all data together}
<<>>=
features <- c("gene", "Classification")
gc <- rbind(data.frame(source = "Lisa", lisa[, features], compare = "B6"),
               data.frame(source = "Marks", marks[, features], compare = "B6"),
               data.frame(source = "Borensztein", bor[bor$group == "BC", features], compare = "Cast"),
               data.frame(source = "Borensztein", bor[bor$group == "CB", features], compare = "B6"))
@

\subsubsection{Load my data}
<<>>=
class_melt_all$Xist <- revalue(class_melt_all$variable, c("SE50_b6" = "BL6_MA", "SE50_cast" = "Cast_MA"))
cm <- class_melt_all[!is.na(class_melt_all$se50),]
@

\subsubsection{Combine results}
<<>>=
cm$compare <- revalue(factor(cm$Xist), replace = c("BL6_MA" = "B6", "Cast_MA" = "Cast"))

# add my classification to gc
m <- match(paste0(gc$gene, "_", gc$compare), paste0(cm$Gene, "_", cm$compare))
gc$XT50 <- cm$se50[m]
gg <- gc[!is.na(gc$XT50),]
gg$silgroup <- revalue(gg$compare, replace = c("B6" = "Xi = B6", "Cast" = "Xi = Cast"))
gg$id <- paste0(gg$silgroup, "\n", gg$source)
ngenes <- ddply(gg, .variables = .(Classification, id), summarize, n = length(gene))
@

\subsubsection{Plot - comparison}
<<>>=
ngenes_sub <- ngenes[!ngenes$id %in% "Xi = B6\nLisa",]
gg_sub <- gg[!gg$source %in% "Lisa",]
gg_sub$id <- factor(gg_sub$id, levels = c("Xi = B6\nMarks", "Xi = B6\nBorensztein", "Xi = Cast\nBorensztein"))
cols <- c("#fbb4b9", "#f768a1", "#c51b8a", "#7a0177")

g <- gg_sub %>%  
  ggplot(aes(x = id, y = XT50, color = Classification, fill = Classification)) +
  theme_bw() + theme1 +  
  geom_jitter(color = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75), 
              size = small_scattersize, show.legend = FALSE) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  geom_text(data = ngenes_sub, aes(x = id, y = Inf, group = Classification, label = paste0("n=", n)), 
            position = position_dodge(width = 0.75), angle = 90, alpha = 1, size = geomtext_size,
            color = "black", hjust=-0.5) + 
  coord_cartesian(clip = "off") +
  scale_color_manual(values = cols) +
  scale_y_continuous(breaks = seq(0, 100, 50), limits = c(0,100)) +
  labs(x = "", 
       y = expression("Silencing percentage: (1-("*X[i.chrX]*"/("*X[i.chrX]*"+"*X[a.chrX]*"))*100"),
       color = "")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "E_Comparison.pdf"))
@

\subsubsection{Classify Lisa's half-lives}
<<>>=
gc_lisa <- data.frame(lisa[, c("gene", "t50")], compare = "B6")
m <- match(paste0(gc_lisa$gene, "_", gc_lisa$compare), paste0(cm$Gene, "_", cm$compare))
gc_lisa$XT50 <- cm$se50[m]
gc_lisa <- gc_lisa[!is.na(gc_lisa$XT50),]

# Classification: according to the XCI-Escape and Silencing-Dynamics models
gc_lisa$XCI_Escape <- NA
gc_lisa$XCI_Escape[gc_lisa$t50<0.9] <- "Silenced"
gc_lisa$XCI_Escape[gc_lisa$t50>1.6] <- "Not Silenced"

gc_lisa$Sil_Dyn <- NA
gc_lisa$Sil_Dyn[gc_lisa$t50<0.5] <- "Early"
gc_lisa$Sil_Dyn[(gc_lisa$t50>0.9)&(gc_lisa$t50<1.3)] <- "Late"

gcm_lisa <- gather(gc_lisa, model, value, -gene, -t50, -compare, -XT50)
gcm_lisa <- gcm_lisa[!is.na(gcm_lisa$value),] # remove un-classified genes

# plot
gcm_lisa$value <- factor(gcm_lisa$value, levels = c("Early", "Late", "Silenced", "Not Silenced"))
gcm_lisa$model <- revalue(factor(gcm_lisa$model), replace = c("XCI_Escape" = "XCI/Escape\nmodel", "Sil_Dyn" = "Silencing Dynamics\nmodel"))
gcm_lisa$model <- factor(gcm_lisa$model, levels = c("Silencing Dynamics\nmodel", "XCI/Escape\nmodel"))
ngenes_lisa <- gcm_lisa %>% dplyr::group_by(model, value) %>% dplyr::summarise(n = length(unique(gene)))
cols <- c("#66c2a5", "#fc8d62", "#8da0cb", "#e78ac3")
# cols <- c("#a6cee3", "#b2df8a", "#1f78b4", "#33a02c")

g <- gcm_lisa %>%  
  ggplot(aes(x = model, y = XT50, color = value, fill = value)) +
  theme_bw() + theme1 +  
  geom_jitter(color = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75), 
              size = small_scattersize, show.legend = FALSE) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.25,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  geom_text(data = ngenes_lisa, aes(x = model, y = Inf, group = value, label = paste0("n=", n)), 
            position = position_dodge(width = 0.75), angle = 90, alpha = 1, size = geomtext_size,
            color = "black", hjust=-0.5) + 
  coord_cartesian(clip = "off") +
  scale_color_manual(values = cols) +
  scale_y_continuous(breaks = seq(0, 100, 50), limits = c(0,100)) +
  labs(x = "", 
       y = expression("Silencing percentage: (1-("*X[i.chrX]*"/("*X[i.chrX]*"+"*X[a.chrX]*"))*100"),
       color = "")
adjust_size(g = g, panel_width_cm = 4, panel_height_cm = 3, savefile = paste0(figpath, "E_Comparison_Lisa.pdf"))
@

\subsection{G) Most differentially silenced genes}

\subsubsection{Load data}
<<>>=
gene <- as.character(binresults$model_fit$Gene[binresults$model_fit$FDR<sigthreshold])
gene <- gene[!is.na(gene)]

# cell values
cell_values <- binresults$data_cell[binresults$data_cell$Gene %in% gene,]

# bin values
bin_values <- binresults$data[binresults$data$Gene %in% gene,]

# revalue Xist
revalue_xist <- c("Undetected" = "Xist Undetected", "Low-Xist" = "Xist Low", "Middle" = "Intermediate Ratio",
                  "Xist_BA" = "Xist-BA", "BL6_MA" = "Xist-MA (Xi=B6)", "Cast_MA" = "Xist-MA (Xi=Cast)")
cell_values$XistGroup <- revalue(cell_values$Xist, revalue_xist)
bin_values$XistGroup <- revalue(bin_values$Xist, revalue_xist)

# extract slopes
bin <- binresults$model_fit
signif <- bin[bin$Gene %in% gene,]
slopes <- data.frame(Gene = unique(signif$Gene),
                     slope = c(signif$slope_b6, signif$slope_cast),
                     intercept = c(signif$int_b6, signif$int_cast),
                     XistGroup = rep(c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"), each = nrow(signif)))
slopes$XistGroup <- factor(slopes$XistGroup, levels = c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"))

# compute XT50s
threshold <- 100
bin$T50_b6 <- -(1 + bin$int_b6)/bin$slope_b6; bin$T50_cast <- -(1 + bin$int_cast)/bin$slope_cast
bin$T50_b6_original <- bin$T50_b6; bin$T50_cast_original <- bin$T50_cast; 
bin$T50_b6[(!is.na(bin$T50_b6)) & (bin$T50_b6<0) | bin$T50_b6 > threshold] <- threshold
bin$T50_cast[(!is.na(bin$T50_cast)) & (bin$T50_cast<0) | bin$T50_cast > threshold] <- threshold
s <- bin[bin$Gene %in% gene,]
t50 <- reshape2::melt(s, id.vars = colnames(signif)[!colnames(signif) %in% c("T50_b6", "T50_cast")], 
                      measure.vars = c("T50_b6", "T50_cast"), value.name = "t50")
t50$XistGroup <- revalue(t50$variable, c("T50_b6" = "Xist-MA (Xi=B6)", "T50_cast" = "Xist-MA (Xi=Cast)"))

# add labels
signif$label <- paste0(signif$Gene, "\nFDR = ", format(signif$FDR, digits = 1))
lev <- signif$label[rank(signif$FDR)]
bin_values$genelab <- factor(signif$label[match(bin_values$Gene, signif$Gene)], levels = lev)
t50$genelab <- factor(signif$label[match(t50$Gene, signif$Gene)], levels = lev)
slopes$genelab <- factor(signif$label[match(slopes$Gene, signif$Gene)], levels = lev)
@

\subsubsection{Plot}
<<>>=
minvalue <- min(log2(bin_values$XiXa_ratio_XistUnd))

g <- bin_values %>%
  ggplot() + 
  theme_bw() + theme1 + facet_grid(genelab~.) +
  geom_hline(yintercept = 0, size = linesize, alpha = 1/2, linetype = "dashed") +
  geom_point(aes(x = AXCR, y = log2(XiXa_ratio_XistUnd), color = XistGroup), size = scattersize*binscatter_mult) + 
  geom_segment(data = t50, aes(x = 0, y = log2(1/2), xend = t50, yend = log2(1/2), color = XistGroup), linetype = "dashed",
               show.legend = FALSE, size = linesize) +
  geom_segment(data = t50, aes(x = t50, y = minvalue, xend = t50, yend = log2(1/2), color = XistGroup), linetype = "dashed",
               show.legend = FALSE, size = linesize) +
  geom_abline(data = slopes, aes(intercept = intercept, slope = slope, color = XistGroup),
              show.legend = FALSE, size = linesize) + 
  scale_color_manual(values = color_alleles) + 
  scale_alpha_manual(values = c(1/6, 1/4)) +
  labs(x = expression("1-(("*X[i.chrX]*" + 0.01) / ("*X[a.chrX]*" + 0.01))*100"),
         y = expression("("*X[i.g]*" + 0.01) / ("*X[a.g]*" + 0.01) ["*log[2]*"(value)]"),
         color = "") + 
  scale_x_continuous(breaks = seq(0, 100, 50), limits = c(0, 100)) +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 1.5, panel_height_cm = 2, savefile = paste0(figpath, "G_MostDEgenes.pdf"), height = 10)
@


\subsection{H1) kmeans trend - highlight Klhl13 and Pir}

\subsubsection{Load data}
<<>>=
bin_value <- binresults$data[binresults$data$Gene %in% class_melt$Gene,]

# include kmeans group
bin_value$k <- NA
m <- match(paste0(bin_value$Xist, "_", bin_value$Gene), paste0(class_melt$Xist, "_", class_melt$Gene))
bin_value$k <- class_melt$k_ordered[m]
bin_value <- bin_value[!is.na(bin_value$k),]

# define coloring group
color_trend <- c("#b2df8a", "black", "#1f78b4")
genes <- c("Klhl13", "Pir", "Hprt")

# define name for bins
bin_value$bin_id <- as.numeric(gsub(x = strsplit2(bin_value$bin_XCR, split = ",")[,1], pattern = "[(]", replacement = ""))

# remove UndTime0h point
bin_value$kgroup <- paste0("Cluster ", bin_value$k)
bin_value$XistGroup <- revalue(bin_value$Xist, c("BL6_MA" = "Xist-MA (Xi=B6)", "Cast_MA" = "Xist-MA (Xi=Cast)"))
ngenes <- ddply(bin_value, .variables = .(XistGroup, kgroup), summarize, n = length(unique(Gene)))
ds_genes <- bin_value[bin_value$Gene %in% genes,]
@

\subsubsection{Plot}
<<>>=
bin_value$XistGroup <- gsub(bin_value$XistGroup, pattern = ' ', replacement = '\n')
ds_genes$XistGroup <- gsub(ds_genes$XistGroup, pattern = ' ', replacement = '\n')

# plot
g <- bin_value %>%
  ggplot() + 
  theme_bw() + theme1 +
  facet_grid(kgroup~XistGroup) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = 1/4, size = linesize) + 
  geom_line(aes(x = bin_id, y = log2(XiXa_ratio_XistUnd), group = Gene), alpha = 0.2, size = linesize) + 
  scale_x_continuous(breaks = seq(0, 100, 50), limits = c(0,100)) +
  labs(x = expression("1-(("*X[i.chrX]*" + 0.01) / ("*X[a.chrX]*" + 0.01))*100"),
       y = expression("("*X[i.g]*" + 0.01) / ("*X[a.g]*" + 0.01) ["*log[2]*"(value)]")) +
  theme(legend.position = "right")
adjust_size(g = g, panel_width_cm = 1.5, panel_height_cm = 1.5, savefile = paste0(figpath, "H1_kmeansTrend.pdf"), height = 10)

# k-means trend only for tested genes
tested_genes <- unique(class_melt$Gene[!is.na(class_melt$FDR)])

g <- bin_value[bin_value$Gene %in% tested_genes,] %>%
  ggplot() + 
  theme_bw() + theme1 +
  facet_grid(kgroup~XistGroup) +
  geom_hline(yintercept = 0, linetype = "dashed", alpha = 1/4, size = linesize) + 
  geom_line(aes(x = bin_id, y = log2(XiXa_ratio_XistUnd), group = Gene), alpha = 0.2, size = linesize) + 
  scale_x_continuous(breaks = seq(0, 100, 50), limits = c(0,100)) +
  labs(x = expression("1-(("*X[i.chrX]*" + 0.01) / ("*X[a.chrX]*" + 0.01))*100"),
       y = expression("("*X[i.g]*" + 0.01) / ("*X[a.g]*" + 0.01) ["*log[2]*"(value)]")) +
  theme(legend.position = "right")
adjust_size(g = g, panel_width_cm = 1.5, panel_height_cm = 1.5, savefile = paste0(figpath, "H1_kmeansTrend_testedGenes.pdf"), height = 10)
@

\subsection{H2) Clustering of DS genes - Sankey}

\subsubsection{Load data}
<<>>=
silclasses <- c("fast", "medium", "slow", "escape")
nodes <- data.frame(node = 0:7, 
                    name = paste0(rep(c("b6", "cast"), each = 4), "_", rep(1:4, times = 2)),
                    id = paste0(rep(silclasses, times = 2), " ", rep(c("(Xi = B6)", "(Xi = Cast)"), each = 4)))

temp <- class_melt[!is.na(class_melt$FDR),] %>% 
  dplyr::group_by(Gene) %>%
  dplyr::summarise(b6 = paste0("b6_", k_ordered[Xist=="BL6_MA"]), 
                   FDR = unique(FDR),
                   cast = paste0("cast_", k_ordered[Xist=="Cast_MA"]),
                   diff = abs(k_ordered[Xist=="BL6_MA"] - k_ordered[Xist=="Cast_MA"]))
temp$significant <- factor(ifelse(temp$FDR<sigthreshold, "significant", "not significant"), levels = c("significant", "not significant"))
                            
temp <- temp %>% 
  dplyr::group_by(Gene, b6, cast, significant) %>%
  dplyr::summarise(n = length(b6), 
                   genes = paste0(unique(Gene), collapse = "."),
                   diff = unique(diff))

# change labels
temp$b6_new <- factor(as.character(nodes$id[match(temp$b6, nodes$name)]), levels = paste0(silclasses, " (Xi = B6)"))
temp$cast_new <- factor(as.character(nodes$id[match(temp$cast, nodes$name)]), levels = paste0(silclasses, " (Xi = Cast)"))
@

\subsubsection{Plot}
<<>>=
temp$kmeans_diff <- ifelse(temp$diff == 0, "same cluster\ndiff = 0",
                           ifelse(temp$diff == 1, "neighboring cluster\ndiff = 1", 
                                  "distal cluster\ndiff > 1"))
temp[temp$diff>1,]

g <- temp %>%
  ggplot(aes(axis1 = b6_new, axis2 = cast_new, y = n)) + 
  theme_bw() + theme1 + 
  geom_alluvium(aes(fill = kmeans_diff), size = linesize, colour = "white") +
  scale_fill_manual(values = c("#ca0020", "#f4a582", "grey")) +
  geom_stratum(size = linesize, width = 1/10) +
  geom_text(stat = "stratum", infer.label = TRUE, size = geomtext_size) +
  scale_x_discrete(limits = c("b6_new", "cast_new"), expand = c(0, 0)) +
  scale_y_continuous(expand = c(0, 0)) +
  labs(x="", y = "", fill = paste0("FDR<", sigthreshold))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 5, savefile = paste0(figpath, "H2_SankeyPlot.pdf"), 
            height = 10, width = 10)

# identify genes moving by >2 classes
temp$move <- abs(as.numeric(gsub(temp$b6, pattern = "b6_", replacement = "")) - 
                 as.numeric(gsub(temp$cast, pattern = "cast_", replacement = "")))
temp %>% dplyr::arrange(-move)
@

\subsection{Additional measures}

\subsubsection{Correlation between XT and (PDT, time) in Xist-MA cells}
<<>>=
r <- res[res$Xist_classification %in% c("Xist-MA (Xi=B6)", "Xist-MA (Xi=Cast)"),]
r$id <- rownames(r)
m <- match(r$id, pData(XX)$id)
r$scaledPDT <- pData(XX)$Scaled_PDT[m]
r$Xi <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X_noXist", "cast_X_noXist")], 1, min),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$b6_X_noXist, r$cast_X_noXist))
r$Xa <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X_noXist", "cast_X_noXist")], 1, max),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$cast_X_noXist, r$b6_X_noXist))
r$XT <- (1-((r$Xi + offset_XiXa)/(r$Xa + offset_XiXa)))*100
r$XT_floored <- r$XT; r$XT_floored[r$XT_floored<0] <- 0
r$AXCR <- abs((r$Xi/(r$Xi+r$Xa))-0.5)

# remove cells with silencing percentage smaller than minsilencing_perc
# r <- r[r$XT >= minsilencing_perc,]
r$d <- as.numeric(gsub(r$Time, pattern = "h", replacement = ""))/24
r$day <- factor(r$d)

# compute and test correlation: XT vs PDT
cor.test(r$XT, r$scaledPDT)

# compute and test correlation: XT vs PDT
cor.test(r$XT, r$d)

# setting minimum silencing % threshold
r <- r[r$XT >= minsilencing_perc,]
cor.test(r$XT, r$scaledPDT)
cor.test(r$XT, r$d)
@

\subsubsection{Correlation test for each Xist group}
<<>>=
r <- res
r$id <- rownames(r)
m <- match(r$id, pData(XX)$id)
r$scaledPDT <- pData(XX)$Scaled_PDT[m]
r$Xi <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X", "cast_X")], 1, min),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$b6_X, r$cast_X))
r$Xa <- ifelse(r$Xist_classification == "Xist Undetected", apply(r[, c("b6_X", "cast_X")], 1, max),
               ifelse(r$Xist_classification == "Xist-MA (Xi=B6)", r$cast_X, r$b6_X))
r$XT <- (1-((r$Xi + offset_XiXa)/(r$Xa + offset_XiXa)))*100
r$XT_floored <- r$XT; r$XT_floored[r$XT_floored<0] <- 0
r$AXCR <- abs((r$Xi/(r$Xi+r$Xa))-0.5)
r$d <- as.numeric(gsub(r$Time, pattern = "h", replacement = ""))/24
r$day <- factor(r$d)
x <- gather(r[, c("Xist_classification", "XT", "d", "scaledPDT")], 'variable', 'value', -Xist_classification, -XT)

# test for each group
st <- x[!x$Xist_classification %in% c("Xist Low", "Intermediate Ratio"), ] %>%
  dplyr::group_by(Xist_classification, variable) %>%
  dplyr::summarise(n = length(variable), rho = cor.test(XT, value)$estimate, rho_pvalue = cor.test(XT, value)$p.value)
st$FDR <- p.adjust(st$rho_pvalue, method = "BH"); st

# test removing cells with XT<10
st <- x[(!x$Xist_classification %in% c("Xist Low", "Intermediate Ratio"))&(x$XT>=minsilencing_perc), ] %>%
  dplyr::group_by(Xist_classification, variable) %>%
  dplyr::summarise(n = length(variable), rho = cor.test(XT, value)$estimate, rho_pvalue = cor.test(XT, value)$p.value)
st$FDR <- p.adjust(st$rho_pvalue, method = "BH"); st

# test correlation across all cells (not divided by Xist group)
st <- x[!x$Xist_classification %in% c("Xist Low", "Intermediate Ratio"), ] %>%
  dplyr::group_by(variable) %>%
  dplyr::summarise(n = length(variable), rho = cor.test(XT, value)$estimate, rho_pvalue = cor.test(XT, value)$p.value)
st$FDR <- p.adjust(st$rho_pvalue, method = "BH"); st
@


\clearpage


\section{Figure 6: Experimental validation of differentially silenced genes}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/fig6_PyroseqValidation/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{B) validated genes - anova test}

\subsubsection{Load data}
<<>>=
file <- paste0(figpath, "data.xlsx")
data <- data.frame(read_excel(path = file)[, 1:4])
df <- separate(data = data, col = "BioGroupID", into = c("experiment", "group", "time"), sep = "_", extra = "merge")
df$CastSNPfreq <- as.numeric(as.character(df$CastSNPfreq))
df$experiment <- revalue(as.factor(df$experiment), replace = c("dXIC" = "Pyroseq", "qPCR" = "qPCR"))
df$group <- revalue(as.factor(df$group), replace = c("XX" = "WT", "gDNA" = "gDNA", "A1" = "dXIC on B6 allele", "A6" = "dXIC on Cast allele"))
@

\subsubsection{Process data}
<<>>=
remove_genes <- c("Xist")

# store percentages from inactive allele
df_fc <- df[(df$experiment == "Pyroseq")&(!df$group %in% c("gDNA", "WT"))&(!is.na(df$CastSNPfreq))&(!df$Gene %in% remove_genes),]
df_fc$Xist_classification <- revalue(factor(as.character(df_fc$group)), 
                                     replace = c("dXIC on B6 allele" = "Xist-MA (Xi=Cast)",
                                                 "dXIC on Cast allele" = "Xist-MA (Xi=B6)"))
df_fc$Xiperc <- ifelse(df_fc$Xist_classification == "Xist-MA (Xi=B6)", 100-df_fc$CastSNPfreq, df_fc$CastSNPfreq)
df_fc$day <- as.numeric(gsub(df_fc$time, pattern = "h", replacement = ""))/24

# compute XiXa ratios
df_fc$XiXa <- df_fc$Xiperc/(100-df_fc$Xiperc)

# normalize to average 0h ratio per cell line
df_fc_scaled <- df_fc %>%
  dplyr::group_by(Gene, Xist_classification) %>%
  dplyr::mutate(mean_baseline_0h = mean(XiXa[time=="0h"]),
                XiXa_scaled = XiXa/mean(XiXa[time=="0h"]))

### ANOVA test
anova_test <- c()
for(g in 1:length(unique(df_fc_scaled$Gene))){
    gene <- as.character(unique(df_fc_scaled$Gene))[g]
    temp <- df_fc_scaled[df_fc_scaled$Gene == gene,]
    complete <- lm(log2(XiXa_scaled) ~ 0 + day + day:Xist_classification, data = temp)
    oneslope <- lm(log2(XiXa_scaled) ~ 0 + day, data = temp)
    anv <- anova(oneslope, complete)
    pvalue <- anv$`Pr(>F)`[2]
    
    beta2 <- coef(complete)['day:Xist_classificationXist-MA (Xi=Cast)']
    beta2_ci <- confint(complete, level = 0.95)['day:Xist_classificationXist-MA (Xi=Cast)',]
    
    # intercept <- coefficients(complete)["(Intercept)"]
    slope_XiB6 <- coefficients(complete)["day"]
    slope_XiCast <- coefficients(complete)["day:Xist_classificationXist-MA (Xi=Cast)"] + slope_XiB6
    anova_test <- rbind(anova_test, 
                        data.frame(Gene = gene, 
                                   intercept = 0, slope_XiB6 = slope_XiB6, slope_XiCast = slope_XiCast, pvalue = pvalue,
                                   slope_diff = beta2, 
                                   slope_diff_CIlow = beta2_ci[1], slope_diff_CIhigh = beta2_ci[2]))
}
anova_test$fdr <- p.adjust(anova_test$pvalue, method = "BH")
anova_test <- anova_test %>% dplyr::arrange(fdr)
anova_test$Gene <- factor(anova_test$Gene, levels = unique(as.character(anova_test$Gene))); anova_test
@

\subsubsection{Plots}
<<>>=
# B: average ratio per gene, time point and cell line: signed rank test (paired Wilcoxon)
controlgene <- c('Rnf12','Renbp','Cul4b','Prdx4','Atrx')
mr <- df_fc_scaled[df_fc_scaled$Gene %in% controlgene,] %>%
  dplyr::group_by(day, Xist_classification, Gene) %>% 
  dplyr::summarise(meanratio = mean(XiXa_scaled))

tt <- mr[mr$day != 0,] %>%
  group_by(day) %>% 
  do(t=wilcox.test(meanratio~Xist_classification, data=., paired=T)) %>%
  summarize(day, t_stat=t$statistic, t_pvalue = t$p.value, Xist_classification = NA)
tt$fdr <- p.adjust(tt$t_pvalue, method = 'BH'); tt

ddply(mr[mr$day != 0,], .variables = .(day), summarise, 
      t = wilcox.test(x = meanratio[Xist_classification == "Xist-MA (Xi=Cast)"], 
                      y = meanratio[Xist_classification == "Xist-MA (Xi=B6)"], 
                      paired = TRUE)$p.value)

g <- mr %>%
  ggplot(aes(x = day, y = log2(meanratio), color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  geom_text(data = wt, aes(x = day, y = 1, label = formatC(wilcox_pvalue, digits = 1)),
            size = geomtext_size, color = "black") +
  geom_hline(yintercept = 0, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", 
       y = expression("Average scaled ratio: "*"("*X[i]*"/"*X[a]*") [log2]"),
       color = "") +
  scale_y_continuous(limits = c(-2.5, 1.5))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "B_Averagelog2Ratios_ControlGenes.pdf"))

# C: 0h-scaled Xi/Xa ratios and fitted line
anv <- gather(anova_test[, c("Gene", "intercept", "slope_XiB6", "slope_XiCast", 'pvalue')], 
              'slope', 'value', -Gene, -intercept, -pvalue)
anv$Xist_classification <- revalue(factor(anv$slope), replace = c('slope_XiB6' = 'Xist-MA (Xi=B6)',
                                                                  'slope_XiCast' = 'Xist-MA (Xi=Cast)'))
anv <- anv[order(anv$pvalue, decreasing = FALSE),]
anv$genelab <- factor(paste0(anv$Gene, '\npvalue=', signif(anv$pvalue, digits = 3)))
anv$genelab <- factor(anv$genelab, levels = unique(anv$genelab))
df_fc_scaled$genelab <- anv$genelab[match(df_fc_scaled$Gene, anv$Gene)]
df_fc_scaled$genelab <- factor(df_fc_scaled$genelab, levels = levels(anv$genelab))

hits <- c("Klhl13", "Pir", "Hprt")

g <- df_fc_scaled[df_fc_scaled$Gene %in% hits,] %>%
  ggplot() +
  theme_bw() + theme1 +
  facet_grid(.~Gene) +
  geom_text(data = anv[anv$Gene %in% hits,], aes(x = 2, y = 1.25, label = formatC(pvalue, digits = 1)),
            size = geomtext_size, color = "black") +
  geom_point(aes(x = day, y = log2(XiXa_scaled), color = Xist_classification), size = scattersize) +
  scale_color_manual(values = color_alleles) +
  geom_hline(yintercept = 0, size = linesize, linetype = "dashed") + 
  geom_abline(data = anv[anv$Gene %in% hits,], 
                aes(intercept = intercept, slope = value, color = Xist_classification),
                show.legend = FALSE, size = linesize) + 
  labs(y = expression("0h-scaled: Inactive X/Active X ["*log[2]*"("*X[i]*"/"*X[a]*")]"), 
       x = "Time [day]",
       color = '') +
  scale_y_continuous(limits = c(-2, 1.5))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "C_XiXa_ratios_0hScaled_lmFit_hits.pdf"), height = 10, width = 15)


### C2: t-test on XiXa scaled ratios per gene and day

### Compare the normalized XiXa ratios per time point for each hit
hits <- c("Klhl13", "Pir", "Hprt")

ddply(df_fc_scaled[df_fc_scaled$Gene %in% hits,], .variables = .(day, Gene), summarise, 
      t = t.test(x = XiXa_scaled[Xist_classification == "Xist-MA (Xi=Cast)"], 
                 y = XiXa_scaled[Xist_classification == "Xist-MA (Xi=B6)"], 
                 paired = FALSE)$p.value) %>% arrange(Gene)

tt <- df_fc_scaled[df_fc_scaled$Gene %in% hits,] %>%
  group_by(day, Gene) %>% 
  do(t=t.test(XiXa_scaled~Xist_classification, data=., paired = TRUE)) %>%
  summarize(Gene, day, t_stat=t$statistic, t_pvalue = t$p.value, Xist_classification = NA)
tt$fdr <- p.adjust(tt$t_pvalue, method = 'BH'); tt %>% arrange(Gene, day)

g <- df_fc_scaled[df_fc_scaled$Gene %in% "Klhl13",] %>%
  ggplot(aes(x = day, y = log2(XiXa_scaled), color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene) +
  geom_text(data = tt[tt$Gene %in% "Klhl13",], 
            aes(x = day, y = 1.75, label = formatC(t_pvalue, digits = 1)),
            size = geomtext_size, color = "black") +
  geom_hline(yintercept = 0, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=mean, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", 
       y = expression("Scaled ratio: "*"("*X[i]*"/"*X[a]*") [log2]"),
       color = "") +
  scale_y_continuous(limits = c(-2, 2))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "C_XiXa_ratios_0hScaled_ttest_Klhl13.pdf"))

g <- df_fc_scaled[df_fc_scaled$Gene %in% c("Pir", "Hprt"),] %>%
  ggplot(aes(x = day, y = log2(XiXa_scaled), color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene) +
  geom_text(data = tt[tt$Gene %in% c("Pir", "Hprt"),], 
            aes(x = day, y = 1.75, label = formatC(t_pvalue, digits = 1)),
            size = geomtext_size, color = "black") +
  geom_hline(yintercept = 0, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=mean, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", 
       y = expression("Scaled ratio: "*"("*X[i]*"/"*X[a]*") [log2]"),
       color = "") +
  scale_y_continuous(limits = c(-2, 2))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "C_XiXa_ratios_0hScaled_ttest_PirHprt.pdf"), width = 10)
@

\subsection{RNA-FISH}

\subsubsection{Load data}
<<>>=
file <- paste0(figpath, "RNA_FISH.xlsx")
data <- data.frame(read_excel(path = file))
data$Xist_classification <- revalue(factor(as.character(data$Group)), 
                                     replace = c("dXIC_B6" = "Xist-MA (Xi=Cast)",
                                                 "dXIC_Cast" = "Xist-MA (Xi=B6)"))

# test
wt <- data %>%
  group_by(Day, Variable) %>%
  do(t=wilcox.test(Value~Xist_classification, data=., paired = TRUE)) %>%
  summarize(Variable, Day, t_stat=t$statistic, t_pvalue = t$p.value, Xist_classification = NA)
wt$fdr <- p.adjust(wt$t_pvalue, method = 'BH'); wt %>% arrange(Variable, Day)

tt <- data %>%
  group_by(Day, Variable) %>%
  do(t=t.test(Value~Xist_classification, data=., paired = TRUE)) %>%
  summarize(Variable, Day, t_stat=t$statistic, t_pvalue = t$p.value, Xist_classification = NA)
tt$fdr <- p.adjust(tt$t_pvalue, method = 'BH'); tt %>% arrange(Variable, Day)
@

\subsubsection{Plot}
<<>>=
data$Variable <- factor(data$Variable, levels = c("Xist positive",
                                                  "Xist negative",
                                                  "XO"))

g <- data %>%
  ggplot(aes(x = factor(Day), y = Value, color = Xist_classification, fill = Xist_classification)) +
  facet_grid(.~Variable) +
  theme_bw() + theme1 +  
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=mean, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) + theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(limits = c(0, 100), breaks = seq(0, 100, 25)) +
  labs(x = "Time [days]", 
       y = "Cells [%]",
       color = "")
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(figpath, "E_RNA-FISH.pdf"))
@

\subsubsection{Supplementary plots}
<<>>=
suppath <- paste0(path, "output/figSUPP/figures/")
dir.create(path = suppath, showWarnings = FALSE, recursive = TRUE)

### Xist qPCR
x <- df[(df$experiment == "qPCR")&(!df$group %in%  "WT"),]
x$Xist_classification <- revalue(factor(as.character(x$group)), 
                                     replace = c(
                                       # "WT" = "WT",
                                       "dXIC on B6 allele" = "Xist-MA (Xi=Cast)",
                                       "dXIC on Cast allele" = "Xist-MA (Xi=B6)"
                                       ))
x$day <- as.numeric(gsub(x$time, pattern = "h", replacement = ""))/24
color_qpcr <- c(rev(color_alleles)[1:2], "WT" = "black")

g <- x %>%
  ggplot(aes(x = day, y = log2(CastSNPfreq), color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(Gene~., scales = "free_y") +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_qpcr) +
  labs(x = "Time [days]", y = "Relative expression [log2]", color = "") +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 2, savefile = paste0(suppath, "S4_qPCR_allgenes.pdf"))

g <- x[x$Gene %in% "Xist",] %>%
  ggplot(aes(x = day, y = log2(CastSNPfreq), color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(Gene~., scales = "free_y") +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_qpcr) +
  labs(x = "Time [days]", y = "Relative expression [log2]", color = "") +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 2, savefile = paste0(suppath, "S4_qPCR_Xist.pdf"))

### raw pyroseq data (%B6) per gene, including Xist, and making separate panels for the control and DS genes
x <- df[(df$experiment == "Pyroseq") & (!df$group %in% c("WT", "gDNA")),]
x <- x[!is.na(x$CastSNPfreq),]
x$Xist_classification <- revalue(factor(as.character(x$group)), 
                                     replace = c("dXIC on B6 allele" = "Xist-MA (Xi=Cast)",
                                                 "dXIC on Cast allele" = "Xist-MA (Xi=B6)"))
x$day <- as.numeric(gsub(x$time, pattern = "h", replacement = ""))/24
x$is_hit <- ifelse(x$Gene %in% hits, "DS gene", "Control gene")

x$B6SNPfreq <- 100-x$CastSNPfreq

g <- x[x$Gene %in% "Klhl13",] %>%
  ggplot(aes(x = day, y = B6SNPfreq, color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene, scales = "free_y") +
  geom_hline(yintercept = 50, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = "B6 molecules [%]", color = "") +
  theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(breaks = seq(0, 100, 25), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(suppath, "S4_B6Freq_Klhl13.pdf"), width = 20)

g <- x[x$Gene %in% c("Pir", "Hprt"),] %>%
  ggplot(aes(x = day, y = B6SNPfreq, color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene, scales = "free_y") +
  geom_hline(yintercept = 50, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = "B6 molecules [%]", color = "") +
  theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(breaks = seq(0, 100, 25), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(suppath, "S4_B6Freq_PirHprt.pdf"), width = 20)

g <- x[x$is_hit == "DS gene",] %>%
  ggplot(aes(x = day, y = B6SNPfreq, color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene, scales = "free_y") +
  geom_hline(yintercept = 50, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = "B6 molecules [%]", color = "") +
  theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(breaks = seq(0, 100, 25), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(suppath, "S4_B6Freq_DSgenes.pdf"), width = 20)

g <- x[x$Gene %in% "Xist",] %>%
  ggplot(aes(x = day, y = B6SNPfreq, color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene, scales = "free_y") +
  geom_hline(yintercept = 50, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = "B6 molecules [%]", color = "") +
  theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(breaks = seq(0, 100, 25), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(suppath, "S4_B6Freq_Xist.pdf"), width = 20)

g <- x[(x$is_hit != "DS gene")&(!x$Gene %in% "Xist"),] %>%
  ggplot(aes(x = day, y = B6SNPfreq, color = Xist_classification, fill = Xist_classification)) +
  theme_bw() + theme1 +  
  facet_grid(.~Gene, scales = "free_y") +
  geom_hline(yintercept = 50, size = linesize, linetype = "dashed", alpha = 1/4) +
  geom_jitter(position=position_jitterdodge(jitter.width = .1, dodge.width = 0.75),
              size = small_scattersize, show.legend = FALSE, alpha = 1/2) +
  stat_summary(fun.y=median, aes(ymin=..y.., ymax=..y..), geom='errorbar', width=0.5,
               position=position_jitterdodge(jitter.width = 0, dodge.width = 0.75), size = linesize*2) +
  scale_color_manual(values = color_alleles) +
  labs(x = "Time [days]", y = "B6 molecules [%]", color = "") +
  theme(strip.text.y = element_text(angle = 0)) +
  scale_y_continuous(breaks = seq(0, 100, 25), limits = c(0, 100))
adjust_size(g = g, panel_width_cm = 2, panel_height_cm = 2, savefile = paste0(suppath, "S4_B6Freq_Controlgenes.pdf"), width = 20)
@


\clearpage


\section{Figure SUPP: supplementary figures}

\subsection{Define output figure folders}
<<>>=
figpath <- paste0(path, "output/figSUPP/")
dir.create(path = figpath, showWarnings = FALSE, recursive = TRUE)
@

\subsection{S1_A) Alignment statistics - gene quantification}

\subsubsection{Load data}
<<>>=
# load alignment informations
load(paste0(AS_path, "DGE_Unfiltered_alltimes_Both_XX.RData"))
summary_stats <- data.frame(id = dge$samples$id,
                            total = dge$samples$seqdepth,
                            ua = dge$samples$uniquealigned,
                            column = dge$samples$column, 
                            Time = dge$samples$time)
summary_stats <- summary_stats[summary_stats$column %in% c(1:10),]

# include notAS quantification
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
x <- data.frame(id = dge$samples$id,
                exonic = colSums(dge$counts))
m <- match(summary_stats$id, x$id); table(is.na(m))
summary_stats$exonic <- x$exonic[m]

# include AS quantification
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6_XX.RData"))
x <- data.frame(id = dge$samples$id,
                b6 = colSums(dge$counts))
m <- match(summary_stats$id, x$id); table(is.na(m))
summary_stats$b6 <- x$b6[m]

load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ_XX.RData"))
x <- data.frame(id = dge$samples$id,
                cast = colSums(dge$counts))
m <- match(summary_stats$id, x$id); table(is.na(m))
summary_stats$cast <- x$cast[m]

# compute median numbers and percentages over sequencing depths
rownames(summary_stats) <- summary_stats$id
summary_stats <- summary_stats[,-1]
sum <- summary_stats %>%
  dplyr::group_by(Time) %>% 
  dplyr::summarise(seqdepth = median(total), 
                   ua = median(ua), 
                   exonic = median(exonic),
                   b6 = median(b6), 
                   cast = median(cast))
perc <- data.frame(summary_stats[, c("total", "ua", "exonic", "b6", "cast")]/summary_stats$total*100, Time = summary_stats$Time)
perc <- perc %>%
  dplyr::group_by(Time) %>% 
  dplyr::summarise(seqdepth = median(total), 
                   ua = median(ua), 
                   exonic = median(exonic),
                   b6 = median(b6), 
                   cast = median(cast))

# melt
sum_melt <- tidyr::gather(sum, 'variable', 'value', -Time)
perc_melt <- tidyr::gather(perc, 'variable', 'value', -Time)
perc_melt$value <- paste0(round(perc_melt$value, digits = 1), "%")
sum_melt$perc <- perc_melt$value

# time->day
sum_melt$day <- factor(as.numeric(gsub(sum_melt$Time, pattern = "h", replacement = ""))/24)
perc_melt$day <- factor(as.numeric(gsub(perc_melt$Time, pattern = "h", replacement = ""))/24)

# rename factors
newlev <- c("seqdepth" = "Sequencing\nDepth", "ua" = "Uniquely\nAligned", "exonic" = "UMI\nnot-AS", "b6" = "UMI\nB6", "cast" = "UMI\nCast")
sum_melt$variable <- revalue(sum_melt$variable, replace = newlev)
perc_melt$variable <- revalue(perc_melt$variable, replace = newlev)
sum_melt$variable <- factor(sum_melt$variable, levels = newlev)
@

\subsubsection{Plot}
<<>>=
g <- sum_melt %>% 
  ggplot() + 
  theme_bw() + theme1 + 
  geom_bar(aes(x = variable, y = value, fill = day), stat = "identity", position=position_dodge()) + 
  geom_text(aes(x = variable, y = value, group = day, label=perc), hjust = -.1,
            color="black", position = position_dodge(0.9), size = geomtext_size, angle = 90, show.legend = FALSE) +
  scale_fill_grey() +
  scale_y_continuous(label = scientific_label, breaks = seq(0, 6e5, by = 1e5), limits = c(0, 7e5)) + 
  labs(x = "", y = "Median number of reads\nper time point", fill = "Time [days]")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S1_A_SeqOutput.pdf"))
@

\subsection{S1_A) Alignment statistics - spliced/unspliced quantification}

\subsubsection{Load data}
<<>>=
# load alignment informations
load(paste0(notAS_path, "DGE_spliced_alltimes_unfiltered.RData"))
summary_stats <- data.frame(id = dge$samples$sample,
                            total = dge$samples$seqdepth,
                            ua = dge$samples$uniquealigned,
                            column = dge$samples$column, 
                            Time = dge$samples$time,
                            spliced = colSums(dge$counts))

# include unspliced
load(paste0(notAS_path, "DGE_unspliced_alltimes_unfiltered.RData"))
unspliced <- colSums(dge$counts)
summary_stats$unspliced <- unspliced[match(summary_stats$id, dge$samples$sample)]

# include AS spliced and unspliced quantification
temp <- c()
for(al in c("BL6", "CastEiJ")){
  load(paste0(AS_path, "DGE_spliced_alltimes_", al, "_unfiltered.RData"))
  ex <- colSums(dge$counts); ex <- ex[match(summary_stats$id, dge$samples$sample)]
  
  load(paste0(AS_path, "DGE_unspliced_alltimes_", al, "_unfiltered.RData"))
  intr <- colSums(dge$counts); ex <- ex[match(summary_stats$id, dge$samples$sample)]
  
  temp <- cbind(temp, ex, intr); rownames(temp) <- colnames(dge)
}
colnames(temp) <- c("spliced_B6", "unspliced_B6", "spliced_Cast", "unspliced_Cast")
summary_stats <- data.frame(summary_stats, temp)

# compute median numbers and percentages over sequencing depths
rownames(summary_stats) <- summary_stats$id
summary_stats <- summary_stats[,-1]
sum <- summary_stats %>%
  dplyr::group_by(Time) %>% 
  dplyr::summarise(seqdepth = median(total), 
                   ua = median(ua), 
                   spliced = median(spliced),
                   spliced_B6 = median(spliced_B6),
                   spliced_Cast = median(spliced_Cast),
                   unspliced = median(unspliced),
                   unspliced_B6 = median(unspliced_B6),
                   unspliced_Cast = median(unspliced_Cast))
features <- colnames(summary_stats)[!colnames(summary_stats) %in% c("column", "Time")]
perc <- data.frame(summary_stats[, features]/summary_stats$total*100, Time = summary_stats$Time)
perc <- perc %>%
  dplyr::group_by(Time) %>% 
  dplyr::summarise(seqdepth = median(total), 
                   ua = median(ua), 
                   spliced = median(spliced),
                   spliced_B6 = median(spliced_B6),
                   spliced_Cast = median(spliced_Cast),
                   unspliced = median(unspliced),
                   unspliced_B6 = median(unspliced_B6),
                   unspliced_Cast = median(unspliced_Cast))

# melt
sum_melt <- tidyr::gather(sum, 'variable', 'value', -Time)
perc_melt <- tidyr::gather(perc, 'variable', 'value', -Time)
perc_melt$value <- paste0(round(perc_melt$value, digits = 1), "%")
sum_melt$perc <- perc_melt$value

# time->day
sum_melt$day <- factor(as.numeric(gsub(sum_melt$Time, pattern = "h", replacement = ""))/24)
perc_melt$day <- factor(as.numeric(gsub(perc_melt$Time, pattern = "h", replacement = ""))/24)

# rename factors
newlev <- c("seqdepth" = "Sequencing\nDepth", "ua" = "Uniquely\nAligned", 
            "spliced" = "UMI\nSpliced", "spliced_B6" = "UMI\nSpliced\nB6", "spliced_Cast" = "UMI\nSpliced\nCast",
            "unspliced" = "UMI\nUnspliced", "unspliced_B6" = "UMI\nUnspliced\nB6", "unspliced_Cast" = "UMI\nUnspliced\nCast")
sum_melt$variable <- revalue(sum_melt$variable, replace = newlev)
perc_melt$variable <- revalue(perc_melt$variable, replace = newlev)
sum_melt$variable <- factor(sum_melt$variable, levels = newlev)
@

\subsubsection{Plot}
<<>>=
features <- as.character(unique(sum_melt$variable)[grepl(unique(sum_melt$variable), pattern = "UMI")])
s <- sum_melt[sum_melt$variable %in% features,]

s <- data.frame(s, strsplit2(s$variable, split = "\n")[,-1])
s$X2 <- as.character(s$X2); s$X2[s$X2 == ""] <- "not-AS UMI"
newlev <- c("not-AS UMI" = "not-AS UMI", "B6" = "B6 UMI", "Cast" = "Cast UMI")
s$X2 <- factor(revalue(factor(s$X2), replace = newlev), levels = newlev)

g <- s %>% 
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~X1) +
  geom_bar(aes(x = X2, y = value, fill = day), stat = "identity", position=position_dodge()) + 
  geom_text(aes(x = X2, y = value, group = day, label=perc), hjust = -.1,
            color="black", position = position_dodge(0.9), size = geomtext_size, angle = 90, show.legend = FALSE) +
  scale_fill_grey() +
  scale_y_continuous(label = scientific_label, breaks = seq(0, 6e5, by = 5e4), limits = c(0, 1.75e5)) + 
  labs(x = "", y = "Median number of reads\nper time point", fill = "Time [days]")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S1_A_SeqOutput_SplicedUnspliced_SeparatePanels.pdf"), width = 10)
@

\subsection{S1_B) Pre-processing - cell filtering: violin plots}

\subsubsection{Load data}
<<>>=
# MAD filtering
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData"))
dge$genes$isERCC <- grepl(dge$genes$symbol, pattern = "^ERCC")
dge$genes$isMT <- grepl(dge$genes$symbol, pattern = "^mt")
# dge$samples$perc_exprgenes <- colMeans(dge$counts>0)*100
dge$samples$perc_exprgenes <- colSums(dge$counts>0)
dge$samples$perc_ERCC <- colSums(dge$counts[dge$genes$isERCC,])/colSums(dge$counts)*100
dge$samples$perc_mtDNA <- colSums(dge$counts[dge$genes$isMT,])/colSums(dge$counts)*100
dge$samples$Red <- as.numeric(as.character(dge$samples$Red))

filter_matrix <- ddply(dge$samples, .variables = .(group), transform, 
                       seq_filter = MADoutlier(seqdepth, type = "lower", log = TRUE, nmads = 3),
                       lib_filter = MADoutlier(lib.size, type = "lower", log = TRUE, nmads = 3),
                       expr_filter = MADoutlier(perc_exprgenes, type = "lower", log = TRUE, nmads = 3),
                       ercc_filter = MADoutlier(perc_ERCC, type = "upper", nmads = 3),
                       mtdna_filter = MADoutlier(perc_mtDNA, type = "upper", nmads = 3),
                       red_filter = MADoutlier(Red, type = "upper", nmads = 3)
)
filter_matrix$image_filter <- rowSums(filter_matrix[, c("Empty", "Multiple")]==1)>0
filter_matrix$filtered <- rowSums(filter_matrix[, grepl(x = colnames(filter_matrix), pattern = "filter")]) > 0
dge$samples$MAD_filtering <- dge$samples$id %in% filter_matrix$id[filter_matrix$filtered == TRUE]
table(dge$samples$day, dge$samples$MAD_filtering)
features <- c("id", "day", "seqdepth", "lib.size", "perc_exprgenes", "perc_ERCC", "perc_mtDNA", "Red", 
              "Dead", "Empty", "Multiple", 
              "MAD_filtering")
cells <- dge$samples[, features]

# melt
features_filter <- c("seqdepth", "lib.size", "perc_exprgenes", "perc_ERCC", "perc_mtDNA", "Red")
temp <- dge$samples[, colnames(dge$samples) %in% c("group", "time", "id", features_filter)]
s_melt <- tidyr::gather(temp, 'variable', 'value', -group, -time, -id)
s_melt <- s_melt[s_melt$variable %in% features_filter,]
s_melt$variable <- revalue(s_melt$variable, c("seqdepth" = "Sequencing\nDepth", 
                                              "lib.size" = "Library\nSize", 
                                              # "perc_exprgenes" = "Expressed\nGenes (%)",
                                              "perc_exprgenes" = "Expressed\nGenes",
                                              "perc_ERCC" = "ERCC (%)", "perc_mtDNA" = "mtDNA (%)", 
                                              "Red" = "Red fluorophore\n(AF594)"))
s_melt$value <- as.numeric(s_melt$value)
s_melt$day <- factor(as.numeric(gsub(s_melt$time, pattern = "h", replacement = ""))/24)


# compute thresholds per variable
thresholds <- ddply(s_melt, .variables = .(variable), summarize, 
                    threshold_log_low = MAD_threshold(value, log = TRUE, nmads = 3)[2],
                    threshold_log_high = MAD_threshold(value, log = TRUE, nmads = 3)[1],
                    threshold_nolog_low = MAD_threshold(value, log = FALSE, nmads = 3)[2],
                    threshold_nolog_high = MAD_threshold(value, log = FALSE, nmads = 3)[1])

# count number of cells filtered via MAD filtering
apply(filter_matrix[, (ncol(filter_matrix)-7):(ncol(filter_matrix)-2)], 2, table)
@

\subsubsection{XX cells: Low/High cell filtering}
<<>>=
### low filtering
lv <- c("Sequencing\nDepth", 
        "Library\nSize", 
        # "Expressed\nGenes (%)",
        "Expressed\nGenes")
lv_df <- s_melt[s_melt$variable %in% lv,]

g <- lv_df %>% 
  ggplot() +
  theme_bw() +  theme1 + 
  facet_grid(variable~., scales = "free_y") +
  geom_violin(aes(x = day, y = value), alpha = 1/2, draw_quantiles = c(0.5), size = violin_box_size) + 
  geom_jitter(aes(x = day, y = value), alpha = 1/4, size = outliersize,
              position=position_jitter(width = .1), shape = 21) +
  geom_hline(data = thresholds[thresholds$variable %in% lv,], aes(yintercept = 10^threshold_log_low),
             linetype = "dashed", color = "red", size = linesize) + 
  labs(x="Time [days]", y = "") +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "S1_B_LowValueFilter.pdf"))

### high filtering
hv <- c("ERCC (%)", "mtDNA (%)", "Red fluorophore\n(AF594)")
hv_df <- s_melt[s_melt$variable %in% hv,]

g <- hv_df %>% 
  ggplot() +
  theme_bw() +  theme1 + 
  facet_grid(variable~., scales = "free_y") +
  geom_violin(aes(x = day, y = log10(value + 0.01)), alpha = 1/2, draw_quantiles = c(0.5), size = violin_box_size) + 
  geom_jitter(aes(x = day, y = log10(value + 0.01)), alpha = 1/4, size = outliersize,
              position=position_jitter(width = .1), shape = 21) +
  geom_hline(data = thresholds[thresholds$variable %in% hv,], aes(yintercept = log10(threshold_nolog_high + 0.01)),
             linetype = "dashed", color = "red", size = linesize) + 
  labs(x="Time [days]", y = expression(log[10]*"(value + 0.01)]")) +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "S1_B_HighValueFilter.pdf"))
@

\subsubsection{XX cells: Image filtering}
<<>>=
xx <- filter_matrix[filter_matrix$group %in% "XX",]
xx$Dead <- as.numeric(MADoutlier(xx$Red, type = "upper", nmads = 3))

features <- c("time", "Green", "Red", "Empty", "Multiple", "Dead")
xx_melt <- tidyr::gather(xx[, features], 'variable', 'value', -time, -Green, -Red)
xx_melt$Green <- as.numeric(as.character(xx_melt$Green))
xx_melt$Red <- as.numeric(as.character(xx_melt$Red))
xx_melt$day <- factor(as.numeric(gsub(xx_melt$time, pattern = "h", replacement = ""))/24)

g <- xx_melt %>%
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(variable~., scales = "free_y") +
  geom_point(data = xx_melt[xx_melt$value == "0",],
             aes(x = log10(Green + 0.01), y = log10(Red + 0.01)), color = "black", alpha = 1/4,
             size = outliersize, show.legend = FALSE) + 
  geom_point(data = xx_melt[xx_melt$value == "1",],
             aes(x = log10(Green + 0.01), y = log10(Red + 0.01)), color = "red",
             size = outliersize, show.legend = FALSE) + 
  labs(x = expression("AF488: Green fluorophore ["*log[10]*"(value + 0.01)]"), 
       y = expression("AF594: Red fluorophore ["*log[10]*"(value + 0.01)]")) +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "S1_B_ImageFilter.pdf"))
@

\subsection{S1_C) Pre-processing - XO cell filtering}

\subsubsection{Load data}
<<>>=
# removing XO subpopulation
load(paste0(AS_path, "DGE_Unfiltered_alltimes_BL6_XX.RData")); b6 <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_CastEiJ_XX.RData")); cast <- dge
load(paste0(AS_path, "DGE_Unfiltered_alltimes_Both_XX.RData")); both <- dge
load(paste0(notAS_path, "DGE_Unfiltered_alltimes_XX.RData")); notas <- dge
r <- data.frame(id = dge$samples$id,
                day = dge$samples$day,
                Xist_notAS_UMI = notas$counts["Xist",],
                Xist_AS_UMI = both$counts["Xist",],
                libsize_AS = colSums(both$counts),
                b6Xsum = colSums(b6$counts[b6$genes$chromosome %in% "X",]),
                castXsum = colSums(cast$counts[cast$genes$chromosome %in% "X",]),
                bothXsum = colSums(both$counts[both$genes$chromosome %in% "X",]),
                b6Xratio = colSums(b6$counts[b6$genes$chromosome %in% "X",])/colSums(both$counts[both$genes$chromosome %in% "X",])
)
XO_threshold <- 0.8
r$XO_filtering <- r$XO_inferred <- ifelse(is.na(r$b6Xratio), NA, 
                         (r$Xist_AS_UMI==0)&(abs(r$b6Xratio-0.5)>abs(XO_threshold-0.5)))
r$Xist_AS_CPM <- (r$Xist_AS_UMI/r$libsize_AS)*1e6
r$Day <- paste0("Day ", r$day)

# count number of cells filtered via MAD filtering
r %>% group_by(day) %>% summarise(filtered = sum(XO_filtering[!is.na(XO_filtering)]))
@

\subsubsection{Plot}
<<>>=
g <- r %>% ggplot() + 
  theme_bw() + theme1 +
  geom_point(aes(x = b6Xratio, y = log10(Xist_AS_CPM + 1)), alpha = 0.5,
             size = small_scattersize, show.legend = FALSE) + 
  geom_vline(xintercept = c(abs(1-XO_threshold), XO_threshold), linetype = "dashed", size = linesize, color = "red", alpha = 1/2) +
  geom_hline(yintercept = 0.5, linetype = "dashed", size = linesize, color = "red", alpha = 1/2) +
  facet_grid(Day ~ .) +  
  scale_x_continuous(breaks = c(0, 0.2, 0.5, 0.8, 1)) +
  labs(x = expression("X Chromosome Ratio [XR = "*B6[chrX]*"/("*B6[chrX]+Cast[chrX]*")"), 
       y = expression(Xist[AS]*" ["*log[10]*"(CPM + 1)]")) +
  theme(strip.text.y = element_text(angle = 0))
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 3, savefile = paste0(figpath, "S1_C_XOfiltering.pdf"), height = 10)
@

\subsection{S1_D) Pre-processing - remove misleading SNPs across all time points}

\subsubsection{Load data}
<<>>=
# misleading SNP annotation
load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_BL6.RData")); b6 <- dge
load(paste0(AS_path, "DGE_CellFilteredXO_alltimes_CastEiJ.RData")); cast <- dge
r <- data.frame(chr = b6$genes$chromosome, 
                symbol = dge$genes$symbol, 
                both_detrate = rowMeans(as$counts>0),
                both_detrate_filtering = rowMeans(as$counts>0) <= 0.2,
                both_AScount = rowSums(b6$counts+cast$counts), 
                b6_AScount = rowSums(b6$counts),
                B6Total_ASratio = rowSums(b6$counts)/rowSums(b6$counts+cast$counts))
r$misleadingSNP_filtering <- abs(r$B6Total_ASratio - 0.5) > 0.4
r$isX <- ifelse(r$chr %in% "X", "X-linked", "Autosomal")

r <- r[r$both_detrate_filtering == FALSE,]
table(filtered = r$misleadingSNP_filtering, Xlinked = r$chr %in% "X")
@

\subsubsection{Plot}
<<>>=
g <- r %>% 
  ggplot() + 
  theme_bw() + theme1 + 
  facet_grid(.~isX) + 
  geom_point(aes(x = B6Total_ASratio, y = both_AScount), size = outliersize, 
             color = adjustcolor("black", alpha.f = 1/4), shape = 21) +
  geom_text_repel(data = r[(r$B6Total_ASratio>0.9|r$B6Total_ASratio<0.1)&(r$isX == "X-linked"),],
                  aes(x = B6Total_ASratio, y = both_AScount, label = symbol),
                  segment.size = linesize, min.segment.length = 0, size = geomtext_size, nudge_y = 500) +
  scale_x_continuous(breaks = c(0, 0.1, 0.5, 0.9, 1)) + 
  geom_vline(xintercept = c(0.1, 0.9), linetype = "dashed", size = linesize, color = "red") + 
  geom_vline(xintercept = c(0.5), linetype = "dashed", size = linesize, color = "black", alpha = 0.5) + 
  labs(x = "Gene AS expression rate: B6/(B6+Cast)", y = "Total AS UMI counts", title = "")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S1_D_MisleadingSNPs.pdf"))
@


\subsection{S2_A) Allelic ratio (B6/Cast) per time point and Xist group (for autosomal and X-linked genes)}

\subsubsection{Load data}
<<>>=
# load data
load(paste0(AS_path, "DGE_complete_alltimes_BL6.RData")); b6 <- dge[,dge$samples$group %in% "XX"]
load(paste0(AS_path, "DGE_complete_alltimes_CastEiJ.RData")); cast <- dge[,dge$samples$group %in% "XX"]

df_as <- data.frame(Time = rep(b6$samples$time, each = nrow(b6)), 
                    Cell = rep(colnames(b6), each = nrow(b6)), 
                    Xist = rep(b6$samples$Xist_ratio_class, each = nrow(b6)),
                    Xchr = rep(b6$samples$Xchr_ratio_class, each = nrow(b6)),
                    B6_els = rep(b6$samples$eff_libsize_notX, each = nrow(b6)),
                    Cast_els = rep(cast$samples$eff_libsize_notX, each = nrow(cast)),
                    Gene = rep(rownames(b6), times = ncol(b6)),
                    Chromosome = rep(b6$genes$chromosome, times = ncol(b6)),
                    b6 = c(b6$counts), cast = c(cast$counts))
df_as$Time <- gsub(df_as$Time, pattern = "h", replacement = "hrs")
df_as$both <- df_as$b6 + df_as$cast

df_as$isX <- ifelse(df_as$Chromosome %in% "X", "X-linked", "Autosomal")
df_as$Xist_classification <- revalue(factor(df_as$Xist), replace = c("Undetected" = "Xist\nUndetected", "Low-Xist" = "Xist Low",
                                                                     "Middle" = "Intermediate Ratio", "Xist_BA" = "Xist-BA",
                                                                     "BL6_MA" = "Xist-MA\n(Xi=B6)", "Cast_MA" = "Xist-MA\n(Xi=Cast)"))
lev_ref <- c("Xist\nUndetected", "Xist Low", "Intermediate Ratio", "Xist-BA", "Xist-MA\n(Xi=B6)", "Xist-MA\n(Xi=Cast)")
df_as$Xist_classification <- factor(df_as$Xist_classification, levels = lev_ref)
df_as$day <- factor(as.numeric(gsub(df_as$Time, pattern = "hrs", replacement = ""))/24)
@

\subsubsection{Plot}
<<>>=
remove_Xistgroups <- c("Xist Low", "Intermediate Ratio", "Xist-BA")

# per time point, Xist group and chromosome
b2 <- df_as[!df_as$Xist_classification %in% remove_Xistgroups, ] %>%
  dplyr::group_by(day, Cell) %>% 
  dplyr::mutate(XCR = sum(b6[Chromosome %in% "X"])/sum(b6[Chromosome %in% "X"] + cast[Chromosome %in% "X"])) %>%
  dplyr::group_by(day, Xist_classification, Cell, isX) %>% 
  dplyr::summarise(b6_cast_ratio = sum(b6)/sum(cast))

b2_median <- b2 %>%
  dplyr::group_by(day, Xist_classification, isX) %>% dplyr::summarise(med = median(b6_cast_ratio)) %>%
  dplyr::arrange(Xist_classification)
b2_median[(b2_median$Xist_classification == "Xist\nUndetected")&(b2_median$isX == "Autosomal"),]

g <- b2 %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  facet_grid(.~isX) +
  geom_boxplot(aes(x = Xist_classification, y = log2(b6_cast_ratio), color = day), outlier.shape = NA, size = violin_box_size) + 
  geom_jitter(aes(x = Xist_classification, y = log2(b6_cast_ratio), color = day), fill = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .05, dodge.width = 0.75), 
              size = outliersize, show.legend = FALSE) +
  scale_color_manual(values=time_colors) +
  labs(y = expression(sum[g]*"("*B6[gc]*") / "*sum[g]*"("*Cast[gc]*") ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Cell-wise log2(total B6/total Cast) expression", color = "Time [days]")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay.pdf"))

### compute gene ratios: all cells for autosomal genes, and divided by Xist group for X-linked genes
b3 <- df_as %>%
  dplyr::group_by(day, Xist_classification, Gene, isX) %>% 
  dplyr::summarise(b6_cast_ratio = (sum(b6) + 0.01)/(sum(cast) + 0.01))
summary(b3$b6_cast_ratio)

b3_median <- b3 %>%
  dplyr::group_by(day, Xist_classification, isX) %>% dplyr::summarise(med = median(b6_cast_ratio)) %>%
  dplyr::arrange(Xist_classification)

# define groups: Autosomal all, X-linked Xist-groups excluding: "Xist Low", "Intermediate Ratio", "Xist-BA"
b3$group <- ifelse(b3$isX == "Autosomal", "Autosomal", paste0("X-linked\n", b3$Xist_classification))

g <- b3[!b3$group %in% paste0("X-linked\n", remove_Xistgroups),] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_boxplot(aes(x = group, y = log2(b6_cast_ratio), color = day), size = violin_box_size,
               outlier.size = outliersize, outlier.alpha = 1/4) + 
  scale_color_manual(values=time_colors) +
  labs(y = expression("["*sum[g]*"("*B6[gc]*") + 0.01] / ["*sum[g]*"("*Cast[gc]*") + 0.01] ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Gene-wise log2(total B6/total Cast) expression", color = "Time [days]")
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay_GeneWise.pdf"))

# no outliers
g <- b3[!b3$group %in% paste0("X-linked\n", remove_Xistgroups),] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_boxplot(aes(x = group, y = log2(b6_cast_ratio), color = day), size = violin_box_size,
               outlier.size = outliersize, outlier.alpha = 1/4, outlier.shape = NA,
               position = position_dodge2(preserve = "single")) + 
  scale_color_manual(values=time_colors) +
  labs(y = expression("["*sum[g]*"("*B6[gc]*") + 0.01] / ["*sum[g]*"("*Cast[gc]*") + 0.01] ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Gene-wise log2(total B6/total Cast) expression", color = "Time [days]") +
  scale_y_continuous(breaks = seq(-10, 10, by = 5), limits = c(-7, 12))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay_GeneWise_noOutliers.pdf"))

# no outliers
g <- b3[b3$group %in% c("X-linked\nXist\nUndetected", "Autosomal"),] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_boxplot(aes(x = group, y = log2(b6_cast_ratio), color = day), size = violin_box_size,
               outlier.size = outliersize, outlier.alpha = 1/4, outlier.shape = NA,
               position = position_dodge2(preserve = "single")) + 
  scale_color_manual(values=time_colors) +
  labs(y = expression("["*sum[g]*"("*B6[gc]*") + 0.01] / ["*sum[g]*"("*Cast[gc]*") + 0.01] ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Gene-wise log2(total B6/total Cast) expression", color = "Time [days]") +
  scale_y_continuous(breaks = seq(-10, 10, by = 1), limits = c(-3, 3))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay_GeneWise_noOutliers_restricted.pdf"))

# no outliers; X-linked groups
Xlinked_groups <- c("X-linked\nXist\nUndetected", "X-linked\nXist-MA\n(Xi=B6)", "X-linked\nXist-MA\n(Xi=Cast)")
g <- b3[b3$group %in% Xlinked_groups,] %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  geom_boxplot(aes(x = group, y = log2(b6_cast_ratio), color = day), size = violin_box_size,
               outlier.size = outliersize, outlier.alpha = 1/4, outlier.shape = NA,
               position = position_dodge2(preserve = "single")) + 
  scale_color_manual(values=time_colors) +
  labs(y = expression("["*sum[g]*"("*B6[gc]*") + 0.01] / ["*sum[g]*"("*Cast[gc]*") + 0.01] ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Gene-wise log2(total B6/total Cast) expression", color = "Time [days]") +
  scale_y_continuous(breaks = seq(-10, 10, by = 5), limits = c(-7, 12))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 3, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay_GeneWise_noOutliers_restricted_Xlinked.pdf"))



### repeat for each chromosome separately
b3 <- df_as[!df_as$Xist_classification %in% remove_Xistgroups, ] %>%
  dplyr::group_by(day, Cell) %>% 
  dplyr::mutate(XCR = sum(b6[Chromosome %in% "X"])/sum(b6[Chromosome %in% "X"] + cast[Chromosome %in% "X"])) %>%
  dplyr::group_by(day, Xist_classification, Cell, Chromosome) %>% 
  dplyr::summarise(b6_cast_ratio = sum(b6)/sum(cast))

g <- b3 %>%  
  ggplot() +
  theme_bw() + theme1 + 
  geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
  facet_grid(Chromosome~.) +
  geom_boxplot(aes(x = Xist_classification, y = log2(b6_cast_ratio), color = day), outlier.shape = NA, size = violin_box_size) + 
  geom_jitter(aes(x = Xist_classification, y = log2(b6_cast_ratio), color = day), fill = "black",
              alpha = 1/4, position=position_jitterdodge(jitter.width = .05, dodge.width = 0.75), 
              size = outliersize, show.legend = FALSE) +
  scale_color_manual(values=time_colors) +
  labs(y = expression(sum[g]*"("*B6[gc]*") / "*sum[g]*"("*Cast[gc]*") ["*log[2]*"(value)]"), x = "", fill = "",
       title = "Cell-wise log2(total B6/total Cast) expression")
adjust_size(g = g, panel_width_cm = 3, panel_height_cm = 1, savefile = paste0(figpath, "S2_A_B6CastRatio_XistclassDay_perChromosome.pdf"), height = 15)
@

\subsection{S2_B) Check detection bias between Cast and B6 (autosomal) expression}

\subsubsection{Load data}
<<>>=
load(paste0(AS_path, "DGE_complete_alltimes_BL6.RData")); b6 <- dge[dge$genes$chromosome %in% c(1:19), dge$samples$group == "XX"]
load(paste0(AS_path, "DGE_complete_alltimes_CastEiJ.RData")); cast <- dge[dge$genes$chromosome %in% c(1:19), dge$samples$group == "XX"]

x <- data.frame(time = rep(b6$samples$time, each = nrow(b6)),
                id = rep(b6$samples$id, each = nrow(b6)),
                chr = rep(b6$genes$chromosome, times = ncol(b6)),
                gene = rep(b6$genes$symbol, times = ncol(b6)),
                b6 = c(b6$counts/(colSums(b6$counts) + colSums(cast$counts))*1e6),
                cast = c(cast$counts/(colSums(b6$counts) + colSums(cast$counts))*1e6)
                # b6 = c(b6$counts),
                # cast = c(cast$counts)
                )
@

\subsubsection{signed rank test}
<<>>=
cluster <- new_cluster(10)

ASwmwtest <- x[x$chr %in% c(1:19),] %>% 
  dplyr::group_by(gene) %>% 
  partition(cluster) %>%
  dplyr::summarise(chr = unique(chr),
                   mean_global = mean(c(b6, cast)),
                   # mean_diff = mean(b6-cast),
                   mean_diff = mean(b6)-mean(cast),
                   fc = (mean(b6) + 0.01)/(mean(cast) + 0.01),
                   wmw_stat = wilcox.test(b6, cast, paired=TRUE)$statistic,
                   wmw_pvalue = wilcox.test(b6, cast, paired=TRUE)$p.value, 
                   ttest_pvalue = t.test(b6, cast, paired=TRUE)$p.value) %>% 
  dplyr::arrange(wmw_pvalue) %>%
  collect()

ASwmwtest$fdr <- p.adjust(ASwmwtest$wmw_pvalue, method = "BH")
ASwmwtest$fdr_ttest <- p.adjust(ASwmwtest$ttest_pvalue, method = "BH")

ASwmwtest$direction <- ifelse(ASwmwtest$mean_diff>0, "Higher in B6", "Higher in Cast")
ASwmwtest$significant <- ifelse(ASwmwtest$fdr<0.05, "Significant", "Not Significant")
ASwmwtest$significant_ttest <- ifelse(ASwmwtest$fdr_ttest<0.05, "Significant", "Not Significant")

table(ASwmwtest$direction, ASwmwtest$significant)
fisher.test(ASwmwtest$direction, ASwmwtest$significant)

# looks like the significance is not dependent on which allele has a higher expression
@

\subsubsection{Plot}
<<>>=
ASwmwtest$significant <- ifelse(ASwmwtest$fdr > 0.05, "Not significant",
                                ifelse(ASwmwtest$fc>1, "Higher expression in B6", "Higher expression in Cast"))
ASwmwtest$significant <- factor(ASwmwtest$significant, levels = c("Not significant", "Higher expression in B6", "Higher expression in Cast"))
ngenes <- ASwmwtest %>% dplyr::group_by(significant) %>% dplyr::summarise(n = length(significant))
ngenes$significant <- factor(ngenes$significant, levels = c("Not significant", "Higher expression in B6", "Higher expression in Cast"))
cols <- c("black", "red", "blue")

g <- ASwmwtest %>%
      ggplot() + 
      theme_bw() + theme1 +
      geom_hline(yintercept = 0, linetype = "dashed", alpha = hvalpha, size = linesize) + 
      geom_point(aes(x = log2(mean_global + 0.01), y = log2(fc), color = significant), size = outliersize, shape = 20, alpha = 3/4) + 
      geom_text(data = ngenes, aes(x = 11, y = 2.5 + seq(0, .75, length = nrow(ngenes)), label = paste0("n = ", n), color = significant), 
                size = geomtext_size, show.legend = FALSE) +
      labs(x = expression("Average CPM value ["*log[2]*"(value + 0.01)]"), 
           y = expression("(B6 Average CPM + 0.01)/(Cast Average CPM + 0.01) ["*log[2]*"(value)]"), 
           color = "Wilcoxon signed rank test: B6 v Cast CPM expression") +
      scale_color_manual(values = cols) +
      guides(color = guide_legend(override.aes = list(size = 1)))
adjust_size(g = g, panel_width_cm = 5, panel_height_cm = 5, savefile = paste0(figpath, "S2_B_B6vCast_WilcoxSignedRank.pdf"))
@


\subsection{S3_A) UpsetR for DE genes (MAST)}

\subsubsection{Load data}
<<>>=
de_threshold <- 0.05
depath <- paste0(path, "output/fig3_deXistHighLow/figures/")
load(paste0(depath, "ALLresults.RData"))
all_de <- all_de[!all_de$mgi_symbol %in% "Xist",]
all_de$isX <- ifelse(all_de$chromosome_name %in% "X", "X-linked", "Autosomal")
all_de$direction <- ifelse(all_de$coef < 0, "Down-regulated", "Up-regulated")
all_de$direction <- factor(all_de$direction, levels = c("Up-regulated", "Down-regulated"))
sig_de <- all_de[(all_de$fdr <= de_threshold),]
de_results <- sig_de[sig_de$test %in% "XistHigh_XistLow",]
de_results$day <- factor(as.numeric(gsub(de_results$time, pattern = "hrs", replacement = ""))/24)
de_results$Time <- gsub(de_results$time, pattern = "hrs", replacement = "h")

de_upset <- ddply(de_results, .variables = .(mgi_symbol, isX), summarize,
                  de_24h = ifelse(length(fdr[Time == "24h"]) > 0, 
                                  ifelse(fdr[Time == "24h"] < de_threshold, 1, 0), 0),
                  de_48h = ifelse(length(fdr[Time == "48h"]) > 0, 
                                  ifelse(fdr[Time == "48h"] < de_threshold, 1, 0), 0),
                  de_72h = ifelse(length(fdr[Time == "72h"]) > 0, 
                                  ifelse(fdr[Time == "72h"] < de_threshold, 1, 0), 0),
                  de_96h = ifelse(length(fdr[Time == "96h"]) > 0, 
                                  ifelse(fdr[Time == "96h"] < de_threshold, 1, 0), 0),
                  direction = ifelse(all(coef > 0), "Up-regulated",
                                     ifelse(all(coef < 0), "Down-regulated", "Mixed")))
@

\subsubsection{Plot}
<<>>=
# X-linked plot 
maxbar <- 60
x <- de_upset[de_upset$isX == "X-linked", ]
a <- colSums(x[x$direction == "Up-regulated", grepl(x = colnames(x), pattern = "^de_")])
b <- colSums(x[x$direction == "Down-regulated", grepl(x = colnames(x), pattern = "^de_")])
metadata <- data.frame(sets = names(a),
                       Up = as.numeric(a),
                       Down = as.numeric(b))
metadata$sets <- factor(metadata$sets, levels = paste0("de_", seq(24, 96, 24), "h"))

pdf(file = paste0(figpath, "S3_MASTupset_Xlinked.pdf"),
    width = 4, height = 5, onefile = TRUE, useDingbats = FALSE)
upset(x, main.bar.color = "blue",
      sets = paste0("de_", rev(seq(48, 96, 24)), "h"),
      order.by = "degree",
      group.by = "degree",
      keep.order = TRUE,
      decreasing = FALSE,
      mb.ratio = c(0.7, 0.3),
      point.size = scattersize*10, line.size = linesize*2, text.scale = 1.5,
      queries = list(list(query = elements, params = list("direction", c("Up-regulated")),color = "red", active = T)),
      mainbar.y.max = maxbar, mainbar.y.label = "Number of X-linked DE genes\n(Xist: High VS Low cells)\n(Xist excluded)\n"
)
dev.off()

vars <- c("de_24h", "de_48h", "de_72h", "de_96h")
y <- reshape2::melt(x, id.vars = colnames(x)[!colnames(x) %in% vars], measure.vars = vars)
y <- ddply(y, .variables = .(mgi_symbol), transform, 
           id = paste0(variable[value==1], collapse = "."))
y <- y[y$value ==1,]; ddply(y, .variables = .(id), summarize, 
                            up = length(unique(mgi_symbol[direction == "Up-regulated"])),
                            down = length(unique(mgi_symbol[direction == "Down-regulated"])))


# Autosomal plot 
maxbar <- 300
x <- de_upset[de_upset$isX == "Autosomal", ]
a <- colSums(x[x$direction == "Up-regulated", grepl(x = colnames(x), pattern = "^de_")])
b <- colSums(x[x$direction == "Down-regulated", grepl(x = colnames(x), pattern = "^de_")])
metadata <- data.frame(sets = names(a),
                       Up = as.numeric(a),
                       Down = as.numeric(b))
metadata$sets <- factor(metadata$sets, levels = paste0("de_", seq(24, 96, 24), "h"))

pdf(file = paste0(figpath, "S3_MASTupset_Autosomal.pdf"),
    width = 4, height = 5, onefile = TRUE, useDingbats = FALSE)
upset(x, main.bar.color = "blue",
      sets = paste0("de_", rev(seq(24, 96, 24)), "h"),
      order.by = "degree",
      group.by = "degree",
      keep.order = TRUE,
      decreasing = FALSE,
      mb.ratio = c(0.7, 0.3),
      point.size = scattersize*10, line.size = linesize*2, text.scale = 1.5,
      queries = list(
        list(query = elements, params = list("direction", c("Up-regulated")),
             color = "red", active = T)),
      mainbar.y.max = maxbar, mainbar.y.label = "Number of Autosomal DE genes\n(Xist: High VS Low cells)\n"
)
dev.off()

vars <- c("de_24h", "de_48h", "de_72h", "de_96h")
y <- reshape2::melt(x, id.vars = colnames(x)[!colnames(x) %in% vars], measure.vars = vars)
y <- ddply(y, .variables = .(mgi_symbol), transform, 
           id = paste0(variable[value==1], collapse = "."))
y <- y[y$value ==1,]; ddply(y, .variables = .(id), summarize, 
                            up = length(unique(mgi_symbol[direction == "Up-regulated"])),
                            down = length(unique(mgi_symbol[direction == "Down-regulated"])))
@

\subsection{S4_A) Top 500 MVGs over time - heatmap}

\subsubsection{Load data}
<<>>=
mvg <- 500
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
x0 <- dge$counts
els <- dge$samples$sf_notX*colSums(x0)
x0.log <- log10(t(t(x0)/els)*1e6+1)
rv <- apply(x0.log, 1, var)
rv_mvg <- rv[order(rv, decreasing = TRUE)][seq_len(mvg)]
feature_set <- names(rv_mvg)
x0.log.mvg <- x0.log[feature_set,]
genes <- dge$genes[feature_set,]
@

\subsubsection{Plot}
<<>>=
# Top 100 genes used for ordering
cpm_mv <- log10(as.matrix(x0.log.mvg) + 1)
annot_col_rst <- data.frame(Time = dge$samples$day)
rownames(annot_col_rst) <- colnames(cpm_mv)
annot_row_rst <- data.frame(Chromosome = ifelse(genes$chromosome %in% "X", "X-linked", "Autosomal"))
rownames(annot_row_rst) <- rownames(cpm_mv)

time_cols <- c(colorRampPalette(c("black", "white"))(length(unique(dge$samples$day))))
names(time_cols) <- levels(annot_col_rst$Time)
color_annot <- list(Time = time_cols, Chromosome = c("X-linked" = "black", "Autosomal" = "white"))
paletteLength <- 500
myColor <- c(colorRampPalette(c("black", "gold", "red"))(paletteLength))

pheatmap(cpm_mv, 
         annotation_col = annot_col_rst, annotation_row = annot_row_rst,
         annotation_colors = color_annot,
         cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE,
         color = myColor, treeheight_row = 100, cutree_rows = 5,
         gaps_col = which(!duplicated(annot_col_rst$Time))[-1] - 1,
         # width = width_heat, height = height_heat,
         main = "Top 500 most variable genes over time", 
         filename = paste0(figpath, "S4_top500_MVG_time.pdf"),
         cellheight = 1, fontsize_col = 6, fontsize_row = 6, 
         width = 10, cellwidth = .1, fontsize = 6)
@

\subsection{S4_B) Top 100 MVGs over pseudotime - heatmap}

\subsubsection{Compute scaled PDT}
<<>>=
load(paste0(notAS_path, "DGE_complete_alltimes.RData"))
dge <- dge[, dge$samples$group %in% "XX"]
dge$genes$gene_short_name <- dge$genes$symbol

# process and identify top 100 MVGs
pd <- new("AnnotatedDataFrame", data = dge$samples)
fd <- new("AnnotatedDataFrame", data = dge$genes)
XX <- newCellDataSet(as(dge$counts, "sparseMatrix"),
                       phenoData = pd,
                       featureData = fd,
                       lowerDetectionLimit=1,
                       expressionFamily=negbinomial.size())
XX <- estimateSizeFactors(XX)
XX <- estimateDispersions(XX)

# identify DE genes over hours --> select top 100 DE genes
pData(XX)$hour <- as.integer(gsub(pData(XX)$time, pattern = "h", replacement = ""))
pData(XX)$Entropy <- esApply(XX, 2, function(x){
  x <- round(x / Size_Factor)
  x <- x/sum(x)
  y <- x * log(x)
  y[is.finite(y) == FALSE] <- 0
  H = - sum(y)
  })
qplot(Entropy, data=pData(XX), geom="density") + facet_wrap(~hour, ncol=1)

de <- differentialGeneTest(XX, fullModelFormulaStr="~hour", cores=detectCores())
top_pdt_genes <- 500
de_genes <- de[de$qval < 1e-2,]
de_genes <- de_genes[order(de_genes$qval, decreasing = FALSE),]
order_genes <- rownames(de_genes[order(de_genes$qval, decreasing = FALSE),])[seq_len(top_pdt_genes)]
XX <- setOrderingFilter(XX, order_genes) # mark genes to use ub subsequent calls of clusterCells

# reduce dimensions and compute pseudotime for XX cells
XX <- reduceDimension(XX, method = 'DDRTree')
XX <- orderCells(XX)

# "State" identifies the segment of the tree. Here we choose as the start that segment with the maximum number of 0h cells
GM_state <- function(cds){
  if (length(unique(pData(cds)$State)) > 1){
    T0_counts <- table(pData(cds)$State, pData(cds)$hour)[,"0"]
    return(as.numeric(names(T0_counts)[which(T0_counts == max(T0_counts))]))
  } else {
    return (1)
  }
}
XX <- orderCells(XX, root_state = GM_state(XX))

# compute scaled PDT
pData(XX)$Scaled_PDT <- pData(XX)$Pseudotime/max(pData(XX)$Pseudotime)*100
@

\subsubsection{Plot top 100 MVGs over time}
<<>>=
# Top 100 genes used for ordering
top_pdt_genes <- 100
de_genes <- de[(de$qval < DE_threshold),]
de_genes <- de_genes[order(de_genes$qval, decreasing = FALSE),]
topde <- de_genes[seq_len(top_pdt_genes),]
og <- rownames(de_genes)[seq_len(top_pdt_genes)]

cpm <- t(t(exprs(XX))/colSums(exprs(XX))*pData(XX)$sf_notX)*1e6
cpm_mv <- log2(as.matrix(cpm[og,]) + 1)
annot_col_rst <- data.frame(Time = pData(XX)$day)
rownames(annot_col_rst) <- colnames(cpm_mv)
annot_row_rst <- data.frame(Chromosome = ifelse(topde$chromosome %in% "X", "X-linked", "Autosomal"))
rownames(annot_row_rst) <- rownames(cpm_mv)

time_cols <- rev(c(colorRampPalette(c("black", "white"))(length(unique(pData(XX)$day)))))
names(time_cols) <- levels(annot_col_rst$Time)
color_annot <- list(Time = time_cols, Chromosome = c("X-linked" = "black", "Autosomal" = "white"))
paletteLength <- 500
myColor <- c(colorRampPalette(c("black", "gold", "red"))(paletteLength))

pheatmap(cpm_mv, 
         annotation_col = annot_col_rst, annotation_row = annot_row_rst,
         annotation_colors = color_annot,
         cluster_rows = TRUE, cluster_cols = FALSE, show_colnames = FALSE,
         color = myColor, treeheight_row = 100, cutree_rows = 5,
         gaps_col = which(!duplicated(annot_col_rst$Time))[-1] - 1,
         # width = width_heat, height = height_heat,
         main = "Order genes XX cells - top 100 DE genes", 
         filename = paste0(figpath, "S4_top100_MVG_Time.pdf"),
         cellwidth = 1e-1, cellheight = 5, fontsize = 6)
@

\subsubsection{Compute top 100 MVGs over PDT}
<<>>=
top_pdt_genes <- 100; DE_threshold <- 0.05; nclust <- 5

# keep only highly expressed genes over time
cpm <- t(t(exprs(XX))/pData(XX)$Size_Factor)*1e6
filter <- rowMeans(log10(cpm + 1)) >= 4; table(filter)

XX_filt <- XX[filter,]
XX_filt$Pseudotime <- XX_filt$Pseudotime/max(XX_filt$Pseudotime)*100

test_res <- differentialGeneTest(XX_filt, fullModelFormulaStr="~sm.ns(Pseudotime, df = 3)")
sig_genes <- test_res[test_res$qval <= DE_threshold,]; table(sig_genes$chromosome == "X")
sig_genes <- sig_genes[order(sig_genes$qval, decreasing = FALSE),]; head(sig_genes, n = 20)
sig_gene_names <- rownames(sig_genes); length(sig_gene_names)

# plot top-100 autosomal most variable genes over PDT
topDEgenes <- sig_genes[seq_len(top_pdt_genes),]
annot_row_rst <- data.frame(Chromosome = ifelse(topDEgenes$chromosome %in% "X", "X-linked", "Autosomal"))
rownames(annot_row_rst) <- rownames(topDEgenes)

colors <-  colorRampPalette(c("black", "gold", "red"))(500)
pdf(file = paste0(figpath, "S4_top100_MVG_PDT.pdf"), height = 10, width = 4)
plot_pseudotime_heatmap(XX[rownames(topDEgenes),], num_clusters = 7,
                        add_annotation_row = annot_row_rst,
                        cores = 1, show_rownames = T, hmcols = colors,
                        scale_max = 5, scale_min = -5, return_heatmap = T)
dev.off()

# plot expression trend of the above genes
pdf(file = paste0(figpath, "pdt_XX_MVG_Autosomal_top", top_pdt_genes, ".pdf"), height = 20, width = 20)
plot_genes_in_pseudotime(XX[autosomal_topDEgenes,], color_by = "time", ncol = 10)
dev.off()
@

\end{document}